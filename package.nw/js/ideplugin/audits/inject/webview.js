!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=23)}([function(e,t,n){e.exports.$=function(e,t){return"string"==typeof t&&(t=document.querySelector(t)),(t||document).querySelector(e)},e.exports.$$=function(e){return document.querySelectorAll(e)},e.exports.show=function(e){"string"==typeof e&&(e=document.querySelector(e)),e.style.display=""},e.exports.hide=function(e){"string"==typeof e&&(e=document.querySelector(e)),e.style.display="none"},e.exports.sprintf=function(e,t){for(let n=0;n<t.length;n++)e=e.replace(/%s/,t[n]);return e},e.exports.reportBehavior=function(e){this.log("reportBehavior",e),pluginMessager.invoke("REPORT",JSON.stringify(e))},e.exports.log=function(){0},e.exports.formatSize=function(e){const t=["B","K","M","G"];let n;for(;(n=t.shift())&&e>1024;)e/=1024;return("B"===n?e:e.toFixed(2))+n},e.exports.hash=function(e){let t=5381,n=e.length;for(;n;)t=33*t^e.charCodeAt(--n);return t>>>0},e.exports.byteCount=function(e){return encodeURI(e).split(/%..|./).length-1},e.exports.unique=function(e){const t=[];for(let n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t},e.exports.getType=function(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()},e.exports.compareVersion=function(e,t){e=e.split("."),t=t.split(".");const n=Math.max(e.length,t.length);for(;e.length<n;)e.push("0");for(;t.length<n;)t.push("0");for(let o=0;o<n;o++){const n=parseInt(e[o]),r=parseInt(t[o]);if(n>r)return 1;if(n<r)return-1}return 0},e.exports.isRequestNotForAudit=function(e){const t=[/^data\:/,/^https:\/\/servicewechat.com\/wxa-qbase\/qbasecheckresult/,/^https?:\/\/[^\/]*\.tcb\.qcloud\.la\//,/^https?:\/\/wxsnsdythumb\.wxs\.qq\.com\//,/^https?:\/\/mmbiz\.qpic\.cn\//,/^https?:\/\/wx\.qlogo\.cn\//,/^https?:\/\/[^\/]*\.qq\.com\//,/^https?:\/\/[^\/]*\.gtimg\.com\//,/^https?:\/\/[^\/]*\.myapp\.com\//,/^http:\/\/127.0.0.1:/,/^chrome-extension:\/\//,/^https?:\/\/servicewechat\.com\//,/\/audits\/assert\//,/\/wxacrawler\//,/^https?:\/\/[^\/]*\.weixinbridge\.com\//];for(let n=0;n<t.length;n++)if(e.match(t[n]))return!0;return!1};const o=function(e){return e.filter(e=>!/^(__dev__|__asdebug__|__pageframe__|appservice\?)|audits\/assert\/inject|WAService.js|WAWebview.js|wxacrawler\/public/.test(e.file))};e.exports.parseStackStrings=function(e,t=!0){let n=e.split("\n"),r=/at\s+([\S]+)\s+\((\S+)\)/,i=n.map(e=>{let t=e.match(r);if(t&&t[1]&&t[2]){let e=t[2].replace(/^\s*/,"").replace(/http:\/\/127\.0\.0\.1:\d+\/(:?(:?appservice|wxacrawler\/\d+\/program\/\w+)?\/)?/,""),[n,o,r]=e.split(":");if(3==e.split(":").length)return{func:t[1].replace(/^Audit_(setTimeout|setInterval)_?.*$/,"$1"),file:n,line:+o,column:+r}}return null}).filter(e=>!!e);return t&&(i=o(i)),i},e.exports.getCallStack=function(e=!0){let n=t.parseStackStrings((new Error).stack);return e&&(n=o(n)),n},e.exports.onGenerateFuncReady=function(e){window.__generateFunc__?setTimeout(e):document.addEventListener("generateFuncReady",e)},e.exports.status="running"},function(e,t,n){navigator.userAgent.match(/port\/(\d*)/)&&window&&window.top==window?e.exports=n(4):e.exports=n(7)},function(e,t,n){const o=new(0,n(6).EventEmitter);o.setMaxListeners(100),e.exports=o},function(e,t,n){const o=n(5);o.init({id:187,url:"https://badjs.weixinbridge.com/badjs",globalError:!!window.isAuditsTabEnv,extend:{version:"0.0.48"}}),o.reportCustomError=function(e){try{throw new Error(`[custom] ${e}`)}catch(e){o.report(e)}},e.exports=o},function(e,t,n){const o=n(3),r=n(2);n(0);var i=function(){const e=window.navigator||window.__global.navigator,t=window.WebSocket||window.__global.WebSocket;var n=e.userAgent.match(/port\/(\d*)/),i=n?parseInt(n[1]):9974,s=null,a=`ws://127.0.0.1:${i}`,c=null,l=[],u=[];const d="GET_MESSAGE_TOKEN";function p(e){s&&s.readyState===t.OPEN?s.send(JSON.stringify(e)):u.push(e)}const f=e=>{l.push(e)};return{connect:function e(n){c=n||c;var i=window.prompt?prompt(d):__global.prompt(d);(s=new t(a,`${c}#${i}#`)).onopen=function(e){let t=[].concat(u);u=[],t.forEach(e=>{p(e)})},s.onclose=function(t){s=null,setTimeout(()=>{e(n)},100)},s.onmessage=function(e){try{let t=JSON.parse(e.data);(function(e){l.forEach(t=>{try{t(e)}catch(e){console.error(e),o.report(e)}})})(t),function(e){if("TRANSFER"===e.command&&e.data){window.navigator.userAgent;const t=e.data.eventName;r.emit(t,e.data.data)}}(t)}catch(e){console.error("ws.onmessage cb error",e),o.report(e)}}},send:p,registerCallback:f,getWs:()=>s,pub:function(e,t={}){p({command:"TRANSFER",data:{eventName:e,data:t,from:window.navigator.userAgent.indexOf("appservice")>-1?"appservice":"webview"}})},sub:function(e,t){f(n=>{"TRANSFER"===n.command&&(n.data?n.data.eventName===e&&t(n.data):console.error("messager sub error: no data field."))})}}}();e.exports=i},function(e,t,n){const o=n(2);let r="",i="";o.on("appservice-onload",function(e){r=e.appId,i=e.libVersion});
/*!
 * @module report
 * @author kael, chriscai
 * @date @DATE
 * Copyright (c) 2014 kael, chriscai
 * Licensed under the MIT license.
 */
var s=function(e){if(e.BJ_REPORT)return e.BJ_REPORT;var t=[],n={},o={id:0,uin:0,url:"",combo:1,ext:null,level:4,ignore:[],random:1,delay:1e3,submit:null,repeat:5,globalError:!0},s=function(e,t){return Object.prototype.toString.call(e)==="[object "+(t||"Object")+"]"},a=function(e){return"object"===typeof e&&!!e},c=function(e){var t=e.stack.replace(/\n/gi,"").split(/\bat\b/).slice(0,9).join("@").replace(/\?[^:]+/gi,""),n=e.toString();return t.indexOf(n)<0&&(t=n+"@"+t),t},l=function(e,t){var n,r=[],i=[],c=[];if(a(e))for(var l in e.level=e.level||o.level,e){var u=e[l];if(null!==(n=u)&&(s(n,"Number")||n)){if(a(u))try{u=JSON.stringify(u)}catch(e){u="[BJ_REPORT detect value stringify error] "+e.toString()}c.push(l+":"+u),r.push(l+"="+encodeURIComponent(u)),i.push(l+"["+t+"]="+encodeURIComponent(u))}}return[i.join("&"),c.join(","),r.join("&")]},u=function(e){var t;o.submit?o.submit(e):("undefined"!=typeof Image?t=new Image:"undefined"!=typeof document&&document.createElement&&(t=document.createElement("img")),t&&(t.src=e))},d=function(e){if(!a(e))return!0;var t=e.msg;return(n[t]=(parseInt(n[t],10)||0)+1)>o.repeat},p=[],f=0,h=function(e){if(o.report){for(;t.length;){var n=!1,r=t.shift();if(!d(r)){var i=l(r,p.length);if(s(o.ignore,"Array"))for(var a=0,c=o.ignore.length;a<c;a++){var h=o.ignore[a];if(s(h,"RegExp")&&h.test(i[1])||s(h,"Function")&&h(r,i[1])){n=!0;break}}n||(o.combo?p.push(i[0]):u(o.report+i[2]+"&_t="+ +new Date),o.onReport&&o.onReport(o.id,r))}}if(p.length){var m=function(){clearTimeout(f),u(o.report+p.join("&")+"&count="+p.length+"&_t="+ +new Date),f=0,p=[]};e?m():f||(f=setTimeout(m,o.delay))}}},m=e.BJ_REPORT={push:function(e){if(Math.random()>=o.random)return m;var n=a(e)?function(e){try{if(e.stack){var t=e.stack.match("https?://[^\n]+"),n=(t=t?t[0]:"").match(":(\\d+):(\\d+)");return n||(n=[0,0,0]),{msg:c(e),rowNum:n[1],colNum:n[2],target:t.replace(n[0],"")}}return e.name&&e.message&&e.description?{msg:JSON.stringify(e)}:e}catch(t){return e}}(e):{msg:e};return o.ext&&!n.ext&&(n.ext=o.ext),n.from=JSON.stringify({version:o.extend&&o.extend.version,appId:"undefined"!=typeof __wxConfig&&__wxConfig.accountInfo&&__wxConfig.accountInfo.appId||r,libVersion:"undefined"!=typeof __appServiceSDK__?__appServiceSDK__.wx&&__appServiceSDK__.wx.version&&__appServiceSDK__.wx.version.version:"undefined"!=typeof wx?wx.version&&wx.version.version:i}),t.push(n),h(),m},report:function(e){return e&&m.push(e),h(!0),m},info:function(e){return e?(a(e)?e.level=2:e={msg:e,level:2},m.push(e),m):m},debug:function(e){return e?(a(e)?e.level=1:e={msg:e,level:1},m.push(e),m):m},init:function(e){if(a(e))for(var n in e)o[n]=e[n];var r,i=parseInt(o.id,10);return i&&(/qq\.com$/gi.test(location.hostname)&&(o.url||(o.url="//badjs2.qq.com/badjs"),o.uin||(o.uin=parseInt((document.cookie.match(/\buin=\D+(\d+)/)||[])[1],10))),o.report=(o.url||"/badjs")+"?id="+i+"&uin="+o.uin+"&"),t.length&&h(),o.globalError&&(r=window.onerror,window.onerror=function(e,t,n,o,i){var a=e;i&&i.stack&&(a=c(i)),s(a,"Event")&&(a+=a.type?"--"+a.type+"--"+(a.target?a.target.tagName+"::"+a.target.src:""):""),m.push({msg:a,target:t,rowNum:n,colNum:o}),h(),r&&r.apply(window,arguments)}),m},__onerror__:e.onerror};return"undefined"!=typeof console&&console.error&&setTimeout(function(){var e=((location.hash||"").match(/([#&])BJ_ERROR=([^&$]+)/)||[])[2];e&&console.error("BJ_ERROR",decodeURIComponent(e).replace(/(:\d+:\d+)\s*/g,"$1\n"))},0),m}(this);e.exports=s,function(e){if(e.BJ_REPORT){var t=function(t){e.BJ_REPORT.push(t)},n={};e.BJ_REPORT.tryJs=function(e){return e&&(t=e),n};var o,r=function(e,t){for(var n in t)e[n]=t[n]},i=function(e){return"function"==typeof e},s=function(n,r){return function(){try{return n.apply(this,r||arguments)}catch(n){if(t(n),n.stack&&console&&console.error&&console.error("[BJ-REPORT]",n.stack),!o){var i=e.onerror;e.onerror=function(){},o=setTimeout(function(){e.onerror=i,o=null},50)}throw n}}},a=function(e){return function(){for(var t,n=[],o=0,r=arguments.length;o<r;o++)t=arguments[o],i(t)&&(t=s(t)),n.push(t);return e.apply(this,n)}},c=function(e){return function(t,n){if("string"==typeof t)try{t=new Function(t)}catch(e){throw e}var o=[].slice.call(arguments,2);return t=s(t,o.length&&o),e(t,n)}},l=function(e,t){return function(){for(var n,o,r=[],a=0,c=arguments.length;a<c;a++)n=arguments[a],i(n)&&(o=s(n))&&(n.tryWrap=o)&&(n=o),r.push(n);return e.apply(t||this,r)}},u=function(e){var t,n;for(t in e)n=e[t],i(n)&&(e[t]=s(n));return e};n.spyJquery=function(){var t,o,r=e.$;if(!r||!r.event)return n;r.zepto?(t=r.fn.on,o=r.fn.off,r.fn.on=l(t),r.fn.off=function(){for(var e,t=[],n=0,r=arguments.length;n<r;n++)e=arguments[n],i(e)&&e.tryWrap&&(e=e.tryWrap),t.push(e);return o.apply(this,t)}):window.jQuery&&(t=r.event.add,o=r.event.remove,r.event.add=l(t),r.event.remove=function(){for(var e,t=[],n=0,r=arguments.length;n<r;n++)e=arguments[n],i(e)&&e.tryWrap&&(e=e.tryWrap),t.push(e);return o.apply(this,t)});var s=r.ajax;return s&&(r.ajax=function(e,t){return t||(t=e,e=void 0),u(t),e?s.call(r,e,t):s.call(r,t)}),n},n.spyModules=function(){var t=e.require,o=e.define;return o&&o.amd&&t&&(e.require=a(t),r(e.require,t),e.define=a(o),r(e.define,o)),e.seajs&&o&&(e.define=function(){for(var e,t=[],n=0,r=arguments.length;n<r;n++)e=arguments[n],i(e)&&((e=s(e)).toString=function(e){return function(){return e.toString()}}(arguments[n])),t.push(e);return o.apply(this,t)},e.seajs.use=a(e.seajs.use),r(e.define,o)),n},n.spySystem=function(){return e.setTimeout=c(e.setTimeout),e.setInterval=c(e.setInterval),n},n.spyCustom=function(e){return i(e)?s(e):u(e)},n.spyAll=function(){return n.spyJquery().spyModules().spySystem(),n}}else console.error("please load bg-report first")}(this)},function(e,t,n){"use strict";var o,r="object"==typeof Reflect?Reflect:null,i=r&&"function"==typeof r.apply?r.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};o=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var c=10;function l(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function u(e,t,n,o){var r,i,s,a;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),s=i[t]),void 0===s)s=i[t]=n,++e._eventsCount;else if("function"==typeof s?s=i[t]=o?[n,s]:[s,n]:o?s.unshift(n):s.push(n),(r=l(e))>0&&s.length>r&&!s.warned){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=s.length,a=c,console&&console.warn&&console.warn(a)}return e}function d(e,t,n){var o={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},r=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,i(this.listener,this.target,e))}.bind(o);return r.listener=n,o.wrapFn=r,r}function p(e,t,n){var o=e._events;if(void 0===o)return[];var r=o[t];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(r):h(r,r.length)}function f(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function h(e,t){for(var n=new Array(t),o=0;o<t;++o)n[o]=e[o];return n}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return l(this)},a.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var o="error"===e,r=this._events;if(void 0!==r)o=o&&void 0===r.error;else if(!o)return!1;if(o){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var c=r[e];if(void 0===c)return!1;if("function"==typeof c)i(c,this,t);else{var l=c.length,u=h(c,l);for(n=0;n<l;++n)i(u[n],this,t)}return!0},a.prototype.addListener=function(e,t){return u(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return u(this,e,t,!0)},a.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,d(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,d(this,e,t)),this},a.prototype.removeListener=function(e,t){var n,o,r,i,s;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(o=this._events))return this;if(void 0===(n=o[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete o[e],o.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(r=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){s=n[i].listener,r=i;break}if(r<0)return this;0===r?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,r),1===n.length&&(o[e]=n[0]),void 0!==o.removeListener&&this.emit("removeListener",e,s||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,n,o;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var r,i=Object.keys(n);for(o=0;o<i.length;++o)"removeListener"!==(r=i[o])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(o=t.length-1;o>=0;o--)this.removeListener(e,t[o]);return this},a.prototype.listeners=function(e){return p(this,e,!0)},a.prototype.rawListeners=function(e){return p(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},a.prototype.listenerCount=f,a.prototype.eventNames=function(){return this._eventsCount>0?o(this._events):[]}},function(e,t,n){const o=n(3),r=n(2);n(0);var i=function(){var e=[],t=null;function n(e,n){window.parent.postMessage({command:e,data:n,protocol:t})}window.addEventListener("message",t=>{try{let n=t.data;if(!n.data)return;0,function(t){e.forEach(e=>{try{e(t)}catch(e){console.error(e),o.report(e)}})}(n),function(e){if("TRANSFER"===e.command&&e.data){const t=e.data.eventName;r.emit(t,e.data.data)}}(n)}catch(t){console.error("window.onmessage cb error",t),o.report(t)}});const i=t=>{e.push(t)};return{connect:function(e){t=e||t},send:n,registerCallback:i,pub:function(e,t={}){n("TRANSFER",{eventName:e,data:t,from:window.navigator.userAgent.indexOf("appservice")>-1?"appservice":"webview"})},sub:function(e,t){i(n=>{"TRANSFER"===n.command&&(n.data?n.data.eventName===e&&t(n.data):console.error("messager sub error: no data field."))})}}}();e.exports=i},function(e,t,n){const{compareVersion:o}=n(0),r=n(3);e.exports.getValidVersions=r.tryJs().spyCustom(function(e,t,n){if(!t)return[];const r=Object.keys(n),i=r.indexOf(t);if(-1===i)return[];{const t=n[r[i]];return Object.keys(t).filter(t=>o(t,e)<=0)}}),e.exports.doesNeedProperty=r.tryJs().spyCustom(function(e,t,n){let o=!1;for(let n=0;n<e.length;n++){if(t[e[n]].length){o=!0;break}}return o}),e.exports.getValidItemsWithSpecificVersions=r.tryJs().spyCustom(function(e,t,n){let o=void 0;for(let r=0;r<e.length;r++){let i=t[e[r]];for(let e=0;e<i.length;e++){let t=i[e];if("string"==typeof t&&t===n){void 0===o&&(o=[]);break}if("object"==typeof t&&t.hasOwnProperty(n)){o=void 0===o?t[n]:o.concat(t[n]);break}}}return o}),e.exports.getValidItem=r.tryJs().spyCustom(function(e,t){for(let n=0;n<e.length;n++){if("string"==typeof e[n]&&e[n]===t)return[];if("object"==typeof e[n]&&e[n].hasOwnProperty(t))return e[n][t]}})},function(e,t,n){const{compareVersion:o}=n(0),r=n(3);e.exports.getValidVersions=r.tryJs().spyCustom(function(e,t,n){if(!t)return[];const r=Object.keys(n),i=r.indexOf(t);if(-1===i)return[];{const t=n[r[i]];return Object.keys(t).filter(t=>o(t,e)>0)}}),e.exports.doesNeedProperty=r.tryJs().spyCustom(function(e,t,n){let o=!1;for(let n=0;n<e.length;n++){if(t[e[n]].length){o=!0;break}}return o}),e.exports.getValidItemsWithSpecificVersions=r.tryJs().spyCustom(function(e,t,n){let o=void 0;for(let r=0;r<e.length;r++){let i=t[e[r]];for(let e=0;e<i.length;e++){let t=i[e];if("string"==typeof t&&t===n){void 0===o&&(o=[]);break}if("object"==typeof t&&t.hasOwnProperty(n)){o=void 0===o?t[n]:o.concat(t[n]);break}}}return o}),e.exports.getValidItem=r.tryJs().spyCustom(function(e,t){for(let n=0;n<e.length;n++){if("string"==typeof e[n]&&e[n]===t)return[];if("object"==typeof e[n]&&e[n].hasOwnProperty(t))return e[n][t]}})},,,,,,,,,,,,,,function(e,t,n){const o=n(1),r=n(24);navigator.userAgent,window.__webviewId__;function i(){r.init()}o.connect("DEVTOOLS_EXPERIENCE"),"complete"===document.readyState?i():window.addEventListener("load",i)},function(e,t,n){const o=n(1),r=n(2),i=n(0),s=n(3),a=Array.prototype.slice,c={};let l=null,u=null;const d=Object.keys,p=["surroundThirdByTryCatch","slowReport","speedReport","reportKeyValue","reportIDKey"];function f(){o.pub("all-webview-image",{imgsInfo:c})}function h(e,t,n,o,r){let i=!1;if(c[e]){const n=c[e][0];t.width*t.height>n.width*n.height&&(c[e][0]={left:t.left,top:t.top,width:t.width,height:t.height},i=!0)}else c[e]=[{left:t.left,top:t.top,width:t.width,height:t.height},n,o,window.__route__,r],i=!0;i&&(clearTimeout(u),u=setTimeout(f,300))}Object.keys=function(e){const t=d(e);for(let e=0;e<p.length;e++){let n=p[e];if(-1===t.indexOf(n))return t}const n=Array.prototype.forEach;return Array.prototype.forEach=function(e){const t=Object.defineProperty;Object.defineProperty=function(e,n,o){o.configurable=!0,t(e,n,o)},n.call(this,e),Object.defineProperty=t,Array.prototype.forEach=n},Object.keys=d,d(e)},r.on("stop-audit",function(){i.status="stopped"});const m=s.tryJs().spyCustom(function(){const e=document.querySelectorAll("wx-image")||[],t=document.querySelectorAll("wx-cover-image")||[];a.call(e).concat(a.call(t)).forEach(e=>{const t=e.getAttribute("src"),n=e.tagName.toLowerCase(),o=e.getAttribute("mode")||"";if(!t||e.__resize_observer__)return;if("wx-image"===n&&e.firstElementChild){if(-1===e.firstElementChild.style.backgroundImage.indexOf(t))return}else if("wx-cover-image"===n){const n=e.querySelector("img");if(!n||-1===n.src.indexOf(t))return}let r=e.__resize_observer__=new ResizeObserver(e=>{const n=e[0],i=n.target;if(!document.body.contains(n.target))return r.unobserve(i),void(r=null);const s=n.contentRect;if(i.__wxElement&&i.__wxElement.loaded)h(t,s,i.__wxElement.width,i.__wxElement.height,o);else{const e=new Image;e.onload=function(){h(t,s,this.width,this.height,o)},e.src=t}});r.observe(e)})});i.onGenerateFuncReady(function(){}),document.addEventListener("pageReRender",function(){"running"===i.status&&(clearTimeout(l),l=setTimeout(function(){m()},100))}),e.exports.init=function(){n(25).init(),n(26).init(),n(27).init(),n(28).init(),n(29).init(),n(30).init(),n(32).init(),n(33).init(),n(34).init(),n(35).init(),n(36).init(),n(38).init(),o.pub("after-webview-task-init",{})}},function(e,t,n){const o=n(1),r=n(0),i=n(3);function s(){const e=[];let t=[];try{["ops_set","ops_cached"].forEach(e=>{for(let n in __WXML_GLOBAL__[e])"array"===r.getType(__WXML_GLOBAL__[e][n])&&(t=t.concat(__WXML_GLOBAL__[e][n]))})}catch(e){0,i.report(e)}!function e(t,n){for(let o=0,i=t.length;o<i;o++){let i=t[o];"string"==typeof i&&-1===n.indexOf(i)?/^[a-zA-Z\$_][a-zA-Z\d_]*$/.test(i)&&n.push(i):"array"===r.getType(i)&&e(i,n)}}(t,e),function(e){o.pub("set-data-no-binding",{vars:e})}(e)}r.onGenerateFuncReady(s),document.addEventListener("pageReRender",s),e.exports.init=function(){}},function(e,t,n){const o=n(1),r=n(0);let i=[];r.onGenerateFuncReady(function(){const e=exparser.Event.addListenerToElement;exparser.Event.addListenerToElement=function(t,n,o,s){e(t,n,o,s),"running"===r.status&&["tap","longpress","longtap"].indexOf(n)>-1&&t instanceof exparser.Component&&i.push(t)}}),document.addEventListener("pageReRender",function(){"running"===r.status&&(i.forEach(e=>{const t=e.$$.getBoundingClientRect(),n=getComputedStyle(e.$$),r=parseFloat(n.paddingLeft)+t.width+parseFloat(n.paddingRight),i=parseFloat(n.paddingTop)+t.height+parseFloat(n.paddingBottom);if(t.width>1&&r<20||t.height>1&&i<20){let t=e.is;e.$$.id&&(t+="#"+e.$$.id),e.$$.className&&(t+="."+e.$$.className.replace(" ",".")),function(e,t){o.pub("small-response-area",{identifier:e,rect:t,page:window.__route__})}(t,{width:r,height:i})}}),i=[])}),e.exports.init=function(){}},function(e,t,n){const o=n(1),r=n(0),i=500,s=Object.defineProperties;function a(){const e=Reporter.speedReport;s(Reporter,{speedReport:{value(t){if(e(t),"running"===r.status&&("firstRenderTime"===t.key||"reRenderTime"===t.key)){const e=t.timeMark.endTime-t.timeMark.startTime;if(e<i)return;!function(e,t){o.pub("render-long-time",{cost:e,type:t,page:window.__route__})}(e,t.key)}},configurable:!0}})}e.exports.init=function(){a()}},function(e,t,n){const o=n(1),r=n(2),i=n(0),s=n(3);let a=[],c=[],l=[],u=[],d=[],p=[],f=[],h=[],m=[],g=[],b=null;function y(e,t){if(!t)return;let n=e.substring(0,e.indexOf("{")).trim(),o=e,r=e.match(/wxcs_style_(\S*)/g);null!==r&&r.forEach((e,t)=>{let n=new RegExp(`${e.substring(11)}(.*?); ;`);o=o.replace(n,"")}),o=o.replace(/;wxcs_originclass(.*?)(?=})/g,"").replace(/wxcs_style_/g,"");let s=i.byteCount(o),a=u.indexOf(t);if(a>-1){let e=p[a].indexOf(n);e>-1?f[a][e]+=s:(p[a].push(n),f[a].push(s)),d[a]+=s}else{u.push(t),d.push(s),h.push(0);var c=[n],l=[s];p.push(c),f[f.length]=l}}function v(){!function(){let e=document.getElementsByTagName("style");for(let r=1;r<e.length;r++){let i=(e[r].getAttribute("wxss:path")||"").trim().substr(1);if(i&&"undefined"!==i){var t=0,n=0,o=e[r].innerText.replace(/\/\*(.*?)\*\//g,"");for(let e=0;e<o.length;e++)"{"===o[e]?n++:"}"===o[e]&&0==--n&&(y(o.substring(t,e+1),i),t=e+1)}}}();let e=Date.now(),t=document.styleSheets;for(let e=1;e<t.length;e++){let n=t[e];for(let e of n.cssRules){let t=e.selectorText;if(t){const e=t.replace(/\:(active|hover|visited|link)/g,"");let n=null;try{n=document.querySelector(e)}catch(o){n=document,s.reportCustomError(`querySelector invalid selector. original: ${t}, replaced: ${e}`)}n||n===document?a.push(t):c.push(t)}1!==e.type&&g.push(e)}}e=Date.now()-e,i.log("time consumed",e),i.log("unusedCss",c),i.log("otherCssType",g)}function w(e){if(3!=e.nodeType)for(let t of c){let n=c.indexOf(t);e.matches=e.matches||e.webkitMatchesSelector,e&&e.matches(t.replace(/\:(active|hover|visited|link)/g,""))&&(c.splice(n,1),l.splice(n,1),-1===a.indexOf(t)&&a.push(t))}}function _(e){if(w(e),0!==e.childNodes.length)for(let t of e.childNodes)1===t.nodeType&&_(t)}let x=null;function E(e){x&&x.disconnect&&x.disconnect(),function(){c=i.unique(c);for(let e of c)for(let t=0;t<p.length;t++){let n=p[t].indexOf(e);n>-1&&(h[t]+=f[t][n])}for(let e=0;e<u.length;e++){let t={file:u[e],original:d[e],savings:h[e]};m.push(t)}}(),o.pub("unused-css",{cssUsage:m,page:window.__route__,type:e}),o.pub("used-css",{page:window.__route__,data:i.unique(a).map(e=>{let t="";for(let n=0;n<p.length;n++){p[n].indexOf(e)>-1&&(t=u[n])}return{sel:e,file:t}})}),a=[],c=[],l=[],u=[],d=[],p=[],f=[],h=[],m=[],g=[]}r.on("stop-audit",function(){E("stop-audit")}),window.addEventListener("unload",function(e){E("unload")}),document.addEventListener("pageReRender",function e(){document.removeEventListener("pageReRender",e),clearTimeout(b),b=setTimeout(s.tryJs().spyCustom(v),1e3)}),i.onGenerateFuncReady(s.tryJs().spyCustom(function(){(x=new MutationObserver(function(e){const t=Date.now();e.forEach(function(e){if("attributes"===e.type)w(e.target);else if("childList"===e.type&&0!==e.addedNodes.length)for(let t of e.addedNodes)_(t)}),i.log("mutations cal time: ",Date.now()-t)})).observe(document,{attributes:!0,childList:!0,subtree:!0,attributeFilter:["class","id"]})})),e.exports.init=function(){}},function(e,t,n){const o=n(1),r=(n(0),n(2));let i=[];var s,a=null;var c,l,u=(c=function(){i=[],function e(t,n){let o=getComputedStyle(t);if("none"===o.display||"hidden"===o.visibility||"none"!==o.backgroundImage)return;let r=t.outerHTML.match(/<(.*?)>/)[0].replace(/exparser:info-component-id="(.*?)"/,"").replace(/wx-/,"").replace(/is="(.*?)"/g,"");(r=r.replace(/exparser:info-class-prefix="(.*?)"/g,"").replace(/exparser:info-attr-/g,"")).indexOf("body")>-1&&(r="<page>");let s=o.backgroundColor.match(/[^\(\)]+(?=\))/g)[0].split(",").map(Number),a={};4===s.length?(a.bgColor=function(e,t){let n=[];return n.push(e[0]*(1-t[3])+t[0]*t[3]),n.push(e[1]*(1-t[3])+t[1]*t[3]),n.push(e[2]*(1-t[3])+t[2]*t[3]),n}(n[n.length-1].bgColor,s),0!==s[3]?a.nodeInfo=r:a.nodeInfo=n[n.length-1].nodeInfo):(a.bgColor=s,a.nodeInfo=r),n.push(a);let c=o.color.match(/[^\(\)]+(?=\))/g)[0].split(",").map(Number);if(("WX-INPUT"===t.nodeName||"WX-TEXTAREA"===t.nodeName)&&""!==t.getAttribute("value")){let e={node:t.getAttribute("value")||"",parent:a.nodeInfo,fontSize:o.fontSize,fontWeight:o.fontWeight,color:c,backgroundColor:a.bgColor};i.push(e)}t.childNodes.forEach(r=>{if(3===r.nodeType){if(""!==t.innerText){let e={node:t.innerText,parent:a.nodeInfo,fontSize:o.fontSize,fontWeight:o.fontWeight,color:c,backgroundColor:a.bgColor};i.push(e)}}else e(r,n)}),n.pop()}(document.body,[{bgColor:[255,255,255],nodeInfo:"<page>"}]),o.pub("color-contrast",{textInfo:i,page:window.__route__})},l=2e3,function(){var e=this,t=arguments,n=+new Date;s&&n<s+l?(clearTimeout(a),a=setTimeout(function(){s=n,c.apply(e,t)},l)):(s=n,c.apply(e,t))});r.on("stop-audit",function(){document.removeEventListener("pageReRender",u),clearTimeout(a)}),document.addEventListener("pageReRender",u),e.exports.init=function(){}},function(e,t,n){const o=n(1),r=n(0),i=n(31),{getValidVersions:s,getValidItemsWithSpecificVersions:a,getValidItem:c,doesNeedProperty:l}=n(8),u=Object.keys(i),d=wx.version.version;let p=[],f=null;function h(e){-1===p.indexOf(e)&&p.push({api:e}),clearTimeout(f),f=setTimeout(function(){o.pub("deprecated-api",{deprecateds:p,page:window.__route__}),p=[]},500)}const m=(e,t,n,o)=>{const r=i[t];let u,d;if(0===(u=s(e,t,i)).length)return!1;const p=l(u,r);return!(p&&!n)&&(p?(!n||void 0!==(d=((e,t,n)=>a(e,t,n))(u,r,n)))&&(!(d.length&&!o)&&(0===d.length?`${t}.${n}`:(!o||void 0!==c(d,o))&&`${t}.${n}.${o}`)):t)};e.exports.init=function(){const e=exparser.Component._advancedCreate;exparser.Component._advancedCreate=function(t,n,o=null,i=null,s){const a=e(t,n,o,i,s),c=t.replace("wx-",""),l=m(d,c);if(l&&h(c),!l&&u.indexOf(c)>-1){const e=a.__dataProxy.scheduleReplace.bind(a.__dataProxy);a.__dataProxy.scheduleReplace=function(t,n,o){e(t,n,o);window.__route__,r.log("asyncCheck component"),setTimeout(()=>{const e=m(d,c,t[0],n);e&&h(e)})}}return a}}},function(e){e.exports=JSON.parse('{"audio":{"1.6.0":[]},"contact-button":{"2.1.0":[]},"modal":{"1.0.0":[]},"toast":{"1.0.0":[]},"mask":{"1.0.0":[]},"loading":{"1.0.0":[]},"action-sheet":{"1.0.0":[]},"action-sheet-item":{"1.0.0":[]},"action-sheet-cancel":{"1.0.0":[]},"map":{"1.0.0":["covers"],"1.4.0":["controls"],"1.2.0":["include-points"]},"video":{"2.4.0":["custom-cache"]}}')},function(e,t,n){const o=n(1);n(0);let r=null;document.addEventListener("pageReRender",function(){clearTimeout(r),r=setTimeout(function(){const e=function(){let e=0,t=0,n=0;return window.__DOMTree__&&function o(r){const i=[];e++;for(let e=0,o=r.length;e<o;e++){let o=r[e],s=o.__wxSlotChildren;o instanceof exparser.Element&&(o instanceof exparser.Component&&(t++,o.hasBehavior("wx-base")&&(s=o.childNodes)),i.push.apply(i,s),n=Math.max(n,s.length))}i.length&&o(i)}([window.__DOMTree__]),{depth:e,count:t,maxChildren:n}}();e.page=window.__route__,o.pub("dom-size",e)},500)}),e.exports.init=function(){}},function(e,t,n){const o=n(1),r=(n(0),{});document.addEventListener("pageReRender",function(){const e=[];document.querySelectorAll("style").forEach(t=>{const n=(t.getAttribute("wxss:path")||"").trim().substr(1);n&&"undefined"!==n&&!r[n]&&(r[n]=!0,e.push({content:t.innerText,path:n}))}),e.length&&o.pub("get-webview-styles",{data:e})}),e.exports.init=function(){}},function(e,t,n){const o=n(1),r=n(0);let i=!0,s=null;document.addEventListener("pageReRender",function(){"running"===r.status&&i&&(clearTimeout(s),s=setTimeout(function(){!function(){const e=document.querySelectorAll("[hover-class]");e&&e.length&&i&&(i=!1,o.pub("ele-active-state-applicable"))}()},100))}),e.exports.init=function(){}},function(e,t,n){const o=n(1),r=n(0),i=10,s=__wxConfig.preload||!!__wxConfig.onReady;let a=__WAWebviewStartTime__,c=Date.now(),l=0,u=[],d=[];function p(){if(!(Date.now()-c<1e3*i))return function(){if("running"!==r.status)return;let e=Math.max.apply(Math,u),t=u.indexOf(e);-1!==t?(r.log(`[first-meaningful-time] nodes:${u} max:${e} idx:${t}`),o.pub("first-meaningful-time",{time:d[t]-a,page:window.__route__})):o.pub("first-meaningful-time",{time:0,page:window.__route__})}();requestAnimationFrame(function(){requestAnimationFrame(p)});let e=0,t=[];document.body.querySelectorAll("*").forEach(n=>{let o=!1;for(let e=0;e<t.length;e++)if(o=t[e].contains(n))return;const r=window.getComputedStyle(n),i=n.getBoundingClientRect();"inline"===r.display||"none"!==r.display&&i.width>0&&i.height>0?e++:t.push(n)}),e-l&&(u.push(Math.round((e-l)/(document.body.scrollHeight/window.innerHeight))),d.push(Date.now())),l=e}r.onGenerateFuncReady(function(){a=s?Date.now():__WAWebviewStartTime__,c=Date.now(),requestAnimationFrame(p)}),e.exports.init=function(){}},function(e,t,n){const o=n(1),r=n(0),i=n(37),{getValidVersions:s,getValidItemsWithSpecificVersions:a,getValidItem:c,doesNeedProperty:l}=n(9);Object.keys(i);let u="1.0.0";function d(e,t,n){r.compareVersion(u,t)<0&&o.pub("recomended-version",{descriptor:e,version:t,page:n})}o.sub("min-public-lib-version",({data:e})=>{r.log(`min-public-lib-version ${e.minPublicLibVersion}`),u=e.minPublicLibVersion?e.minPublicLibVersion:"1.0.0"});e.exports.init=function(){const e=exparser.Component._advancedCreate;let t=function(...e){setTimeout(()=>{((e,t,n,o)=>{const s=i[t];if(!s)return;let a;if(n=n?n.replace(/[A-Z]/g,e=>"-"+e.toLowerCase()):n,0===(a=Object.keys(s)).length)return;const c=l(a,s);if(n&&c){if(n)for(let i=1,c=a.length;i<c;++i){let c=a[i];if(r.compareVersion(c,u)<0)continue;let l=s[c],p=!1;for(let r=0,i=l.length;r<i;++r){if("string"==typeof l[r]&&l[r]==n){p=!0,d([t,n].join("."),c,e);break}if("object"==typeof l[r]&&l[r].hasOwnProperty(n)&&o&&-1!=l[r][n].indexOf(o)){p=!0,d([t,n,o].join("."),c,e);break}}if(p)break}}else d(t,a[0],e)}).apply(this,e)})};exparser.Component._advancedCreate=function(n,o,r=null,i=null,s){const a=e(n,o,r,i,s),c=n.replace("wx-","");t(window.__route__,c);const l=a.__dataProxy.scheduleReplace.bind(a.__dataProxy);return a.__dataProxy.scheduleReplace=function(e,n,o){l(e,n,o),t(window.__route__,c,e[0],n)},a}}},function(e){e.exports=JSON.parse('{"ad":{"1.9.94":["unit-id"]},"audio":{"1.0.0":["id","src","loop","controls","poster","name","author","binderror","bindplay","bindpause","bindtimeupdate","bindended"]},"button":{"1.0.0":[{"size":["default","mini"]},{"type":["primary","default","warn"]},"plain","disabled","loading",{"form-type":["submit","reset"]},"hover-class","hover-start-time","hover-stay-time"],"1.1.0":[{"open-type":["contact"]}],"1.2.0":[{"open-type":["share","getPhoneNumber"]},"bindgetphonenumber"],"1.3.0":[{"open-type":["getUserInfo"]}],"1.9.5":[{"open-type":["launchApp"]},"app-parameter","binderror"],"2.0.7":[{"open-type":["openSetting"]},"bindopensetting"],"2.1.0":[{"open-type":["feedback"]}],"1.5.0":["hover-stop-propagation","send-message-title","send-message-path","send-message-img","show-message-card","bindcontact"],"1.4.0":["session-from"],"2.5.0":["aria-label"]},"camera":{"1.6.0":["device-position","flash","bindstop","binderror"],"2.1.0":["mode","scan-area","bindscancode"]},"canvas":{"1.0.0":["canvas-id","disable-scroll","bindtouchstart","bindtouchmove","bindtouchend","bindtouchcancel","bindlongtap","binderror"]},"checkbox-group":{"1.0.0":["bindchange"]},"checkbox":{"1.0.0":["value","disabled","checked","color"],"2.5.0":["aria-label"]},"contact-button":{"1.0.0":["size",{"type":["default-dark","default-light"]},"session-from"]},"cover-view":{"1.4.0":[],"2.1.0":["scroll-top"],"2.5.0":["aria-label","aria-role"]},"cover-image":{"1.4.0":["src"],"2.1.0":["bindload","binderror"],"2.5.0":["aria-label","aria-role"]},"form":{"1.0.0":["report-submit","bindsubmit","bindreset"],"1.2.0":["bindautofill"]},"icon":{"1.0.0":[{"type":["success","success_no_circle","info","warn","waiting","cancel","download","search","clear"]},"size","color"],"2.5.0":["aria-label"]},"image":{"1.0.0":["src",{"mode":["scaleToFill","aspectFit","aspectFill","widthFix","top","bottom","center","left","right","top left","top right","bottom left","bottom right"]},"binderror","bindload"],"1.5.0":["lazy-load"],"2.5.0":["aria-label"]},"input":{"1.0.0":["value",{"type":["text","number","idcard","digit"]},"password","placeholder","placeholder-style","placeholder-class","disabled","maxlength","cursor-spacing","auto-focus","focus","bindinput","bindfocus","bindblur","bindconfirm"],"1.1.0":[{"confirm-type":["send","search","next","go","done"]},"confirm-hold"],"1.5.0":["cursor"],"1.9.0":["selection-start","selection-end"],"1.9.90":["adjust-position"],"1.2.0":["auto-fill"],"2.5.0":["aria-label"]},"label":{"1.0.0":["for"]},"live-player":{"1.7.0":["src","mode","autoplay","muted","orientation","object-fit","background-mute","min-cache","max-cache","bindstatechange","bindfullscreenchange"],"1.9.0":["bindnetstatus"],"1.9.90":["sound-mode"],"2.5.0":["auto-pause-if-navigate","auto-pause-if-open-native"]},"live-pusher":{"1.7.0":["url","mode","autopush","muted","enable-camera","auto-focus","orientation","beauty","whiteness","aspect","min-bitrate","max-bitrate","waiting-image","waiting-image-hash","background-mute","bindstatechange"],"2.1.0":["zoom"],"2.3.0":["device-position"],"2.4.0":["bindbgmstart","bindbgmprogress","bindbgmcomplete"],"1.9.0":["bindnetstatus"],"1.7.4":["binderror"]},"map":{"1.0.0":["longitude","latitude","scale",{"markers":["id","latitude","longitude","title","iconPath","rotate","alpha","width","height"]},"covers",{"polyline":["points","color","width","dottedLine"]},{"circles":["latitude","longitude","color","fillColor","radius","strokeWidth"]},{"controls":["id","position","iconPath","clickable"]},"include-points","show-location","bindmarkertap","bindcontroltap","bindregionchange","bindtap"],"1.2.0":[{"markers":["callout","label","anchor"]},{"polyline":["arrowLine","borderColor","borderWidth"]},"bindcallouttap"],"1.6.0":[{"polyline":["arrowIconPath"]},"bindupdated"],"2.3.0":[{"markers":["zIndex"]},{"polygons":["points","strokeWidth","strokeColor","fillColor","zIndex","visible"]},"sub-key","enable-3D","show-compass","enable-overlooking","enable-zoom","enable-scroll","enable-rotate","bindpoitap"],"2.5.0":[{"markers":["aria-label","aria-role"]}]},"modal":{"1.0.0":[]},"movable-area":{"1.2.0":[],"1.9.90":["scale-area"]},"movable-view":{"1.2.0":["direction","inertia","out-of-bounds","x","y","damping","friction"],"1.9.90":["disabled","scale","scale-min","scale-max","scale-value","bindchange","bindscale"],"2.1.0":["animation"]},"navigator":{"1.0.0":["url",{"open-type":["navigate","redirect","switchTab"]},"delta","hover-class","hover-start-time","hover-stay-time"],"2.0.7":["target","app-id","path","extra-data","version"],"2.1.0":[{"open-type":["exit"]}],"1.1.0":[{"open-type":["reLaunch","navigateBack"]}],"1.5.0":["hover-stop-propagation"],"2.5.0":["aria-label"]},"open-data":{"1.4.0":[{"type":["groupName"]},"open-gid","lang"],"1.9.90":[{"type":["userNickName","userAvatarUrl","userGender","userCity","userProvince","userCountry","userLanguage"]}]},"picker-view":{"1.0.0":["value","indicator-style","bindchange"],"1.1.0":["indicator-class"],"1.5.0":["mask-style","mask-class"],"2.5.0":["aria-label"]},"picker-view-column":{"1.0.0":[]},"picker":{"1.0.0":["range","range-key","value","bindchange","disabled","bindcolumnchange","start","end",{"fields":["year","month","day"]},{"mode":["selector","date","time"]}],"1.9.90":["bindcancel"],"1.2.0":["auto-fill"],"1.4.0":["bindcolumnchange",{"mode":["multiSelector","region"]}],"1.5.0":["custom-item"]},"progress":{"1.0.0":["percent","show-info","stroke-width","color","activeColor","backgroundColor","active"],"1.7.0":["active-mode"],"2.4.1":["bindactiveend"],"2.5.0":["aria-label"]},"radio-group":{"1.0.0":["bindchange"]},"radio":{"1.0.0":["value","checked","disabled","color"],"2.5.0":["aria-label"]},"rich-text":{"1.4.0":[{"nodes":["name","attrs","children"]}],"2.4.1":["space"]},"scroll-view":{"1.0.0":["scroll-x","scroll-y","upper-threshold","lower-threshold","scroll-top","scroll-left","scroll-into-view","scroll-with-animation","enable-back-to-top","bindscrolltoupper","bindscrolltolower","bindscroll"],"2.5.0":["aria-label"]},"slider":{"1.0.0":["min","max","step","disabled","value","color","selected-color","activeColor","backgroundColor","show-value","bindchange"],"1.9.0":["block-size","block-color"],"1.7.0":["bindchanging"],"2.5.0":["aria-label"]},"swiper":{"1.0.0":["indicator-dots","autoplay","current","interval","duration","circular","vertical","bindchange"],"1.1.0":["indicator-color","indicator-active-color"],"1.9.0":["current-item-id","previous-margin","next-margin","display-multiple-items","skip-hidden-item-layout","bindanimationfinish"],"2.4.3":["bindtransition"]},"swiper-item":{"1.0.0":[],"1.9.0":["item-id"]},"switch":{"1.0.0":["checked",{"type":["switch","checkbox"]},"bindchange","color"],"2.5.0":["aria-label"]},"text":{"1.0.0":[],"1.1.0":["selectable"],"1.4.0":[{"space":["ensp","emsp","nbsp"]},"decode"]},"textarea":{"1.0.0":["value","placeholder","placeholder-style","placeholder-class","disabled","maxlength","auto-focus","focus","auto-height","fixed","cursor-spacing","bindfocus","bindblur","bindlinechange","bindinput","bindconfirm"],"1.5.0":["cursor"],"1.6.0":["show-confirm-bar"],"1.9.0":["selection-start","selection-end"],"1.9.90":["adjust-position"],"1.2.0":["auto-fill"],"2.5.0":["aria-label"]},"video":{"1.0.0":["src","controls","danmu-list","danmu-btn","enable-danmu","autoplay","objectFit","poster","bindplay","bindpause","bindended","bindtimeupdate"],"1.6.0":["initial-time","page-gesture"],"1.1.0":["duration"],"1.4.0":["loop","muted","bindfullscreenchange"],"1.7.0":["direction","bindwaiting","binderror"],"1.9.0":["show-progress","show-fullscreen-btn","show-play-btn","show-center-play-btn","enable-progress-gesture"],"2.4.0":["bindprogress","show-mute-btn","title","play-btn-position","enable-play-gesture"],"2.5.0":["auto-pause-if-navigate","auto-pause-if-open-native"]},"view":{"1.0.0":["hover-class","hover-start-time","hover-stay-time"],"1.5.0":["hover-stop-propagation"],"2.5.0":["aria-label","aria-role"]},"web-view":{"1.6.4":["src","bindmessage"]},"functional-page-navigator":{"2.1.0":["version",{"name":["loginAndGetUserInfo","requestPayment"]},"args","bindsuccess","bindfail"]},"official-account":{"2.3.0":[]}}')},function(e,t,n){const o=n(1),r=n(0),i=1;let s,a=[],c=!1,l=!1,u=new Promise(e=>s=e);function d(e){return e.__wxElement instanceof exparser.Component&&e.__wxElement.hasBehavior("wx-base")}function p(e,t){let n=document.elementFromPoint(e,t);for(;n&&!d(n);)n=n.parentNode;return n}function f(e){if(e.__wxElement)return/tap|touch/i.test(Object.keys(e.__wxElement.__wxEvents||{}).join(" "))}function h(e){for(let t=0;t<a.length;++t)try{if(e.matches(a[t]))return!0}catch(e){}return!1}let m=null;document.addEventListener("pageReRender",function(){clearTimeout(m),m=setTimeout(function(){let e=function(){const e=function(){let e=[30,window.innerWidth>>1,window.innerWidth-30],t=window.innerHeight-i;for(let n=0,o=e.length;n<o;++n){let o,i=!0,s=p(e[n],t),a=!1;for(;s&&"body"!=s.tagName.toLowerCase();){f(s)&&(o=s),(/safe\-area\-inset/.test(s.style.cssText)||h(s))&&(a=!0);let e=getComputedStyle(s);if(e&&"fixed"===e.position){r.log("checkUnsafeArea fixed target",s),o&&!a&&(i=!1);break}s=s.parentNode}if(!i)return{component:o.tagName.toLowerCase().replace(/^wx-/,""),id:o.id,className:o.className,componentId:o.__wxElement.__componentInstanceId}}return null}();e&&(e.page=window.__route__,o.pub("iphonex-compatibility",e))};c?e():function(){if(l)return u;l=!0;let e=[];for(let t=0,n=document.styleSheets.length;t<n;++t){let n=document.styleSheets[t];/\.wxss$/.test(n.ownerNode.getAttribute("wxss:path"))&&e.push(n.ownerNode.innerText)}let t=""+Math.random(),n=Date.now();return o.pub("cal-iphonex-compatibility-wxss",{key:t,wxssText:e.join("\n")}),o.sub("finished-wxss-cal",function(e){let{key:o,selectorList:r}=e.data;o==t&&(wxConsole.log(`preprocessWxss time used: ${Date.now()-n}ms`),a=r,c=!0,s())}),u}().then(e)},500)}),e.exports.init=function(){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,