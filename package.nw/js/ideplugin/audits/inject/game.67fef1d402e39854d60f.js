!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=39)}({0:function(e,t,n){e.exports.$=function(e,t){return"string"==typeof t&&(t=document.querySelector(t)),(t||document).querySelector(e)},e.exports.$$=function(e){return document.querySelectorAll(e)},e.exports.show=function(e){"string"==typeof e&&(e=document.querySelector(e)),e.style.display=""},e.exports.hide=function(e){"string"==typeof e&&(e=document.querySelector(e)),e.style.display="none"},e.exports.sprintf=function(e,t){for(let n=0;n<t.length;n++)e=e.replace(/%s/,t[n]);return e},e.exports.reportBehavior=function(e){this.log("reportBehavior",e),pluginMessager.invoke("REPORT",JSON.stringify(e))},e.exports.log=function(){0},e.exports.formatSize=function(e){const t=["B","K","M","G"];let n;for(;(n=t.shift())&&e>1024;)e/=1024;return("B"===n?e:e.toFixed(2))+n},e.exports.hash=function(e){let t=5381,n=e.length;for(;n;)t=33*t^e.charCodeAt(--n);return t>>>0},e.exports.byteCount=function(e){return encodeURI(e).split(/%..|./).length-1},e.exports.unique=function(e){const t=[];for(let n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t},e.exports.getType=function(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()},e.exports.compareVersion=function(e,t){e=e.split("."),t=t.split(".");const n=Math.max(e.length,t.length);for(;e.length<n;)e.push("0");for(;t.length<n;)t.push("0");for(let r=0;r<n;r++){const n=parseInt(e[r]),o=parseInt(t[r]);if(n>o)return 1;if(n<o)return-1}return 0},e.exports.isRequestNotForAudit=function(e){const t=[/^data\:/,/^https:\/\/servicewechat.com\/wxa-qbase\/qbasecheckresult/,/^https?:\/\/[^\/]*\.tcb\.qcloud\.la\//,/^https?:\/\/wxsnsdythumb\.wxs\.qq\.com\//,/^https?:\/\/mmbiz\.qpic\.cn\//,/^https?:\/\/wx\.qlogo\.cn\//,/^https?:\/\/[^\/]*\.qq\.com\//,/^https?:\/\/[^\/]*\.gtimg\.com\//,/^https?:\/\/[^\/]*\.myapp\.com\//,/^http:\/\/127.0.0.1:/,/^chrome-extension:\/\//,/^https?:\/\/servicewechat\.com\//,/\/audits\/assert\//,/\/wxacrawler\//,/^https?:\/\/[^\/]*\.weixinbridge\.com\//];for(let n=0;n<t.length;n++)if(e.match(t[n]))return!0;return!1};const r=function(e){return e.filter(e=>!/^(__dev__|__asdebug__|__pageframe__|appservice\?)|audits\/assert\/inject|WAService.js|WAWebview.js|wxacrawler\/public/.test(e.file))};e.exports.parseStackStrings=function(e,t=!0){let n=e.split("\n"),o=/at\s+([\S]+)\s+\((\S+)\)/,i=n.map(e=>{let t=e.match(o);if(t&&t[1]&&t[2]){let e=t[2].replace(/^\s*/,"").replace(/http:\/\/127\.0\.0\.1:\d+\/(:?(:?appservice|wxacrawler\/\d+\/program\/\w+)?\/)?/,""),[n,r,o]=e.split(":");if(3==e.split(":").length)return{func:t[1].replace(/^Audit_(setTimeout|setInterval)_?.*$/,"$1"),file:n,line:+r,column:+o}}return null}).filter(e=>!!e);return t&&(i=r(i)),i},e.exports.getCallStack=function(e=!0){let n=t.parseStackStrings((new Error).stack);return e&&(n=r(n)),n},e.exports.onGenerateFuncReady=function(e){window.__generateFunc__?setTimeout(e):document.addEventListener("generateFuncReady",e)},e.exports.status="running"},1:function(e,t,n){navigator.userAgent.match(/port\/(\d*)/)&&window&&window.top==window?e.exports=n(4):e.exports=n(7)},10:function(e,t,n){const r=n(1),o=n(0);function i(e){"running"===o.status&&r.pub("js-exception",{msg:e,page:window.__appServiceEngine__&&__appServiceEngine__.getCurrentRoute()})}e.exports.init=function(){Reporter.registerErrorListener(i)}},2:function(e,t,n){const r=new(0,n(6).EventEmitter);r.setMaxListeners(100),e.exports=r},3:function(e,t,n){const r=n(5);r.init({id:187,url:"https://badjs.weixinbridge.com/badjs",globalError:!!window.isAuditsTabEnv,extend:{version:"0.0.48"}}),r.reportCustomError=function(e){try{throw new Error(`[custom] ${e}`)}catch(e){r.report(e)}},e.exports=r},39:function(e,t,n){const r=n(1),o=n(40);function i(){o.init()}r.connect("GAMESERVICE_EXPERIENCE"),"complete"===document.readyState?i():window.addEventListener("load",i)},4:function(e,t,n){const r=n(3),o=n(2);n(0);var i=function(){const e=window.navigator||window.__global.navigator,t=window.WebSocket||window.__global.WebSocket;var n=e.userAgent.match(/port\/(\d*)/),i=n?parseInt(n[1]):9974,s=null,a=`ws://127.0.0.1:${i}`,c=null,u=[],f=[];const l="GET_MESSAGE_TOKEN";function p(e){s&&s.readyState===t.OPEN?s.send(JSON.stringify(e)):f.push(e)}const d=e=>{u.push(e)};return{connect:function e(n){c=n||c;var i=window.prompt?prompt(l):__global.prompt(l);(s=new t(a,`${c}#${i}#`)).onopen=function(e){let t=[].concat(f);f=[],t.forEach(e=>{p(e)})},s.onclose=function(t){s=null,setTimeout(()=>{e(n)},100)},s.onmessage=function(e){try{let t=JSON.parse(e.data);(function(e){u.forEach(t=>{try{t(e)}catch(e){console.error(e),r.report(e)}})})(t),function(e){if("TRANSFER"===e.command&&e.data){window.navigator.userAgent;const t=e.data.eventName;o.emit(t,e.data.data)}}(t)}catch(e){console.error("ws.onmessage cb error",e),r.report(e)}}},send:p,registerCallback:d,getWs:()=>s,pub:function(e,t={}){p({command:"TRANSFER",data:{eventName:e,data:t,from:window.navigator.userAgent.indexOf("appservice")>-1?"appservice":"webview"}})},sub:function(e,t){d(n=>{"TRANSFER"===n.command&&(n.data?n.data.eventName===e&&t(n.data):console.error("messager sub error: no data field."))})}}}();e.exports=i},40:function(e,t,n){var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};const o=n(1),i=n(3),s=(n(0),n(2),Object.defineProperties);function a(e){o.pub("wx-socket-fail",{url:e})}function c(e){o.pub("file-too-large",r({},e))}window.__passWAGameGlobal__=function(e){for(let t in e)"Protect"!==t&&(window[t]=e[t]);u(),f(),l(),p(),function(){const e=+new Date,t=__appServiceSDK__.wx.getFileSystemManager();function n(e,r){const o=t.readdirSync(e);o.forEach(function(o){const i=t.statSync(e+"/"+o);if(i.isDirectory())n(e+"/"+o,r);else{const t={size:i.size,name:o,path:e+"/"+o};r.push(t)}})}const r=function(e){var t=[];return n(e,t),t}(`${__appServiceSDK__.wx.env.USER_DATA_PATH}`);let o=0;r.forEach(e=>{o+=e.size}),t.getSavedFileList({success:t=>{t.fileList.forEach(e=>{o+=e.size}),c({currentSize:o,limitSize:52428800,costtime:+new Date-e})}}),c({currentSize:o,limitSize:52428800,costtime:+new Date-e})}(),d(),window.requestAnimationFrame(v)};const u=i.tryJs().spyCustom(function(){const e=__appServiceSDK__.wx.downloadFile;s(__appServiceSDK__.wx,{downloadFile:{value(t){var n;n=t.url,o.pub("wx-downloadfile-start",{url:n});const r=t.fail;return t.fail=function(e){"function"==typeof r&&r(e),function(e){o.pub("wx-downloadfile-fail",{url:e})}(t.url)},e(t)},configurable:!0}})}),f=i.tryJs().spyCustom(function(){const e=__appServiceSDK__.wx.connectSocket,t=__appServiceSDK__.wx.sendSocketMessage;s(__appServiceSDK__.wx,{connectSocket:{value(t){const n=t.fail;return t.fail=function(e){"function"==typeof n&&n(e),a(t)},e(t)},configurable:!0},sendSocketMessage:{value(e){const n=e.fail;return e.fail=function(t){"function"==typeof n&&n(t),a(e)},t(e)},configurable:!0}})});function l(){__appServiceSDK__.wx.getStorageInfo({success(e){var t;t=e,o.pub("storage-too-large",r({},t))}})}const p=i.tryJs().spyCustom(function(){const e=__appServiceSDK__.wx.setStorage,t=__appServiceSDK__.wx.setStorageSync;s(__appServiceSDK__.wx,{setStorage:{value(t){l(),e(t)},configurable:!0},setStorageSync:{value(e){l(),t(e)},configurable:!0}})}),d=i.tryJs().spyCustom(function(){const e=__appServiceSDK__.wx.createCanvas;s(__appServiceSDK__.wx,{createCanvas:{value(t){const n=e(),r=n.getContext;return n.getContext=function(...e){let t=r.apply(n,e);if("2d"==e){const e=t.rect,n=t.fillRect,r=t.strokeRect,i=t.clearRect,a=t.fill,c=t.stroke,u=t.clip,f=t.arc,l=t.drawImage,p=t.strokeText,d=t.fillText;s(t,{rect:{get:()=>(o.pub("canvas-drawcall"),e),configurable:!0},fillRect:{get:()=>(o.pub("canvas-drawcall"),n),configurable:!0},strokeRect:{get:()=>(o.pub("canvas-drawcall"),r),configurable:!0},clearRect:{get:()=>(o.pub("canvas-drawcall"),i),configurable:!0},fill:{get:()=>(o.pub("canvas-drawcall"),a),configurable:!0},stroke:{get:()=>(o.pub("canvas-drawcall"),c),configurable:!0},clip:{get:()=>(o.pub("canvas-drawcall"),u),configurable:!0},arc:{get:()=>(o.pub("canvas-drawcall"),f),configurable:!0},drawImage:{get:()=>(o.pub("canvas-drawcall"),l),configurable:!0},strokeText:{get:()=>(o.pub("canvas-drawcall"),p),configurable:!0},fillText:{get:()=>(o.pub("canvas-drawcall"),d),configurable:!0}})}else if("webgl"==e){const e=t.drawElements,n=t.drawArrays;t.drawElements=function(...n){let r=e.apply(t,n);return o.pub("canvas-drawcall"),o.pub("canvas-trianglesFaces",n[1]),r},t.drawArrays=function(...e){let r=n.apply(t,e);return o.pub("canvas-drawcall"),o.pub("canvas-trianglesFaces",e[1]),r}}return t},n},configurable:!0}})});function v(){o.pub("canvas-requestanimationframe"),window.requestAnimationFrame(v)}e.exports.init=function(){n(10).init()}},5:function(e,t,n){const r=n(2);let o="",i="";r.on("appservice-onload",function(e){o=e.appId,i=e.libVersion});
/*!
 * @module report
 * @author kael, chriscai
 * @date @DATE
 * Copyright (c) 2014 kael, chriscai
 * Licensed under the MIT license.
 */
var s=function(e){if(e.BJ_REPORT)return e.BJ_REPORT;var t=[],n={},r={id:0,uin:0,url:"",combo:1,ext:null,level:4,ignore:[],random:1,delay:1e3,submit:null,repeat:5,globalError:!0},s=function(e,t){return Object.prototype.toString.call(e)==="[object "+(t||"Object")+"]"},a=function(e){return"object"===typeof e&&!!e},c=function(e){var t=e.stack.replace(/\n/gi,"").split(/\bat\b/).slice(0,9).join("@").replace(/\?[^:]+/gi,""),n=e.toString();return t.indexOf(n)<0&&(t=n+"@"+t),t},u=function(e,t){var n,o=[],i=[],c=[];if(a(e))for(var u in e.level=e.level||r.level,e){var f=e[u];if(null!==(n=f)&&(s(n,"Number")||n)){if(a(f))try{f=JSON.stringify(f)}catch(e){f="[BJ_REPORT detect value stringify error] "+e.toString()}c.push(u+":"+f),o.push(u+"="+encodeURIComponent(f)),i.push(u+"["+t+"]="+encodeURIComponent(f))}}return[i.join("&"),c.join(","),o.join("&")]},f=function(e){var t;r.submit?r.submit(e):("undefined"!=typeof Image?t=new Image:"undefined"!=typeof document&&document.createElement&&(t=document.createElement("img")),t&&(t.src=e))},l=function(e){if(!a(e))return!0;var t=e.msg;return(n[t]=(parseInt(n[t],10)||0)+1)>r.repeat},p=[],d=0,v=function(e){if(r.report){for(;t.length;){var n=!1,o=t.shift();if(!l(o)){var i=u(o,p.length);if(s(r.ignore,"Array"))for(var a=0,c=r.ignore.length;a<c;a++){var v=r.ignore[a];if(s(v,"RegExp")&&v.test(i[1])||s(v,"Function")&&v(o,i[1])){n=!0;break}}n||(r.combo?p.push(i[0]):f(r.report+i[2]+"&_t="+ +new Date),r.onReport&&r.onReport(r.id,o))}}if(p.length){var g=function(){clearTimeout(d),f(r.report+p.join("&")+"&count="+p.length+"&_t="+ +new Date),d=0,p=[]};e?g():d||(d=setTimeout(g,r.delay))}}},g=e.BJ_REPORT={push:function(e){if(Math.random()>=r.random)return g;var n=a(e)?function(e){try{if(e.stack){var t=e.stack.match("https?://[^\n]+"),n=(t=t?t[0]:"").match(":(\\d+):(\\d+)");return n||(n=[0,0,0]),{msg:c(e),rowNum:n[1],colNum:n[2],target:t.replace(n[0],"")}}return e.name&&e.message&&e.description?{msg:JSON.stringify(e)}:e}catch(t){return e}}(e):{msg:e};return r.ext&&!n.ext&&(n.ext=r.ext),n.from=JSON.stringify({version:r.extend&&r.extend.version,appId:"undefined"!=typeof __wxConfig&&__wxConfig.accountInfo&&__wxConfig.accountInfo.appId||o,libVersion:"undefined"!=typeof __appServiceSDK__?__appServiceSDK__.wx&&__appServiceSDK__.wx.version&&__appServiceSDK__.wx.version.version:"undefined"!=typeof wx?wx.version&&wx.version.version:i}),t.push(n),v(),g},report:function(e){return e&&g.push(e),v(!0),g},info:function(e){return e?(a(e)?e.level=2:e={msg:e,level:2},g.push(e),g):g},debug:function(e){return e?(a(e)?e.level=1:e={msg:e,level:1},g.push(e),g):g},init:function(e){if(a(e))for(var n in e)r[n]=e[n];var o,i=parseInt(r.id,10);return i&&(/qq\.com$/gi.test(location.hostname)&&(r.url||(r.url="//badjs2.qq.com/badjs"),r.uin||(r.uin=parseInt((document.cookie.match(/\buin=\D+(\d+)/)||[])[1],10))),r.report=(r.url||"/badjs")+"?id="+i+"&uin="+r.uin+"&"),t.length&&v(),r.globalError&&(o=window.onerror,window.onerror=function(e,t,n,r,i){var a=e;i&&i.stack&&(a=c(i)),s(a,"Event")&&(a+=a.type?"--"+a.type+"--"+(a.target?a.target.tagName+"::"+a.target.src:""):""),g.push({msg:a,target:t,rowNum:n,colNum:r}),v(),o&&o.apply(window,arguments)}),g},__onerror__:e.onerror};return"undefined"!=typeof console&&console.error&&setTimeout(function(){var e=((location.hash||"").match(/([#&])BJ_ERROR=([^&$]+)/)||[])[2];e&&console.error("BJ_ERROR",decodeURIComponent(e).replace(/(:\d+:\d+)\s*/g,"$1\n"))},0),g}(this);e.exports=s,function(e){if(e.BJ_REPORT){var t=function(t){e.BJ_REPORT.push(t)},n={};e.BJ_REPORT.tryJs=function(e){return e&&(t=e),n};var r,o=function(e,t){for(var n in t)e[n]=t[n]},i=function(e){return"function"==typeof e},s=function(n,o){return function(){try{return n.apply(this,o||arguments)}catch(n){if(t(n),n.stack&&console&&console.error&&console.error("[BJ-REPORT]",n.stack),!r){var i=e.onerror;e.onerror=function(){},r=setTimeout(function(){e.onerror=i,r=null},50)}throw n}}},a=function(e){return function(){for(var t,n=[],r=0,o=arguments.length;r<o;r++)t=arguments[r],i(t)&&(t=s(t)),n.push(t);return e.apply(this,n)}},c=function(e){return function(t,n){if("string"==typeof t)try{t=new Function(t)}catch(e){throw e}var r=[].slice.call(arguments,2);return t=s(t,r.length&&r),e(t,n)}},u=function(e,t){return function(){for(var n,r,o=[],a=0,c=arguments.length;a<c;a++)n=arguments[a],i(n)&&(r=s(n))&&(n.tryWrap=r)&&(n=r),o.push(n);return e.apply(t||this,o)}},f=function(e){var t,n;for(t in e)n=e[t],i(n)&&(e[t]=s(n));return e};n.spyJquery=function(){var t,r,o=e.$;if(!o||!o.event)return n;o.zepto?(t=o.fn.on,r=o.fn.off,o.fn.on=u(t),o.fn.off=function(){for(var e,t=[],n=0,o=arguments.length;n<o;n++)e=arguments[n],i(e)&&e.tryWrap&&(e=e.tryWrap),t.push(e);return r.apply(this,t)}):window.jQuery&&(t=o.event.add,r=o.event.remove,o.event.add=u(t),o.event.remove=function(){for(var e,t=[],n=0,o=arguments.length;n<o;n++)e=arguments[n],i(e)&&e.tryWrap&&(e=e.tryWrap),t.push(e);return r.apply(this,t)});var s=o.ajax;return s&&(o.ajax=function(e,t){return t||(t=e,e=void 0),f(t),e?s.call(o,e,t):s.call(o,t)}),n},n.spyModules=function(){var t=e.require,r=e.define;return r&&r.amd&&t&&(e.require=a(t),o(e.require,t),e.define=a(r),o(e.define,r)),e.seajs&&r&&(e.define=function(){for(var e,t=[],n=0,o=arguments.length;n<o;n++)e=arguments[n],i(e)&&((e=s(e)).toString=function(e){return function(){return e.toString()}}(arguments[n])),t.push(e);return r.apply(this,t)},e.seajs.use=a(e.seajs.use),o(e.define,r)),n},n.spySystem=function(){return e.setTimeout=c(e.setTimeout),e.setInterval=c(e.setInterval),n},n.spyCustom=function(e){return i(e)?s(e):f(e)},n.spyAll=function(){return n.spyJquery().spyModules().spySystem(),n}}else console.error("please load bg-report first")}(this)},6:function(e,t,n){"use strict";var r,o="object"==typeof Reflect?Reflect:null,i=o&&"function"==typeof o.apply?o.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};r=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var c=10;function u(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function f(e,t,n,r){var o,i,s,a;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),s=i[t]),void 0===s)s=i[t]=n,++e._eventsCount;else if("function"==typeof s?s=i[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(o=u(e))>0&&s.length>o&&!s.warned){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=s.length,a=c,console&&console.warn&&console.warn(a)}return e}function l(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,i(this.listener,this.target,e))}.bind(r);return o.listener=n,r.wrapFn=o,o}function p(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):v(o,o.length)}function d(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function v(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return u(this)},a.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,o=this._events;if(void 0!==o)r=r&&void 0===o.error;else if(!r)return!1;if(r){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var c=o[e];if(void 0===c)return!1;if("function"==typeof c)i(c,this,t);else{var u=c.length,f=v(c,u);for(n=0;n<u;++n)i(f[n],this,t)}return!0},a.prototype.addListener=function(e,t){return f(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return f(this,e,t,!0)},a.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,l(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,l(this,e,t)),this},a.prototype.removeListener=function(e,t){var n,r,o,i,s;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){s=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,s||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},a.prototype.listeners=function(e){return p(this,e,!0)},a.prototype.rawListeners=function(e){return p(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):d.call(e,t)},a.prototype.listenerCount=d,a.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},7:function(e,t,n){const r=n(3),o=n(2);n(0);var i=function(){var e=[],t=null;function n(e,n){window.parent.postMessage({command:e,data:n,protocol:t})}window.addEventListener("message",t=>{try{let n=t.data;if(!n.data)return;0,function(t){e.forEach(e=>{try{e(t)}catch(e){console.error(e),r.report(e)}})}(n),function(e){if("TRANSFER"===e.command&&e.data){const t=e.data.eventName;o.emit(t,e.data.data)}}(n)}catch(t){console.error("window.onmessage cb error",t),r.report(t)}});const i=t=>{e.push(t)};return{connect:function(e){t=e||t},send:n,registerCallback:i,pub:function(e,t={}){n("TRANSFER",{eventName:e,data:t,from:window.navigator.userAgent.indexOf("appservice")>-1?"appservice":"webview"})},sub:function(e,t){i(n=>{"TRANSFER"===n.command&&(n.data?n.data.eventName===e&&t(n.data):console.error("messager sub error: no data field."))})}}}();e.exports=i}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,