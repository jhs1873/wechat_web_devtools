!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=11)}([function(e,t,o){e.exports.$=function(e,t){return"string"==typeof t&&(t=document.querySelector(t)),(t||document).querySelector(e)},e.exports.$$=function(e){return document.querySelectorAll(e)},e.exports.show=function(e){"string"==typeof e&&(e=document.querySelector(e)),e.style.display=""},e.exports.hide=function(e){"string"==typeof e&&(e=document.querySelector(e)),e.style.display="none"},e.exports.sprintf=function(e,t){for(let o=0;o<t.length;o++)e=e.replace(/%s/,t[o]);return e},e.exports.reportBehavior=function(e){this.log("reportBehavior",e),pluginMessager.invoke("REPORT",JSON.stringify(e))},e.exports.log=function(){0},e.exports.formatSize=function(e){const t=["B","K","M","G"];let o;for(;(o=t.shift())&&e>1024;)e/=1024;return("B"===o?e:e.toFixed(2))+o},e.exports.hash=function(e){let t=5381,o=e.length;for(;o;)t=33*t^e.charCodeAt(--o);return t>>>0},e.exports.byteCount=function(e){return encodeURI(e).split(/%..|./).length-1},e.exports.unique=function(e){const t=[];for(let o=0;o<e.length;o++)-1===t.indexOf(e[o])&&t.push(e[o]);return t},e.exports.getType=function(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()},e.exports.compareVersion=function(e,t){e=e.split("."),t=t.split(".");const o=Math.max(e.length,t.length);for(;e.length<o;)e.push("0");for(;t.length<o;)t.push("0");for(let n=0;n<o;n++){const o=parseInt(e[n]),r=parseInt(t[n]);if(o>r)return 1;if(o<r)return-1}return 0},e.exports.isRequestNotForAudit=function(e){const t=[/^data\:/,/^https:\/\/servicewechat.com\/wxa-qbase\/qbasecheckresult/,/^https?:\/\/[^\/]*\.tcb\.qcloud\.la\//,/^https?:\/\/wxsnsdythumb\.wxs\.qq\.com\//,/^https?:\/\/mmbiz\.qpic\.cn\//,/^https?:\/\/wx\.qlogo\.cn\//,/^https?:\/\/[^\/]*\.qq\.com\//,/^https?:\/\/[^\/]*\.gtimg\.com\//,/^https?:\/\/[^\/]*\.myapp\.com\//,/^http:\/\/127.0.0.1:/,/^chrome-extension:\/\//,/^https?:\/\/servicewechat\.com\//,/\/audits\/assert\//,/\/wxacrawler\//,/^https?:\/\/[^\/]*\.weixinbridge\.com\//];for(let o=0;o<t.length;o++)if(e.match(t[o]))return!0;return!1};const n=function(e){return e.filter(e=>!/^(__dev__|__asdebug__|__pageframe__|appservice\?)|audits\/assert\/inject|WAService.js|WAWebview.js|wxacrawler\/public/.test(e.file))};e.exports.parseStackStrings=function(e,t=!0){let o=e.split("\n"),r=/at\s+([\S]+)\s+\((\S+)\)/,s=o.map(e=>{let t=e.match(r);if(t&&t[1]&&t[2]){let e=t[2].replace(/^\s*/,"").replace(/http:\/\/127\.0\.0\.1:\d+\/(:?(:?appservice|wxacrawler\/\d+\/program\/\w+)?\/)?/,""),[o,n,r]=e.split(":");if(3==e.split(":").length)return{func:t[1].replace(/^Audit_(setTimeout|setInterval)_?.*$/,"$1"),file:o,line:+n,column:+r}}return null}).filter(e=>!!e);return t&&(s=n(s)),s},e.exports.getCallStack=function(e=!0){let o=t.parseStackStrings((new Error).stack);return e&&(o=n(o)),o},e.exports.onGenerateFuncReady=function(e){window.__generateFunc__?setTimeout(e):document.addEventListener("generateFuncReady",e)},e.exports.status="running"},function(e,t,o){navigator.userAgent.match(/port\/(\d*)/)&&window&&window.top==window?e.exports=o(4):e.exports=o(7)},function(e,t,o){const n=new(0,o(6).EventEmitter);n.setMaxListeners(100),e.exports=n},function(e,t,o){const n=o(5);n.init({id:187,url:"https://badjs.weixinbridge.com/badjs",globalError:!!window.isAuditsTabEnv,extend:{version:"0.0.48"}}),n.reportCustomError=function(e){try{throw new Error(`[custom] ${e}`)}catch(e){n.report(e)}},e.exports=n},function(e,t,o){const n=o(3),r=o(2);o(0);var s=function(){const e=window.navigator||window.__global.navigator,t=window.WebSocket||window.__global.WebSocket;var o=e.userAgent.match(/port\/(\d*)/),s=o?parseInt(o[1]):9974,i=null,a=`ws://127.0.0.1:${s}`,c=null,u=[],l=[];const p="GET_MESSAGE_TOKEN";function d(e){i&&i.readyState===t.OPEN?i.send(JSON.stringify(e)):l.push(e)}const f=e=>{u.push(e)};return{connect:function e(o){c=o||c;var s=window.prompt?prompt(p):__global.prompt(p);(i=new t(a,`${c}#${s}#`)).onopen=function(e){let t=[].concat(l);l=[],t.forEach(e=>{d(e)})},i.onclose=function(t){i=null,setTimeout(()=>{e(o)},100)},i.onmessage=function(e){try{let t=JSON.parse(e.data);(function(e){u.forEach(t=>{try{t(e)}catch(e){console.error(e),n.report(e)}})})(t),function(e){if("TRANSFER"===e.command&&e.data){window.navigator.userAgent;const t=e.data.eventName;r.emit(t,e.data.data)}}(t)}catch(e){console.error("ws.onmessage cb error",e),n.report(e)}}},send:d,registerCallback:f,getWs:()=>i,pub:function(e,t={}){d({command:"TRANSFER",data:{eventName:e,data:t,from:window.navigator.userAgent.indexOf("appservice")>-1?"appservice":"webview"}})},sub:function(e,t){f(o=>{"TRANSFER"===o.command&&(o.data?o.data.eventName===e&&t(o.data):console.error("messager sub error: no data field."))})}}}();e.exports=s},function(e,t,o){const n=o(2);let r="",s="";n.on("appservice-onload",function(e){r=e.appId,s=e.libVersion});
/*!
 * @module report
 * @author kael, chriscai
 * @date @DATE
 * Copyright (c) 2014 kael, chriscai
 * Licensed under the MIT license.
 */
var i=function(e){if(e.BJ_REPORT)return e.BJ_REPORT;var t=[],o={},n={id:0,uin:0,url:"",combo:1,ext:null,level:4,ignore:[],random:1,delay:1e3,submit:null,repeat:5,globalError:!0},i=function(e,t){return Object.prototype.toString.call(e)==="[object "+(t||"Object")+"]"},a=function(e){return"object"===typeof e&&!!e},c=function(e){var t=e.stack.replace(/\n/gi,"").split(/\bat\b/).slice(0,9).join("@").replace(/\?[^:]+/gi,""),o=e.toString();return t.indexOf(o)<0&&(t=o+"@"+t),t},u=function(e,t){var o,r=[],s=[],c=[];if(a(e))for(var u in e.level=e.level||n.level,e){var l=e[u];if(null!==(o=l)&&(i(o,"Number")||o)){if(a(l))try{l=JSON.stringify(l)}catch(e){l="[BJ_REPORT detect value stringify error] "+e.toString()}c.push(u+":"+l),r.push(u+"="+encodeURIComponent(l)),s.push(u+"["+t+"]="+encodeURIComponent(l))}}return[s.join("&"),c.join(","),r.join("&")]},l=function(e){var t;n.submit?n.submit(e):("undefined"!=typeof Image?t=new Image:"undefined"!=typeof document&&document.createElement&&(t=document.createElement("img")),t&&(t.src=e))},p=function(e){if(!a(e))return!0;var t=e.msg;return(o[t]=(parseInt(o[t],10)||0)+1)>n.repeat},d=[],f=0,g=function(e){if(n.report){for(;t.length;){var o=!1,r=t.shift();if(!p(r)){var s=u(r,d.length);if(i(n.ignore,"Array"))for(var a=0,c=n.ignore.length;a<c;a++){var g=n.ignore[a];if(i(g,"RegExp")&&g.test(s[1])||i(g,"Function")&&g(r,s[1])){o=!0;break}}o||(n.combo?d.push(s[0]):l(n.report+s[2]+"&_t="+ +new Date),n.onReport&&n.onReport(n.id,r))}}if(d.length){var h=function(){clearTimeout(f),l(n.report+d.join("&")+"&count="+d.length+"&_t="+ +new Date),f=0,d=[]};e?h():f||(f=setTimeout(h,n.delay))}}},h=e.BJ_REPORT={push:function(e){if(Math.random()>=n.random)return h;var o=a(e)?function(e){try{if(e.stack){var t=e.stack.match("https?://[^\n]+"),o=(t=t?t[0]:"").match(":(\\d+):(\\d+)");return o||(o=[0,0,0]),{msg:c(e),rowNum:o[1],colNum:o[2],target:t.replace(o[0],"")}}return e.name&&e.message&&e.description?{msg:JSON.stringify(e)}:e}catch(t){return e}}(e):{msg:e};return n.ext&&!o.ext&&(o.ext=n.ext),o.from=JSON.stringify({version:n.extend&&n.extend.version,appId:"undefined"!=typeof __wxConfig&&__wxConfig.accountInfo&&__wxConfig.accountInfo.appId||r,libVersion:"undefined"!=typeof __appServiceSDK__?__appServiceSDK__.wx&&__appServiceSDK__.wx.version&&__appServiceSDK__.wx.version.version:"undefined"!=typeof wx?wx.version&&wx.version.version:s}),t.push(o),g(),h},report:function(e){return e&&h.push(e),g(!0),h},info:function(e){return e?(a(e)?e.level=2:e={msg:e,level:2},h.push(e),h):h},debug:function(e){return e?(a(e)?e.level=1:e={msg:e,level:1},h.push(e),h):h},init:function(e){if(a(e))for(var o in e)n[o]=e[o];var r,s=parseInt(n.id,10);return s&&(/qq\.com$/gi.test(location.hostname)&&(n.url||(n.url="//badjs2.qq.com/badjs"),n.uin||(n.uin=parseInt((document.cookie.match(/\buin=\D+(\d+)/)||[])[1],10))),n.report=(n.url||"/badjs")+"?id="+s+"&uin="+n.uin+"&"),t.length&&g(),n.globalError&&(r=window.onerror,window.onerror=function(e,t,o,n,s){var a=e;s&&s.stack&&(a=c(s)),i(a,"Event")&&(a+=a.type?"--"+a.type+"--"+(a.target?a.target.tagName+"::"+a.target.src:""):""),h.push({msg:a,target:t,rowNum:o,colNum:n}),g(),r&&r.apply(window,arguments)}),h},__onerror__:e.onerror};return"undefined"!=typeof console&&console.error&&setTimeout(function(){var e=((location.hash||"").match(/([#&])BJ_ERROR=([^&$]+)/)||[])[2];e&&console.error("BJ_ERROR",decodeURIComponent(e).replace(/(:\d+:\d+)\s*/g,"$1\n"))},0),h}(this);e.exports=i,function(e){if(e.BJ_REPORT){var t=function(t){e.BJ_REPORT.push(t)},o={};e.BJ_REPORT.tryJs=function(e){return e&&(t=e),o};var n,r=function(e,t){for(var o in t)e[o]=t[o]},s=function(e){return"function"==typeof e},i=function(o,r){return function(){try{return o.apply(this,r||arguments)}catch(o){if(t(o),o.stack&&console&&console.error&&console.error("[BJ-REPORT]",o.stack),!n){var s=e.onerror;e.onerror=function(){},n=setTimeout(function(){e.onerror=s,n=null},50)}throw o}}},a=function(e){return function(){for(var t,o=[],n=0,r=arguments.length;n<r;n++)t=arguments[n],s(t)&&(t=i(t)),o.push(t);return e.apply(this,o)}},c=function(e){return function(t,o){if("string"==typeof t)try{t=new Function(t)}catch(e){throw e}var n=[].slice.call(arguments,2);return t=i(t,n.length&&n),e(t,o)}},u=function(e,t){return function(){for(var o,n,r=[],a=0,c=arguments.length;a<c;a++)o=arguments[a],s(o)&&(n=i(o))&&(o.tryWrap=n)&&(o=n),r.push(o);return e.apply(t||this,r)}},l=function(e){var t,o;for(t in e)o=e[t],s(o)&&(e[t]=i(o));return e};o.spyJquery=function(){var t,n,r=e.$;if(!r||!r.event)return o;r.zepto?(t=r.fn.on,n=r.fn.off,r.fn.on=u(t),r.fn.off=function(){for(var e,t=[],o=0,r=arguments.length;o<r;o++)e=arguments[o],s(e)&&e.tryWrap&&(e=e.tryWrap),t.push(e);return n.apply(this,t)}):window.jQuery&&(t=r.event.add,n=r.event.remove,r.event.add=u(t),r.event.remove=function(){for(var e,t=[],o=0,r=arguments.length;o<r;o++)e=arguments[o],s(e)&&e.tryWrap&&(e=e.tryWrap),t.push(e);return n.apply(this,t)});var i=r.ajax;return i&&(r.ajax=function(e,t){return t||(t=e,e=void 0),l(t),e?i.call(r,e,t):i.call(r,t)}),o},o.spyModules=function(){var t=e.require,n=e.define;return n&&n.amd&&t&&(e.require=a(t),r(e.require,t),e.define=a(n),r(e.define,n)),e.seajs&&n&&(e.define=function(){for(var e,t=[],o=0,r=arguments.length;o<r;o++)e=arguments[o],s(e)&&((e=i(e)).toString=function(e){return function(){return e.toString()}}(arguments[o])),t.push(e);return n.apply(this,t)},e.seajs.use=a(e.seajs.use),r(e.define,n)),o},o.spySystem=function(){return e.setTimeout=c(e.setTimeout),e.setInterval=c(e.setInterval),o},o.spyCustom=function(e){return s(e)?i(e):l(e)},o.spyAll=function(){return o.spyJquery().spyModules().spySystem(),o}}else console.error("please load bg-report first")}(this)},function(e,t,o){"use strict";var n,r="object"==typeof Reflect?Reflect:null,s=r&&"function"==typeof r.apply?r.apply:function(e,t,o){return Function.prototype.apply.call(e,t,o)};n=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var c=10;function u(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function l(e,t,o,n){var r,s,i,a;if("function"!=typeof o)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof o);if(void 0===(s=e._events)?(s=e._events=Object.create(null),e._eventsCount=0):(void 0!==s.newListener&&(e.emit("newListener",t,o.listener?o.listener:o),s=e._events),i=s[t]),void 0===i)i=s[t]=o,++e._eventsCount;else if("function"==typeof i?i=s[t]=n?[o,i]:[i,o]:n?i.unshift(o):i.push(o),(r=u(e))>0&&i.length>r&&!i.warned){i.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+i.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=i.length,a=c,console&&console.warn&&console.warn(a)}return e}function p(e,t,o){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:o},r=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,s(this.listener,this.target,e))}.bind(n);return r.listener=o,n.wrapFn=r,r}function d(e,t,o){var n=e._events;if(void 0===n)return[];var r=n[t];return void 0===r?[]:"function"==typeof r?o?[r.listener||r]:[r]:o?function(e){for(var t=new Array(e.length),o=0;o<t.length;++o)t[o]=e[o].listener||e[o];return t}(r):g(r,r.length)}function f(e){var t=this._events;if(void 0!==t){var o=t[e];if("function"==typeof o)return 1;if(void 0!==o)return o.length}return 0}function g(e,t){for(var o=new Array(t),n=0;n<t;++n)o[n]=e[n];return o}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return u(this)},a.prototype.emit=function(e){for(var t=[],o=1;o<arguments.length;o++)t.push(arguments[o]);var n="error"===e,r=this._events;if(void 0!==r)n=n&&void 0===r.error;else if(!n)return!1;if(n){var i;if(t.length>0&&(i=t[0]),i instanceof Error)throw i;var a=new Error("Unhandled error."+(i?" ("+i.message+")":""));throw a.context=i,a}var c=r[e];if(void 0===c)return!1;if("function"==typeof c)s(c,this,t);else{var u=c.length,l=g(c,u);for(o=0;o<u;++o)s(l[o],this,t)}return!0},a.prototype.addListener=function(e,t){return l(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return l(this,e,t,!0)},a.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,p(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,p(this,e,t)),this},a.prototype.removeListener=function(e,t){var o,n,r,s,i;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(n=this._events))return this;if(void 0===(o=n[e]))return this;if(o===t||o.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,o.listener||t));else if("function"!=typeof o){for(r=-1,s=o.length-1;s>=0;s--)if(o[s]===t||o[s].listener===t){i=o[s].listener,r=s;break}if(r<0)return this;0===r?o.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(o,r),1===o.length&&(n[e]=o[0]),void 0!==n.removeListener&&this.emit("removeListener",e,i||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,o,n;if(void 0===(o=this._events))return this;if(void 0===o.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==o[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete o[e]),this;if(0===arguments.length){var r,s=Object.keys(o);for(n=0;n<s.length;++n)"removeListener"!==(r=s[n])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=o[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},a.prototype.listeners=function(e){return d(this,e,!0)},a.prototype.rawListeners=function(e){return d(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},a.prototype.listenerCount=f,a.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(e,t,o){const n=o(3),r=o(2);o(0);var s=function(){var e=[],t=null;function o(e,o){window.parent.postMessage({command:e,data:o,protocol:t})}window.addEventListener("message",t=>{try{let o=t.data;if(!o.data)return;0,function(t){e.forEach(e=>{try{e(t)}catch(e){console.error(e),n.report(e)}})}(o),function(e){if("TRANSFER"===e.command&&e.data){const t=e.data.eventName;r.emit(t,e.data.data)}}(o)}catch(t){console.error("window.onmessage cb error",t),n.report(t)}});const s=t=>{e.push(t)};return{connect:function(e){t=e||t},send:o,registerCallback:s,pub:function(e,t={}){o("TRANSFER",{eventName:e,data:t,from:window.navigator.userAgent.indexOf("appservice")>-1?"appservice":"webview"})},sub:function(e,t){s(o=>{"TRANSFER"===o.command&&(o.data?o.data.eventName===e&&t(o.data):console.error("messager sub error: no data field."))})}}}();e.exports=s},function(e,t,o){const{compareVersion:n}=o(0),r=o(3);e.exports.getValidVersions=r.tryJs().spyCustom(function(e,t,o){if(!t)return[];const r=Object.keys(o),s=r.indexOf(t);if(-1===s)return[];{const t=o[r[s]];return Object.keys(t).filter(t=>n(t,e)<=0)}}),e.exports.doesNeedProperty=r.tryJs().spyCustom(function(e,t,o){let n=!1;for(let o=0;o<e.length;o++){if(t[e[o]].length){n=!0;break}}return n}),e.exports.getValidItemsWithSpecificVersions=r.tryJs().spyCustom(function(e,t,o){let n=void 0;for(let r=0;r<e.length;r++){let s=t[e[r]];for(let e=0;e<s.length;e++){let t=s[e];if("string"==typeof t&&t===o){void 0===n&&(n=[]);break}if("object"==typeof t&&t.hasOwnProperty(o)){n=void 0===n?t[o]:n.concat(t[o]);break}}}return n}),e.exports.getValidItem=r.tryJs().spyCustom(function(e,t){for(let o=0;o<e.length;o++){if("string"==typeof e[o]&&e[o]===t)return[];if("object"==typeof e[o]&&e[o].hasOwnProperty(t))return e[o][t]}})},function(e,t,o){const{compareVersion:n}=o(0),r=o(3);e.exports.getValidVersions=r.tryJs().spyCustom(function(e,t,o){if(!t)return[];const r=Object.keys(o),s=r.indexOf(t);if(-1===s)return[];{const t=o[r[s]];return Object.keys(t).filter(t=>n(t,e)>0)}}),e.exports.doesNeedProperty=r.tryJs().spyCustom(function(e,t,o){let n=!1;for(let o=0;o<e.length;o++){if(t[e[o]].length){n=!0;break}}return n}),e.exports.getValidItemsWithSpecificVersions=r.tryJs().spyCustom(function(e,t,o){let n=void 0;for(let r=0;r<e.length;r++){let s=t[e[r]];for(let e=0;e<s.length;e++){let t=s[e];if("string"==typeof t&&t===o){void 0===n&&(n=[]);break}if("object"==typeof t&&t.hasOwnProperty(o)){n=void 0===n?t[o]:n.concat(t[o]);break}}}return n}),e.exports.getValidItem=r.tryJs().spyCustom(function(e,t){for(let o=0;o<e.length;o++){if("string"==typeof e[o]&&e[o]===t)return[];if("object"==typeof e[o]&&e[o].hasOwnProperty(t))return e[o][t]}})},function(e,t,o){const n=o(1),r=o(0);function s(e){"running"===r.status&&n.pub("js-exception",{msg:e,page:window.__appServiceEngine__&&__appServiceEngine__.getCurrentRoute()})}e.exports.init=function(){Reporter.registerErrorListener(s)}},function(e,t,o){const n=o(1),r=o(12);o(0);function s(){r.init()}n.connect("APPSERVICE_EXPERIENCE"),"complete"===document.readyState?s():window.addEventListener("load",s)},function(e,t,o){const n=o(1),r=o(2),s=o(0),i=o(3),a=o(13),c=o(14),u=o(16),l=setInterval,p=setTimeout,d=Object.defineProperties,f=Object.keys,g=["surroundThirdByTryCatch","slowReport","speedReport","reportKeyValue","reportIDKey"],h=[];let m=null,v=!1;Object.keys=function(e){const t=f(e);for(let e=0;e<g.length;e++){let o=g[e];if(-1===t.indexOf(o))return t}const o=Array.prototype.forEach;return Array.prototype.forEach=function(e){const t=Object.defineProperty;Object.defineProperty=function(e,o,n){n.configurable=!0,t(e,o,n)},o.call(this,e),Object.defineProperty=t,Array.prototype.forEach=o},Object.keys=f,f(e)},window.__passWAServiceGlobal__=function(e){for(let t in e)"Protect"!==t&&(window[t]=e[t]);S(),_(),a.hook(),c.hook(),u.hook(),m=__wxConfig,__wxConfig.plugins},r.on("stop-audit",function(){s.status="stopped"}),r.on("console",function(e){console.warn(e.msg)});const b=i.tryJs().spyCustom(function(){const e={};Object.keys(exparser.Component._list).forEach(function(t){!t||"wx://functional-page"===t||/^plugin:\/\//.test(t)||/^plugin-private:\/\//.test(t)||/(^|\/)miniprogram_npm\//g.test(t)||(e[t]=exparser.Component._list[t])}),Object.keys(e).forEach(t=>{if(!t)return;const o=e[t],n=o.initiator;o.initiator=function(){const e=this,t=e.setData;n.call(e),e.__customConstructor__===__virtualDOM__.Page||e.__set_data_rewrited__||(d(this,{setData:{value(o,n){if(t.call(e,o,n),"running"!==s.status)return;p(()=>{r.emit("set-data",o,this.is,i)});const i=s.getCallStack()},configurable:!0}}),e.__set_data_rewrited__=!0)}})}),y=i.tryJs().spyCustom(function(){getCurrentPages().forEach(e=>{if(!e||e.__set_data_rewrited__)return;const t=e.setData;d(e,{setData:{value(o,n){if(t.call(e,o,n),"running"!==s.status)return;p(function(){r.emit("set-data",o,"Page",i)});const i=s.getCallStack()},configurable:!0}}),e.__set_data_rewrited__=!0})}),S=i.tryJs().spyCustom(function(){const e=__appServiceSDK__.wx.request;d(__appServiceSDK__.wx,{request:{value(t){const o=t.success;var r;(t.success=function(e){var r,i;("function"==typeof o&&o(e),"running"===s.status)&&(200===e.statusCode&&e.data&&(r=t.url,i=s.hash(JSON.stringify(e.data)),n.pub("wx-request-body",{url:r,body:i,page:__appServiceEngine__.getCurrentRoute()})))},e(t),"running"===s.status)&&(r=t.url,n.pub("wx-request",{url:r,page:__appServiceEngine__.getCurrentRoute()}))},configurable:!0}})}),_=i.tryJs().spyCustom(function(){const e=window.require;window.require=function(t){return h.push(t),v&&n.pub("add-js-module",{mod:t}),e(t)}});e.exports.init=function(){if("undefined"==typeof __appServiceSDK__)return console.error("基础库切换到 2.2.0+ ，才能使用 Audits 功能"),void n.pub("not-supported-wxalib");n.pub("appservice-onload",{appId:m&&m.accountInfo.appId,libVersion:__appServiceSDK__.wx&&__appServiceSDK__.wx.version&&__appServiceSDK__.wx.version.version,isCrawler:"undefined"!=typeof __devtoolsConfig&&__devtoolsConfig.online,allModules:h,wxConfig:m}),__appServiceSDK__.onAppRoute(function(e){"running"===s.status&&(y(),n.pub("app-route",e))}),y(),b(),o(10).init(),o(18).init(),o(19).init(p),o(20).init(),o(21).init(p,l),o(22).init(),v=!0}},function(e,t,o){const n=o(1),r=o(0),s=o(3);e.exports.hook=s.tryJs().spyCustom(function(){const e=Reporter.slowReport;Object.defineProperties(Reporter,{slowReport:{value(t){var o,s;e(t),"running"===r.status&&"pageInvoke"===t.key&&(o=t.cost,s=t.extend,n.pub("execute-long-time",{cost:o,extend:s,page:__appServiceEngine__.getCurrentRoute()}))},configurable:!0}})})},function(e,t,o){const n=o(1),r=o(0),s=o(15),i=o(3),{getValidVersions:a,getValidItemsWithSpecificVersions:c,doesNeedProperty:u}=o(8),l=Object.defineProperties,p=Object.keys(s);let d=[],f=null;function g(e,t){t&&t.length&&-1===d.indexOf(e)&&d.push({api:e,stack:t});const o=__appServiceEngine__.getCurrentRoute();clearTimeout(f),f=setTimeout(function(){n.pub("deprecated-api",{deprecateds:d,page:o}),d=[]},500)}const h=(e,t,o,n,i)=>{const p=s[t];let d,f;if(0===(d=a(e,t,s)).length)return;if(!u(d,p))return void g(t,i);const h=((e,t,o)=>c(e,t,o))(d,p,"$method")||[];f=[],h.forEach(e=>{const o=n[e];f[e]={value(...s){let i=r.getCallStack();o.apply(n,s),g(`${t}.${e}`,i)},configurable:!0}}),l(n,f)};e.exports.hook=i.tryJs().spyCustom(function(){const e={},t=__appServiceSDK__.wx;p.forEach(o=>{const n=t[o];e[o]={value(...e){let s=r.getCallStack();const i=n.apply(t,e),a=t.version&&t.version.version;return a&&h(a,o,0,i,s),i},configurable:!0}}),l(t,e)})},function(e){e.exports=JSON.parse('{"stopVoice":{"1.6.0":[]},"pauseVoice":{"1.6.0":[]},"playVoice":{"1.6.0":[]},"createAudioContext":{"1.6.0":[]},"stopRecord":{"1.6.0":[]},"startRecord":{"1.6.0":[]},"onBackgroundAudioStop":{"1.2.0":[]},"onBackgroundAudioPause":{"1.2.0":[]},"onBackgroundAudioPlay":{"1.2.0":[]},"stopBackgroundAudio":{"1.2.0":[]},"seekBackgroundAudio":{"1.2.0":[]},"pauseBackgroundAudio":{"1.2.0":[]},"playBackgroundAudio":{"1.2.0":[]},"getBackgroundAudioPlayerState":{"1.2.0":[]},"setTopBarText":{"1.9.9":[]},"createContext":{"1.0.0":[]},"drawCanvas":{"1.0.0":[]},"createCanvasContext":{"1.0.0":[{"$method":["getActions"]}],"1.9.90":[{"$method":["setFontSize","setMiterLimit","setLineDash","setLineCap","setLineJoin","setLineWidth","setGlobalAlpha","setShadow","setStrokeStyle","setFillStyle"]}]}}')},function(e,t,o){const n=o(1),r=o(0),s=o(17),i=o(3),{compareVersion:a}=o(0),{getValidVersions:c,getValidItemsWithSpecificVersions:u,doesNeedProperty:l}=o(9),p=Object.defineProperties,d=Object.keys(s);let f="1.0.0";function g(e,t,o){const r=__appServiceEngine__.getCurrentRoute();a(f,t)<0&&o&&o.length>0&&n.pub("recomended-version",{descriptor:e,stack:o,version:t,page:r})}n.sub("min-public-lib-version",({data:e})=>{r.log(`min-public-lib-version ${e.minPublicLibVersion}`),r.log(e),f=e.minPublicLibVersion?e.minPublicLibVersion:"1.0.0"});const h=(e,t)=>{var o=[];for(let n=0,r=e.length;n<r;++n)if("string"==typeof e[n]&&t.indexOf(e[n])>-1){let t=e[n];o.push(t)}return o},m=(e,t,o,n)=>{if("object"!=typeof o)return;let s=Object.assign({},o),i={};t.forEach(t=>{i[t]={get(){let o=r.getCallStack();return r.log(`hookApiReturn in return obj ${e} ${t}`),g([e,"return",t].join("."),n,o),s[t]},configurable:!0}}),Object.defineProperties(o,i)},v=(e,t)=>(function(o,...n){let i=Object.assign({},o),c={},u=s[e];Object.keys(u).sort(a).forEach(t=>{if(a(f,t)>0)return;let o=u[t];for(let n=0,s=o.length;n<s;++n)if("object"==typeof o[n]&&o[n].success){o[n].success.forEach(o=>{c[o]={get(){let n=r.getCallStack();return g([e,"success",o].join("."),t,n),r.log("hookSuccessRes",t,o),i[o]},configurable:!0}});break}}),Object.defineProperties(o,c),n.unshift(o),t.apply(this,n)});e.exports.hook=i.tryJs().spyCustom(function(){const e={},t=__appServiceSDK__.wx;d.forEach(o=>{const n=t[o];e[o]={value(...e){e[0]&&e[0].success&&"function"==typeof e[0].success&&(e[0].success=v(o,e[0].success));const i=n.apply(t,e),c=r.getCallStack(),u=t.version&&t.version.version;return u&&((e,t,o,n,i)=>{const c=s[t];let u=Object.keys(c).sort(a),l="object"==typeof o[0]?Object.keys(o[0]):[];u.length&&g(t,u[0],i);let p=1;for(;p<u.length;){if(a(f,u[p])>0){p++;continue}let e=u[p],o=c[e];for(let s=0,a=o.length;s<a;++s)if("object"==typeof o[s])if(o[s].object&&l.length){let n=o[s].object,r=h(n,l);if(r.length){r.forEach(o=>{g([t,"object",o].join("."),e,i)});break}}else o[s].return&&n&&Object.keys(n).length&&m(t,o[s].return,n,e);else if("string"==typeof o[s]){let i=Object.assign({},n),a=o[s],c={};c[a]={get(){let o=r.getCallStack();return r.log(`hookApiReturn in verionList ${t} ${a}`),g([t,a].join("."),e,o),i[a]},configurable:!0},Object.defineProperties(n,c)}p++}})(0,o,e,i,c),i},configurable:!0}}),p(t,e)})},function(e){e.exports=JSON.parse('{"canIUse":{"1.1.1":[]},"onAccelerometerChange":{"1.0.0":[{"callback":["x","y","z"]}]},"startAccelerometer":{"1.1.0":[],"2.1.0":[{"object":["interval"]}]},"stopAccelerometer":{"1.1.0":[]},"chooseAddress":{"1.1.0":[{"success":["userName","postalCode","provinceName","cityName","countyName","detailInfo","nationalCode","telNumber"]}]},"reportAnalytics":{"1.0.0":[]},"createAnimation":{"1.0.0":[{"object":["duration",{"timingFunction":["linear","ease","ease-in","ease-in-out","ease-out","step-start","step-end"]},"delay","transformOrigin"]}]},"createAudioContext":{"1.0.0":[]},"createCameraContext":{"1.6.0":[]},"createLivePlayerContext":{"1.7.0":["play","stop","mute","requestFullScreen","exitFullScreen","null"],"1.9.90":["pause","resume"]},"createLivePusherContext":{"1.7.0":["start","stop","pause","resume","switchCamera","null"],"1.9.90":["snapshot"],"2.1.0":["toggleTorch"],"2.4.0":["pauseBGM","playBGM","resumeBGM","setBGMVolume","stopBGM"]},"login":{"1.0.0":[{"success":["code"]}],"1.9.90":[{"object":["timeout"]}]},"createMapContext":{"1.0.0":[]},"requestPayment":{"1.0.0":[{"object":["timeStamp","nonceStr","package","signType","paySign"]}]},"showToast":{"1.0.0":[{"object":["title","icon","duration","mask"]}],"1.1.0":[{"object":["image"]}]},"showLoading":{"1.1.0":[{"object":["title","mask"]}]},"hideToast":{"1.0.0":[]},"hideLoading":{"1.1.0":[]},"showModal":{"1.0.0":[{"object":["title","content","showCancel","cancelText","cancelColor","confirmText","confirmColor"]},{"success":["confirm"]}],"1.1.0":[{"success":["cancel"]}]},"showActionSheet":{"1.0.0":[{"object":["itemList","itemColor"]},{"success":["tapIndex"]}]},"arrayBufferToBase64":{"1.1.0":[]},"base64ToArrayBuffer":{"1.1.0":[]},"createVideoContext":{"1.0.0":[],"1.4.0":[{"return":["playbackRate","requestFullScreen","exitFullScreen"]}],"2.1.0":[{"return":["showStatusBar","hideStatusBar"]}]},"authorize":{"1.2.0":[{"object":["scope"]}]},"openBluetoothAdapter":{"1.1.0":[]},"closeBluetoothAdapter":{"1.1.0":[]},"getBluetoothAdapterState":{"1.1.0":[{"success":["discovering","available"]}]},"onBluetoothAdapterStateChange":{"1.1.0":[{"callback":["available","discovering"]}]},"startBluetoothDevicesDiscovery":{"1.1.0":[{"object":["services","allowDuplicatesKey","interval"]}]},"stopBluetoothDevicesDiscovery":{"1.1.0":[]},"getBluetoothDevices":{"1.1.0":[{"success":["devices"]}]},"onBluetoothDeviceFound":{"1.1.0":[{"callback":["devices"]}]},"getConnectedBluetoothDevices":{"1.1.0":[{"object":["services"]},{"success":["devices"]}]},"createBLEConnection":{"1.1.0":[{"object":["deviceId","timeout"]}]},"closeBLEConnection":{"1.1.0":[{"object":["deviceId"]}]},"onBLEConnectionStateChange":{"1.1.1":[{"callback":["deviceId","connected"]}]},"getBLEDeviceServices":{"1.1.0":[{"object":["deviceId"]},{"success":["services"]}]},"getBLEDeviceCharacteristics":{"1.1.0":[{"object":["deviceId","serviceId"]},{"success":["characteristics"]}]},"readBLECharacteristicValue":{"1.1.0":[{"object":["deviceId","serviceId","characteristicId"]},{"success":["errCode"]}]},"writeBLECharacteristicValue":{"1.1.0":[{"object":["deviceId","serviceId","characteristicId","value"]}]},"notifyBLECharacteristicValueChange":{"1.1.1":[{"object":["deviceId","serviceId","characteristicId","state"]}]},"onBLECharacteristicValueChange":{"1.1.0":[{"callback":["deviceId","serviceId","characteristicId","value"]}]},"addCard":{"1.1.0":[{"object":["cardList"]},{"success":["cardList"]}]},"openCard":{"1.1.0":[{"object":["cardList"]}]},"checkIsSoterEnrolledInDevice":{"1.6.0":[{"object":["checkAuthMode"]},{"success":["isEnrolled"]}]},"checkIsSupportSoterAuthentication":{"1.5.0":[{"success":[{"supportMode":["fingerPrint","facial","speech"]}]}]},"chooseInvoiceTitle":{"1.5.0":[{"success":["type","title","taxNumber","companyAddress","telephone","bankName","bankAccount"]}]},"setClipboardData":{"1.1.0":[{"object":["data"]}]},"getClipboardData":{"1.1.0":[{"success":["data"]}]},"onCompassChange":{"1.0.0":[{"callback":["direction"]}],"2.4.0":[{"callback":["accuracy"]}]},"startCompass":{"1.1.0":[]},"stopCompass":{"1.1.0":[]},"createInnerAudioContext":{"1.6.0":[]},"createWorker":{"1.9.90":["postMessage","onMessage","terminate","null"]},"setStorage":{"1.0.0":[{"object":["key","data"]}]},"setStorageSync":{"1.0.0":[]},"getStorage":{"1.0.0":[{"object":["key"]},{"success":["data"]}]},"getStorageSync":{"1.0.0":[]},"getStorageInfo":{"1.0.0":[{"success":["keys","currentSize","limitSize"]}]},"getBackgroundFetchData":{"1.0.0":[{"success":["fetchedData","timeStamp"]}]},"removeStorage":{"1.0.0":[{"object":["key"]}]},"removeStorageSync":{"1.0.0":[]},"clearStorage":{"1.0.0":[]},"clearStorageSync":{"1.0.0":[]},"getOpenDeviceId":{"1.5.0":[{"success":["encryptedData","iv"]}]},"getNetworkType":{"1.0.0":[{"success":["networkType"]}]},"onNetworkStatusChange":{"1.1.0":[{"callback":["isConnected",{"networkType":["wifi","2g","3g","4g","none","unknown"]}]}]},"setScreenBrightness":{"1.2.0":[{"object":["value"]}]},"getScreenBrightness":{"1.2.0":[{"success":["value"]}]},"vibrateLong":{"1.2.0":[]},"vibrateShort":{"1.2.0":[]},"getExtConfig":{"1.1.0":[{"success":["extConfig"]}]},"getExtConfigSync":{"1.1.0":[]},"saveFile":{"1.0.0":[{"object":["tempFilePath"]},{"success":["savedFilePath"]}]},"getSavedFileList":{"1.0.0":[{"success":["fileList"]}]},"getSavedFileInfo":{"1.0.0":[{"object":["filePath"]},{"success":["size","createTime"]}]},"removeSavedFile":{"1.0.0":[{"object":["filePath"]}]},"openDocument":{"1.0.0":[{"object":["filePath"]}],"1.4.0":[{"object":["fileType"]}]},"getRecorderManager":{"1.6.0":[]},"getBackgroundAudioManager":{"1.2.0":[]},"getFileInfo":{"1.4.0":[{"object":["filePath",{"digestAlgorithm":["md5","sha1"]}]},{"success":["size","digest"]}]},"getLogManager":{"2.1.0":["log","info","warn","debug"]},"getUpdateManager":{"1.9.90":["onCheckForUpdate","onUpdateReady","onUpdateFailed","applyUpdate","null"]},"startBeaconDiscovery":{"1.2.0":[{"object":["uuids"]}]},"stopBeaconDiscovery":{"1.2.0":[]},"getBeacons":{"1.2.0":[{"success":["beacons"]}]},"onBeaconUpdate":{"1.2.0":[{"callback":["beacons"]}]},"onBeaconServiceChange":{"1.2.0":[{"callback":["available","discovering"]}]},"getLocation":{"1.0.0":[{"object":["type"]},{"success":["latitude","longitude","speed","accuracy"]}],"1.6.0":[{"object":["altitude"]}],"1.2.0":[{"success":["altitude","verticalAccuracy","horizontalAccuracy"]}]},"chooseLocation":{"1.0.0":[{"success":["name","address","latitude","longitude"]}]},"openLocation":{"1.0.0":[{"object":["latitude","longitude","scale","name","address"]}]},"getBackgroundAudioPlayerState":{"1.0.0":[{"success":["duration","currentPosition","status","downloadPercent","dataUrl"]}]},"playBackgroundAudio":{"1.0.0":[{"object":["dataUrl","title","coverImgUrl"]}]},"pauseBackgroundAudio":{"1.0.0":[]},"seekBackgroundAudio":{"1.0.0":[{"object":["position"]}]},"stopBackgroundAudio":{"1.0.0":[]},"onBackgroundAudioPlay":{"1.0.0":[]},"onBackgroundAudioPause":{"1.0.0":[]},"onBackgroundAudioStop":{"1.0.0":[]},"loadFontFace":{"2.1.0":[{"object":["family","source","desc"]}]},"chooseImage":{"1.0.0":[{"object":["count","sizeType","sourceType"]},{"success":["tempFilePaths"]}],"1.2.0":[{"success":["tempFiles"]}]},"previewImage":{"1.0.0":[{"object":["current","urls"]}]},"getImageInfo":{"1.0.0":[{"object":["src"]},{"success":["width","height","path"]}],"1.9.90":[{"success":["orientation","type"]}]},"saveImageToPhotosAlbum":{"1.2.0":[{"object":["filePath"]}]},"startRecord":{"1.0.0":[{"success":["tempFilePath"]}]},"stopRecord":{"1.0.0":[]},"chooseVideo":{"1.0.0":[{"object":["sourceType","maxDuration"]},{"success":["tempFilePath","duration","size","height","width"]}],"1.6.0":[{"object":["compressed"]}]},"saveVideoToPhotosAlbum":{"1.2.0":[{"object":["filePath"]}]},"playVoice":{"1.0.0":[{"object":["filePath"]}],"1.6.0":[{"object":["duration"]}]},"pauseVoice":{"1.0.0":[]},"stopVoice":{"1.0.0":[]},"reportMonitor":{"2.0.1":[]},"navigateBackMiniProgram":{"1.3.0":[{"object":["extraData"]}]},"navigateToMiniProgram":{"1.3.0":[{"object":["appId","path","extraData","envVersion"]}]},"downloadApp":{"2.1.0":["onCreated","onProgressUpdate","pause","resume","cancel","install","null"]},"getAppInstallState":{"2.1.0":[{"object":["packageName","packageNameArray"]},{"success":["isInstalled","versionName","versionCode","pkgInfos"]}]},"queryDownloadAppTask":{"2.1.0":[{"object":["downloadId","downloadIdArray","appIdArray"]},{"success":["state","progress","result"]}]},"cancelDownloadAppTask":{"2.1.0":[{"object":["downloadIdArray"]}]},"uploadFile":{"1.0.0":[{"object":["url","filePath","name","header","formData"]},{"success":["data","statusCode"]}]},"downloadFile":{"1.0.0":[{"object":["url","header"]},{"success":["tempFilePath","statusCode"]}]},"request":{"1.0.0":[{"object":["url","data","header",{"method":["OPTIONS","GET","HEAD","POST","PUT","DELETE","TRACE","CONNECT"]},"dataType"]},{"success":["data","statusCode"]}],"1.7.0":[{"object":["responseType"]}],"1.2.0":[{"success":["header"]}]},"connectSocket":{"1.0.0":[{"object":["url","header",{"method":["OPTIONS","GET","HEAD","POST","PUT","DELETE","TRACE","CONNECT"]}]}],"1.4.0":[{"object":["protocols"]}]},"onSocketOpen":{"1.0.0":[]},"onSocketError":{"1.0.0":[]},"sendSocketMessage":{"1.0.0":[{"object":["data"]}]},"onSocketMessage":{"1.0.0":[{"callback":["data"]}]},"closeSocket":{"1.0.0":[],"1.4.0":[{"object":["code","reason"]}]},"onSocketClose":{"1.0.0":[]},"getHCEState":{"1.7.0":[{"success":["errCode"]}]},"startHCE":{"1.7.0":[{"object":["aid_list"]},{"success":["errCode"]}]},"stopHCE":{"1.7.0":[{"success":["errCode"]}]},"onHCEMessage":{"1.7.0":[{"callback":["messageType","data","reason"]}]},"sendHCEMessage":{"1.7.0":[{"object":["data"]},{"success":["errCode"]}]},"onUserCaptureScreen":{"1.4.0":[]},"chooseContact":{"1.0.0":[{"success":["phoneNumber","displayName"]}]},"getUserInfo":{"1.0.0":[{"success":["userInfo","rawData","signature","encryptedData","iv"]}],"1.1.0":[{"object":["withCredentials"]}],"1.3.0":[{"object":["lang"]}],"1.9.90":[{"object":["timeout"]}]},"addPhoneContact":{"1.2.0":[{"object":["photoFilePath","nickName","lastName","middleName","firstName","remark","mobilePhoneNumber","weChatNumber","addressCountry","addressState","addressCity","addressStreet","addressPostalCode","organization","title","workFaxNumber","workPhoneNumber","hostNumber","email","url","workAddressCountry","workAddressState","workAddressCity","workAddressStreet","workAddressPostalCode","homeFaxNumber","homePhoneNumber","homeAddressCountry","homeAddressState","homeAddressCity","homeAddressStreet","homeAddressPostalCode"]}]},"makePhoneCall":{"1.0.0":[{"object":["phoneNumber"]}]},"startPullDownRefresh":{"1.5.0":[]},"stopPullDownRefresh":{"1.0.0":[]},"scanCode":{"1.0.0":[{"success":["result","scanType","charSet","path","rawData"]}],"1.2.0":[{"object":["onlyFromCamera"]}],"1.7.0":[{"object":["scanType"]}]},"pageScrollTo":{"1.4.0":[{"object":["scrollTop","duration"]}]},"setEnableDebug":{"1.4.0":[{"object":["enableDebug"]}]},"setKeepScreenOn":{"1.4.0":[{"object":["keepScreenOn"]}]},"setNavigationBarColor":{"1.4.0":[{"object":["frontColor","backgroundColor","animation","animation.duration",{"animation.timingFunc":["linear","easeIn","easeOut","easeInOut"]}]}]},"openSetting":{"1.1.0":[{"success":["authSetting"]}]},"getSetting":{"1.2.0":[{"success":["authSetting"]}]},"showShareMenu":{"1.1.0":[{"object":["withShareTicket"]}]},"hideShareMenu":{"1.1.0":[]},"updateShareMenu":{"1.2.0":[{"object":["withShareTicket"]}],"1.4.0":[{"object":["dynamic","widget"]}],"2.4.0":[{"object":["isUpdatableMessage","activityId","templateInfo"]}]},"getShareInfo":{"1.1.0":[{"object":["shareTicket"]},{"callback":["encryptedData","iv"]}],"1.9.90":[{"object":["timeout"]}]},"checkSession":{"1.0.0":[]},"startSoterAuthentication":{"1.5.0":[{"object":["requestAuthModes","challenge","authContent"]},{"success":["errCode","authMode","resultJSON","resultJSONSignature"]}]},"getSystemInfo":{"1.0.0":[{"success":["model","pixelRatio","windowWidth","windowHeight","language","version","system","platform"]}],"1.5.0":[{"success":["brand","fontSizeSetting"]}],"1.1.0":[{"success":["screenWidth","screenHeight","SDKVersion"]}],"1.9.0":[{"success":["statusBarHeight"]}]},"getSystemInfoSync":{"1.0.0":[{"return":["model","pixelRatio","windowWidth","windowHeight","language","version","system","platform"]}],"1.5.0":[{"return":["brand","fontSizeSetting"]}],"1.1.0":[{"return":["screenWidth","screenHeight","SDKVersion"]}],"1.9.0":[{"return":["statusBarHeight"]}]},"setBackgroundColor":{"2.1.0":[{"object":["backgroundColor","backgroundColorTop","backgroundColorBottom"]}]},"setBackgroundTextStyle":{"2.1.0":[{"object":["textStyle"]}]},"navigateTo":{"1.0.0":[{"object":["url"]}]},"redirectTo":{"1.0.0":[{"object":["url"]}]},"reLaunch":{"1.1.0":[{"object":["url"]}]},"switchTab":{"1.0.0":[{"object":["url"]}]},"navigateBack":{"1.0.0":[{"object":["delta"]}]},"setTabBarBadge":{"1.9.0":[{"object":["index","text"]}]},"removeTabBarBadge":{"1.9.0":[{"object":["index"]}]},"showTabBarRedDot":{"1.9.0":[{"object":["index"]}]},"hideTabBarRedDot":{"1.9.0":[{"object":["index"]}]},"setTabBarStyle":{"1.9.0":[{"object":["color","selectedColor","backgroundColor","borderStyle"]}]},"setTabBarItem":{"1.9.0":[{"object":["index","text","iconPath","selectedIconPath"]}]},"showTabBar":{"1.9.0":[{"object":["animation"]}]},"hideTabBar":{"1.9.0":[{"object":["animation"]}]},"setTopBarText":{"1.4.3":[{"object":["text"]}]},"setNavigationBarTitle":{"1.0.0":[{"object":["title"]}]},"showNavigationBarLoading":{"1.0.0":[]},"hideNavigationBarLoading":{"1.0.0":[]},"getWeRunData":{"1.2.0":[{"success":["encryptedData","iv"]}],"1.9.90":[{"object":["timeout"]}]},"startWifi":{"1.6.0":[]},"stopWifi":{"1.6.0":[]},"connectWifi":{"1.6.0":[{"object":["SSID","BSSID","password"]}]},"getWifiList":{"1.6.0":[]},"onGetWifiList":{"1.6.0":[{"callback":["wifiList"]}]},"setWifiList":{"1.6.0":[{"object":["wifiList"]}]},"onWifiConnected":{"1.6.0":[{"callback":["wifi"]}]},"getConnectedWifi":{"1.6.0":[{"success":["wifi"]}]},"createSelectorQuery":{"1.4.0":[]},"makeVoIPCall":{"1.5.0":[{"object":["allowBackCamera","showOther","avatarUrl","context"]}]},"createCanvasContext":{"1.0.0":[]},"canvasGetImageData":{"1.9.0":[{"object":["canvasId","x","y","width","height"]},{"success":["width","height","data"]}]},"canvasPutImageData":{"1.9.0":[{"object":["canvasId","data","x","y","width","height"]}]},"canvasToTempFilePath":{"1.0.0":[{"object":["canvasId"]}],"1.2.0":[{"object":["x","y","width","height","destWidth","destHeight"]}],"1.7.0":[{"object":["fileType","quality"]}]},"canvasContext":{"1.0.0":["addColorStop","arc","beginPath","bezierCurveTo","clearActions","clearRect","closePath","createCircularGradient","createLinearGradient","drawImage","draw","fillRect","fillText","fill","lineTo","moveTo","quadraticCurveTo","rect","rotate","save","scale","setFillStyle","setFontSize","setGlobalAlpha","setLineCap","setLineJoin","setLineWidth","setMiterLimit","setShadow","setStrokeStyle","strokeRect","stroke","translate"],"1.9.90":["arcTo","createPattern","font","globalCompositeOperation","lineDashOffset","measureText","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","setTransform","strokeText","transform"],"1.6.0":["clip","setLineDash"],"1.1.0":["setTextAlign"],"1.4.0":["setTextBaseline"]},"animation":{"1.0.0":["opacity","backgroundColor","width","height","top","left","bottom","right","rotate","rotateX","rotateY","rotateZ","rotate3d","scale","scaleX","scaleY","scaleZ","scale3d","translate","translateX","translateY","translateZ","translate3d","skew","skewX","skewY","matrix","matrix3d"]},"audioContext":{"1.0.0":["setSrc","play","pause","seek"]},"cameraContext":{"1.6.0":["takePhoto","startRecord","stopRecord"]},"mapContext":{"1.0.0":["getCenterLocation","moveToLocation"],"1.2.0":["translateMarker","includePoints"],"1.4.0":["getRegion","getScale"]},"videoContext":{"1.0.0":["play","pause","seek","sendDanmu"],"1.4.0":["playbackRate","requestFullScreen","exitFullScreen"],"2.1.0":["showStatusBar","hideStatusBar"]},"innerAudioContext":{"1.6.0":["play","pause","stop","seek","destroy","onCanplay","onPlay","onPause","onStop","onEnded","onTimeUpdate","onError","onWaiting","onSeeking","onSeeked","src","startTime","autoplay","loop","obeyMuteSwitch","duration","currentTime","paused","buffered"],"1.9.0":["offCanplay","offPlay","offPause","offStop","offEnded","offTimeUpdate","offError","offWaiting","offSeeking","offSeeked"],"1.9.90":[{"props":["volume"]},"volume"]},"recorderManager":{"1.6.0":["start","pause","resume","stop","onStart","onPause","onStop","onFrameRecorded","onError"]},"backgroundAudioManager":{"1.2.0":["play","pause","stop","seek","onCanplay","onPlay","onPause","onStop","onEnded","onTimeUpdate","onPrev","onNext","onError","onWaiting","duration","currentTime","paused","src","startTime","buffered","title","epname","singer","coverImgUrl","webUrl","protocol"]},"uploadTask":{"1.4.0":["onProgressUpdate","abort"]},"downloadTask":{"1.4.0":["onProgressUpdate","abort"]},"requestTask":{"1.4.0":["abort"]},"selectorQuery":{"1.4.0":["in","select","selectAll","selectViewport","exec"]},"onBLEConnectionStateChanged":{"1.1.0":[{"callback":["deviceId","connected"]}]},"notifyBLECharacteristicValueChanged":{"1.1.0":[{"object":["deviceId","serviceId","characteristicId","state"]}]},"sendBizRedPacket":{"1.2.0":[{"object":["timeStamp","nonceStr","package","signType","paySign"]}]},"captureScreen":{"1.4.0":[{"success":["tempFilePath"]}]},"getFileSystemManager":{"1.9.9":[]},"onMemoryWarning":{"2.0.2":[{"callback":["level"]}]},"nextTick":{"2.2.3":[]},"getAccountInfoSync":{"2.2.2":[]},"getAvailableAudioSources":{"2.1.0":[{"success":["audioSources"]}]},"compressImage":{"2.4.0":[{"object":["src","quality"]}]},"offLocalServiceDiscoveryStop":{"2.4.0":[]},"offLocalServiceFound":{"2.4.0":[]},"offLocalServiceLost":{"2.4.0":[]},"offLocalServiceResolveFail":{"2.4.0":[]},"onLocalServiceDiscoveryStop":{"2.4.0":[]},"onLocalServiceFound":{"2.4.0":[]},"onLocalServiceLost":{"2.4.0":[]},"onLocalServiceResolveFail":{"2.4.0":[]},"startLocalServiceDiscovery":{"2.4.0":[]},"stopLocalServiceDiscovery":{"2.4.0":[]},"shareAppMessageForFakeNative":{"2.4.3":[]},"getMenuButtonBoundingClientRect":{"2.1.0":[]},"chooseMessageFile":{"2.5.0":[{"object":["count","type"]},{"success":["tempFiles"]}]}}')},function(e,t,o){const n=o(1),r=o(2);r.on("set-data",function(e,t,o){const r=JSON.stringify(e).length;r>262144&&function(e,t,o,r){n.pub("set-data-large",{size:e,page:__appServiceEngine__.getCurrentRoute(),position:t,stack:o,vars:r})}(r,t,o,Object.keys(e).join(","))}),e.exports.init=function(){}},function(e,t,o){const n=o(1),r=o(2),s=1e3,i=20;let a=setTimeout,c=[],u=Date.now(),l=null;function p(e,t,o){n.pub("set-data-freq",{times:e,page:__appServiceEngine__.getCurrentRoute(),position:t,stack:o})}r.on("set-data",function(e,t,o){if("Page"!==t)return;const n=Date.now(),r=n-u;u=n,r>s?c=[]:c.push(r),c.length>=i&&function(e,t){clearTimeout(l);for(let o=0,n=c.length;o<n;o++){let r=0,u=o;for(;r<s&&u<n;)r+=c[u],u++;if(r<s)return void(u-o>=i&&(l=a(function(){p(u-o,e,t),c=[]},s-r)));if(u-o>=i){p(u-o,e,t),c=[];break}}}(t,o)}),e.exports.init=function(e){a=e}},function(e,t,o){const n=o(1),r=o(2);o(0);r.on("set-data",function(e,t,o){!function(e,t,o){n.pub("set-data-no-binding",{vars:e,page:__appServiceEngine__.getCurrentRoute(),position:t,stack:o})}(Object.keys(e),t,o)}),e.exports.init=function(){}},function(e,t,o){const n=o(1),r=(o(2),o(0)),s=Object.defineProperty,i=function(){return this}();let a=!0;function c(e,t){const o=function(o,c=0,...u){let l={},p=__appServiceEngine__.getCurrentRoute();return"running"===r.status&&(s(o,"name",{writable:!0}),o.name=`Audit_${t}_${p}`,l.stack=r.getCallStack()),e("running"===r.status?function(){if(o.apply(i,u),!l.stack||!l.stack.length)return;a&&(a=!1,n.pub("timer-no-recycle-applicable"));const e=__appServiceEngine__.getCurrentRoute(),r=(l.funcName||"").match(/Audit_(setTimeout|setInterval)_(.*)/);r&&r[2]&&(p=r[2]),e!==p&&function(e,t,o){o&&o.length&&n.pub("timer-no-recycle",{name:t,page:e,stack:o})}(p,t,l.stack)}:o,c)};return s(o,"name",{writable:!0}),o.name=`Audit_${t}`,o}e.exports.init=function(e,t){!function(e,t){setInterval=c(t,"setInterval"),setTimeout=c(e,"setTimeout")}(e,t)}},function(e,t,o){const n=o(1),r=o(2);o(0);let s=[],i=[],a=[];__wxConfig&&__wxConfig.tabBar&&(a=__wxConfig.tabBar.list.map(e=>e.pagePath.replace(".html",""))),r.on("stop-audit",function(){let e=[];for(let t of i)t&&e.push(t.route);e=e.concat(s),n.pub("page-info",{pages:e})}),__appServiceSDK__.onAppRoute(e=>{let t=__appServiceEngine__.getCurrentPages();t[0]&&s.indexOf(t[0].route)<0&&a.indexOf(t[0].route)>-1&&s.push(t[0].route),i=t}),e.exports.init=function(){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tZXNzYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvZXZlbnRlbWl0dGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9iYWRqcy1yZXBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21lc3NhZ2VyNERldnRvb2wuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2JqLXJlcG9ydC10cnlqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWVzc2FnZXI0UnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdGFza3MvZGVwcmVjYXRlZC1hcGkvY29tbW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy90YXNrcy9yZWNvbWVuZGVkLXZlcnNpb24vY29tbW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy90YXNrcy9qcy1leGNlcHRpb24vYXBwc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvaW5qZWN0L2FwcHNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3Rhc2tzL2FwcHNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3Rhc2tzL2V4ZWN1dGUtbG9uZy10aW1lL2FwcHNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3Rhc2tzL2RlcHJlY2F0ZWQtYXBpL2FwcHNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3Rhc2tzL3JlY29tZW5kZWQtdmVyc2lvbi9hcHBzZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy90YXNrcy9zZXQtZGF0YS1sYXJnZS9hcHBzZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy90YXNrcy9zZXQtZGF0YS1mcmVxL2FwcHNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3Rhc2tzL3NldC1kYXRhLW5vLWJpbmRpbmcvYXBwc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdGFza3MvdGltZXItbm8tcmVjeWNsZS9hcHBzZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy90YXNrcy91bnVzZWQtY3NzL2FwcHNlcnZpY2UuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCIkIiwic2VsZWN0b3IiLCJlbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIiQkIiwicXVlcnlTZWxlY3RvckFsbCIsInNob3ciLCJzdHlsZSIsImRpc3BsYXkiLCJoaWRlIiwic3ByaW50ZiIsInN0ciIsImFyZ3MiLCJsZW5ndGgiLCJyZXBsYWNlIiwicmVwb3J0QmVoYXZpb3IiLCJkYXRhIiwidGhpcyIsImxvZyIsInBsdWdpbk1lc3NhZ2VyIiwiaW52b2tlIiwiSlNPTiIsInN0cmluZ2lmeSIsInByb2Nlc3MiLCJmb3JtYXRTaXplIiwic2l6ZSIsInVuaXRzIiwidW5pdCIsInNoaWZ0IiwidG9GaXhlZCIsImhhc2giLCJ0ZXh0IiwiaW5kZXgiLCJjaGFyQ29kZUF0IiwiYnl0ZUNvdW50IiwiZW5jb2RlVVJJIiwic3BsaXQiLCJ1bmlxdWUiLCJhcnIiLCJuZXdBcnIiLCJpbmRleE9mIiwicHVzaCIsImdldFR5cGUiLCJ2YWwiLCJ0b1N0cmluZyIsInNsaWNlIiwidG9Mb3dlckNhc2UiLCJjb21wYXJlVmVyc2lvbiIsInYxIiwidjIiLCJsZW4iLCJNYXRoIiwibWF4IiwibnVtMSIsInBhcnNlSW50IiwibnVtMiIsImlzUmVxdWVzdE5vdEZvckF1ZGl0IiwidXJsIiwiaW52YWxpZERvbWFpblJlZyIsIm1hdGNoIiwiZmlsdGVyTGliU3RhY2siLCJzdGFja3MiLCJmaWx0ZXIiLCJzdGFjayIsInRlc3QiLCJmaWxlIiwicGFyc2VTdGFja1N0cmluZ3MiLCJzdGFja1N0ciIsImZpbHRlckxpYiIsIlJFR19FWFAiLCJyZXN1bHQiLCJtYXAiLCJmaWxlU3RyaW5nIiwibGluZSIsImNvbHVtbiIsImZ1bmMiLCJnZXRDYWxsU3RhY2siLCJFcnJvciIsIm9uR2VuZXJhdGVGdW5jUmVhZHkiLCJ3aW5kb3ciLCJfX2dlbmVyYXRlRnVuY19fIiwic2V0VGltZW91dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdGF0dXMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b3AiLCJyZXF1aXJlIiwiZW1pdHRlciIsIkV2ZW50RW1pdHRlciIsInNldE1heExpc3RlbmVycyIsImJhZGpzUmVwb3J0ZXIiLCJpbml0IiwiaWQiLCJnbG9iYWxFcnJvciIsImlzQXVkaXRzVGFiRW52IiwiZXh0ZW5kIiwidmVyc2lvbiIsInJlcG9ydEN1c3RvbUVycm9yIiwiZXJyTXNnIiwiZSIsInJlcG9ydCIsImVlIiwibWVzc2FnZXIiLCJfX2dsb2JhbCIsIldlYlNvY2tldCIsInBvcnRNYXRjaCIsInBvcnQiLCJ3cyIsIl91cmwiLCJfcHJvdG9jb2wiLCJfY2FsbGJhY2siLCJfbXNnUXVldWUiLCJHRVRfTUVTU0FHRV9UT0tFTiIsInNlbmQiLCJtc2ciLCJyZWFkeVN0YXRlIiwiT1BFTiIsInJlZ2lzdGVyQ2FsbGJhY2siLCJjYWxsYmFjayIsImNvbm5lY3QiLCJwcm90b2NvbCIsInRva2VuIiwicHJvbXB0Iiwib25vcGVuIiwiZXZ0Iiwid2FpdEZvclNlbmQiLCJjb25jYXQiLCJmb3JFYWNoIiwib25jbG9zZSIsIm9ubWVzc2FnZSIsInBhcnNlIiwiZm4iLCJjb25zb2xlIiwiZXJyb3IiLCJjb21tYW5kIiwiZXZlbnROYW1lIiwiZW1pdCIsImdldFdzIiwicHViIiwiZnJvbSIsInN1YiIsImFwcElkIiwibGliVmVyc2lvbiIsIm9uIiwiQkpfUkVQT1JUIiwiZ2xvYmFsIiwiX2Vycm9yIiwiX2Vycm9yX21hcCIsIl9jb25maWciLCJ1aW4iLCJjb21ibyIsImV4dCIsImxldmVsIiwiaWdub3JlIiwicmFuZG9tIiwiZGVsYXkiLCJzdWJtaXQiLCJyZXBlYXQiLCJfaXNPQkpCeVR5cGUiLCJ0eXBlIiwiX2lzT0JKIiwib2JqIiwiX3Byb2Nlc3NTdGFja01zZyIsImpvaW4iLCJfZXJyb3JfdG9zdHJpbmciLCJwYXJhbSIsInBhcmFtcyIsImVyciIsImVuY29kZVVSSUNvbXBvbmVudCIsIl9zdWJtaXQiLCJfaW1nIiwiSW1hZ2UiLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwiX2lzX3JlcGVydCIsImVycm9yX2xpc3QiLCJjb21ib1RpbWVvdXQiLCJfc2VuZCIsImlzUmVvcHJ0Tm93IiwiaXNJZ25vcmUiLCJlcnJvcl9zdHIiLCJydWxlIiwiRGF0ZSIsIm9uUmVwb3J0IiwiY29tYm9SZXBvcnQiLCJjbGVhclRpbWVvdXQiLCJlcnJPYmoiLCJyb3dDb2xzIiwicm93TnVtIiwiY29sTnVtIiwidGFyZ2V0IiwibWVzc2FnZSIsImRlc2NyaXB0aW9uIiwiX3Byb2Nlc3NFcnJvciIsIl9fd3hDb25maWciLCJhY2NvdW50SW5mbyIsIl9fYXBwU2VydmljZVNES19fIiwid3giLCJpbmZvIiwiZGVidWciLCJjb25maWciLCJvcmdFcnJvciIsImxvY2F0aW9uIiwiaG9zdG5hbWUiLCJjb29raWUiLCJvbmVycm9yIiwiY29sIiwibmV3TXNnIiwidGFnTmFtZSIsImFwcGx5IiwiYXJndW1lbnRzIiwiX19vbmVycm9yX18iLCJkZWNvZGVVUklDb21wb25lbnQiLCJfb250aHJvdyIsInRyeUpzIiwidGhyb3dDYiIsInRpbWVvdXRrZXkiLCJfbWVyZ2UiLCJvcmciLCJfaXNGdW5jdGlvbiIsImZvbyIsImNhdCIsIm9yZ09uZXJyb3IiLCJjYXRBcmdzIiwiYXJnIiwiY2F0VGltZW91dCIsImNiIiwidGltZW91dCIsIkZ1bmN0aW9uIiwibWFrZUFyZ3NUcnkiLCJzZWxmIiwidG1wIiwidHJ5V3JhcCIsIm1ha2VPYmpUcnkiLCJzcHlKcXVlcnkiLCJfYWRkIiwiX3JlbW92ZSIsIl8kIiwiZXZlbnQiLCJ6ZXB0byIsIm9mZiIsImpRdWVyeSIsImFkZCIsInJlbW92ZSIsIl9hamF4IiwiYWpheCIsInNldHRpbmciLCJ1bmRlZmluZWQiLCJzcHlNb2R1bGVzIiwiX3JlcXVpcmUiLCJfZGVmaW5lIiwiZGVmaW5lIiwiYW1kIiwic2VhanMiLCJvcmdBcmciLCJ1c2UiLCJzcHlTeXN0ZW0iLCJzZXRJbnRlcnZhbCIsInNweUN1c3RvbSIsInNweUFsbCIsIlJlZmxlY3RPd25LZXlzIiwiUiIsIlJlZmxlY3QiLCJSZWZsZWN0QXBwbHkiLCJyZWNlaXZlciIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiTnVtYmVySXNOYU4iLCJOdW1iZXIiLCJpc05hTiIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsIiRnZXRNYXhMaXN0ZW5lcnMiLCJ0aGF0IiwiX2FkZExpc3RlbmVyIiwibGlzdGVuZXIiLCJwcmVwZW5kIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwiVHlwZUVycm9yIiwibmV3TGlzdGVuZXIiLCJ1bnNoaWZ0Iiwid2FybmVkIiwidyIsIlN0cmluZyIsImNvdW50Iiwid2FybiIsIl9vbmNlV3JhcCIsInN0YXRlIiwiZmlyZWQiLCJ3cmFwRm4iLCJ3cmFwcGVkIiwicmVtb3ZlTGlzdGVuZXIiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsInJldCIsIkFycmF5IiwidW53cmFwTGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsImxpc3RlbmVyQ291bnQiLCJjb3B5Iiwic2V0IiwiUmFuZ2VFcnJvciIsImdldFByb3RvdHlwZU9mIiwiZ2V0TWF4TGlzdGVuZXJzIiwiZG9FcnJvciIsImVyIiwiY29udGV4dCIsImhhbmRsZXIiLCJsaXN0ZW5lcnMiLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsIm9uY2UiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdCIsInBvc2l0aW9uIiwib3JpZ2luYWxMaXN0ZW5lciIsInBvcCIsInNwbGljZU9uZSIsInJlbW92ZUFsbExpc3RlbmVycyIsImtleXMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwicGFyZW50IiwicG9zdE1lc3NhZ2UiLCJnZXRWYWxpZFZlcnNpb25zIiwiU0RLVmVyc2lvbiIsIml0ZW0iLCJjdXJyZW50VmVyc2lvbiIsImRvZXNOZWVkUHJvcGVydHkiLCJ2YWxpZFZlcnNpb25zIiwiZG9lc05lZWQiLCJnZXRWYWxpZEl0ZW1zV2l0aFNwZWNpZmljVmVyc2lvbnMiLCJqIiwiY3VycmVudFByb3BlcnR5IiwiZ2V0VmFsaWRJdGVtIiwidXRpbHMiLCJzZW5kRXJyb3IiLCJwYWdlIiwiX19hcHBTZXJ2aWNlRW5naW5lX18iLCJnZXRDdXJyZW50Um91dGUiLCJSZXBvcnRlciIsInJlZ2lzdGVyRXJyb3JMaXN0ZW5lciIsInRhc2tzIiwiZWx0VGFzayIsImRhVGFzayIsInJlY29tZW5kZWRWZXJzaW9uVGFzayIsIm9yaVNldEludGVydmFsIiwib3JpU2V0VGltZW91dCIsImRlZmluZVByb3BlcnRpZXMiLCJfa2V5cyIsInJlcG9ydGVyTWV0aG9kcyIsImFsbE1vZHVsZXMiLCJ3eENvbmZpZyIsIl9pbml0ZWQiLCJtZXRob2QiLCJjb25maWd1cmFibGUiLCJfX3Bhc3NXQVNlcnZpY2VHbG9iYWxfXyIsIl9fV0FTZXJ2aWNlR2xvYmFsX18iLCJob29rUmVxdWVzdCIsImhvb2tSZXF1aXJlIiwiaG9vayIsInBsdWdpbnMiLCJob29rQ29tcFNldERhdGEiLCJyZWdpc3RlcmVkQ29tcHMiLCJleHBhcnNlciIsIkNvbXBvbmVudCIsIl9saXN0IiwiY29tcElzIiwiY29tcERlZiIsIm9yaUluaXQiLCJpbml0aWF0b3IiLCJjb21wIiwib3JpU2V0RGF0YSIsInNldERhdGEiLCJfX2N1c3RvbUNvbnN0cnVjdG9yX18iLCJfX3ZpcnR1YWxET01fXyIsIlBhZ2UiLCJfX3NldF9kYXRhX3Jld3JpdGVkX18iLCJpcyIsImhvb2tQYWdlU2V0RGF0YSIsImdldEN1cnJlbnRQYWdlcyIsIm9yaVJlcXVlc3QiLCJyZXF1ZXN0Iiwib3JpU3VjY2VzcyIsInN1Y2Nlc3MiLCJyZXMiLCJib2R5Iiwic3RhdHVzQ29kZSIsIm9yaVJlcXVpcmUiLCJtb2RJZCIsIm1vZCIsImlzQ3Jhd2xlciIsIl9fZGV2dG9vbHNDb25maWciLCJvbmxpbmUiLCJvbkFwcFJvdXRlIiwib3JpU2xvd1JlcG9ydCIsInNsb3dSZXBvcnQiLCJjb3N0IiwiQVBJcyIsImtleXNPZkFQSSIsImRlcHJlY2F0ZWRzIiwidGltZXIiLCJoYW5kbGVEZXByZWNhdGVkcyIsImFwaSIsImNoZWNrQVBJcyIsIkFQSSIsImRlc2NyaXB0b3JzIiwidmFsaWRNZXRob2RzIiwiZ2V0VmFsaWRBcmciLCJfbWV0aG9kIiwib3JpZ2luYWwiLCJtaW5QdWJsaWNMaWJWZXJzaW9uIiwiaGFuZGxlQXBpVmVyc2lvbiIsImRlc2NyaXB0b3IiLCJjaGVja0FQSUFyZ3MiLCJhcmdLZXlzIiwia2V5TGVuIiwiaG9va0FwaVJldHVybiIsInJldE9iaiIsIm9yaWdpbmFsUmV0IiwiYXNzaWduIiwicHJvcCIsImhvb2tTdWNjZXNzUmVzIiwib3JpZ2luU3VjY2VzcyIsIm9yaWdpbmFsUmVzIiwic29ydCIsInZlciIsInZlcnNpb25TdXBwb3J0IiwiYWxsVmVyc2lvbnMiLCJpZHgiLCJzdXBwb3J0T2JqZWN0IiwiZm91bmRBcmdzIiwiYXJnS2V5IiwicmV0dXJuIiwiZGVmaW5lS2V5IiwiZGVmaW5lT2JqIiwidmFycyIsIk9ORV9TRUNPTkQiLCJNQVhfU0VUX0RBVEFfTlVNIiwidGltZVN0YW1wcyIsImxhc3RUUyIsIm5vdyIsInRpbWVzIiwidGltZVN0YW1wIiwic3VtIiwiY2hlY2siLCJfdGhpcyIsIm5vdEFwcGxpY2FibGUiLCJ3cmFwIiwidGltZXJGdW5jIiwiZnVuY05hbWUiLCJyZXN0QXJncyIsImN1cnJQYWdlIiwid3JpdGFibGUiLCJkZWZpbmVUaW1lckZ1bmMiLCJ0YWJiYXJQYWdlcyIsImN1cnJlbnRQYWdlcyIsInRhYmJhckZpcnN0UGFnZSIsInRhYkJhciIsInBhZ2VQYXRoIiwicGFnZXMiLCJyb3V0ZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdB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RUFBZUQsSUFQL0MsU0FBeUJDLEVBQWVELEdBRXRDL0YsWUFBY3FNLEVBQUt0RyxFQUFnQixlQUVuQ2hSLFdBQWFzWCxFQUFLckcsRUFBZSxjQUlqQzJHLENBQWdCM0csRUFBZUQsSyxnQkMxRWpDLE1BQU0xUCxFQUFXaEIsRUFBUSxHQUNuQmUsRUFBS2YsRUFBUSxHQUNMQSxFQUFRLEdBRXRCLElBQUl1WCxFQUFjLEdBQ2RDLEVBQWUsR0FDZkMsRUFBa0IsR0FDaEI3USxZQUFnQkEsV0FBVzhRLFNBQy9CRCxFQUFrQjdRLFdBQVc4USxPQUFPakosS0FBS3pQLElBQUtpUixHQUFTQSxFQUFLMEgsU0FBU3BjLFFBQVEsUUFBUyxNQUd4RndGLEVBQUcwQyxHQUFHLGFBQWMsV0FDbEIsSUFBSW1VLEVBQVEsR0FDWixJQUFLLElBQUkzSCxLQUFRdUgsRUFDZnZILEdBQVEySCxFQUFNMWEsS0FBSytTLEVBQUs0SCxPQUUxQkQsRUFBUUEsRUFBTXBWLE9BQU8rVSxHQUNyQnZXLEVBQVNvQyxJQUFJLFlBQWEsQ0FBQ3dVLFlBRzdCOVEsa0JBQWtCNE0sV0FBWWpZLElBQzVCLElBQUltYyxFQUFRMUgscUJBQXFCMEMsa0JBRTdCZ0YsRUFBTSxJQUFNTCxFQUFZdGEsUUFBUTJhLEVBQU0sR0FBR0MsT0FBUyxHQUFLSixFQUFnQnhhLFFBQVEyYSxFQUFNLEdBQUdDLFFBQVUsR0FFcEdOLEVBQVlyYSxLQUFLMGEsRUFBTSxHQUFHQyxPQUU1QkwsRUFBZUksSUFLakJyZixFQUFPRCxRQUFRK0gsS0FBTyIsImZpbGUiOiJpbmplY3QvYXBwc2VydmljZS4zYTQ4NmFiZWY0YzExYmQyZWEzMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMSk7XG4iLCJtb2R1bGUuZXhwb3J0cy4kID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbClcbiAgfVxuXG4gIHJldHVybiAoZWwgfHwgZG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG59XG5cbm1vZHVsZS5leHBvcnRzLiQkID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKVxufVxuXG5tb2R1bGUuZXhwb3J0cy5zaG93ID0gZnVuY3Rpb24gKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKVxuICB9XG5cbiAgZWwuc3R5bGUuZGlzcGxheSA9ICcnXG59XG5cbm1vZHVsZS5leHBvcnRzLmhpZGUgPSBmdW5jdGlvbiAoZWwpIHtcbiAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpXG4gIH1cblxuICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG59XG5cbm1vZHVsZS5leHBvcnRzLnNwcmludGYgPSBmdW5jdGlvbiAoc3RyLCBhcmdzKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC8lcy8sIGFyZ3NbaV0pXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5tb2R1bGUuZXhwb3J0cy5yZXBvcnRCZWhhdmlvciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIC8vIGRhdGE6IHNjb3JlX251bSwgc2NvcmVfbGV2ZWwsIGZhaWxlZF9kZXRhaWwsIGlnbm9yZWRfZGV0YWlsLCB1c2VfdGltZVxuICB0aGlzLmxvZygncmVwb3J0QmVoYXZpb3InLCBkYXRhKVxuICBwbHVnaW5NZXNzYWdlci5pbnZva2UoJ1JFUE9SVCcsIEpTT04uc3RyaW5naWZ5KGRhdGEpKVxufVxuXG5tb2R1bGUuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgYXJncy51bnNoaWZ0KCdjb2xvcjogI2VhNmY1YTsnKVxuICAgIGFyZ3MudW5zaGlmdCgnJWNbQXVkaXRdJylcbiAgICAvLyBhcmdzWzBdID0gJ1tBdWRpdF0gJyArIChhcmdzWzBdIHx8ICcnKVxuICAgIGNvbnNvbGUubG9nKC4uLmFyZ3MpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMuZm9ybWF0U2l6ZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGNvbnN0IHVuaXRzID0gWydCJywgJ0snLCAnTScsICdHJ11cbiAgbGV0IHVuaXRcbiAgd2hpbGUgKCh1bml0ID0gdW5pdHMuc2hpZnQoKSkgJiYgc2l6ZSA+IDEwMjQpIHtcbiAgICBzaXplIC89IDEwMjRcbiAgfVxuICByZXR1cm4gKHVuaXQgPT09ICdCJyA/IHNpemUgOiBzaXplLnRvRml4ZWQoMikpICsgdW5pdFxufVxuXG5tb2R1bGUuZXhwb3J0cy5oYXNoID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgbGV0IGhhc2ggPSA1MzgxXG4gIGxldCBpbmRleCA9IHRleHQubGVuZ3RoXG5cbiAgd2hpbGUgKGluZGV4KSB7XG4gICAgaGFzaCA9IChoYXNoICogMzMpIF4gdGV4dC5jaGFyQ29kZUF0KC0taW5kZXgpXG4gIH1cblxuICByZXR1cm4gaGFzaCA+Pj4gMFxufVxuXG4vLyAg6K6h566X5a2X56ym5Liy5a2X56ym5pWwXG5tb2R1bGUuZXhwb3J0cy5ieXRlQ291bnQgPSBmdW5jdGlvbiAocykge1xuICByZXR1cm4gZW5jb2RlVVJJKHMpLnNwbGl0KC8lLi58Li8pLmxlbmd0aCAtIDFcbn1cblxuLy8gIOaVsOe7hOWOu+mHjVxubW9kdWxlLmV4cG9ydHMudW5pcXVlID0gZnVuY3Rpb24gKGFycikge1xuICAvLyByZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KGFycmF5KSk7XG4gIGNvbnN0IG5ld0FyciA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG5ld0Fyci5pbmRleE9mKGFycltpXSkgPT09IC0xKSB7XG4gICAgICBuZXdBcnIucHVzaChhcnJbaV0pXG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdBcnJcbn1cblxubW9kdWxlLmV4cG9ydHMuZ2V0VHlwZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpXG59XG5cbm1vZHVsZS5leHBvcnRzLmNvbXBhcmVWZXJzaW9uID0gZnVuY3Rpb24gKHYxLCB2Mikge1xuICB2MSA9IHYxLnNwbGl0KCcuJylcbiAgdjIgPSB2Mi5zcGxpdCgnLicpXG4gIGNvbnN0IGxlbiA9IE1hdGgubWF4KHYxLmxlbmd0aCwgdjIubGVuZ3RoKVxuXG4gIHdoaWxlICh2MS5sZW5ndGggPCBsZW4pIHtcbiAgICB2MS5wdXNoKCcwJylcbiAgfVxuICB3aGlsZSAodjIubGVuZ3RoIDwgbGVuKSB7XG4gICAgdjIucHVzaCgnMCcpXG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY29uc3QgbnVtMSA9IHBhcnNlSW50KHYxW2ldKVxuICAgIGNvbnN0IG51bTIgPSBwYXJzZUludCh2MltpXSlcblxuICAgIGlmIChudW0xID4gbnVtMikge1xuICAgICAgcmV0dXJuIDFcbiAgICB9IGVsc2UgaWYgKG51bTEgPCBudW0yKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMFxufVxuXG5tb2R1bGUuZXhwb3J0cy5pc1JlcXVlc3ROb3RGb3JBdWRpdCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgY29uc3QgaW52YWxpZERvbWFpblJlZyA9IFtcbiAgICAvXmRhdGFcXDovLFxuICAgIC8vIOS6keWHveaVsOmVv+i9ruivouivt+axglxuICAgIC9eaHR0cHM6XFwvXFwvc2VydmljZXdlY2hhdC5jb21cXC93eGEtcWJhc2VcXC9xYmFzZWNoZWNrcmVzdWx0LyxcbiAgICAvXmh0dHBzPzpcXC9cXC9bXi9dKlxcLnRjYlxcLnFjbG91ZFxcLmxhXFwvLyxcbiAgICAvLyDlub/lkYrnu4Tku7bnmoTotYTmupBcbiAgICAvXmh0dHBzPzpcXC9cXC93eHNuc2R5dGh1bWJcXC53eHNcXC5xcVxcLmNvbVxcLy8sXG4gICAgL15odHRwcz86XFwvXFwvbW1iaXpcXC5xcGljXFwuY25cXC8vLFxuICAgIC9eaHR0cHM/OlxcL1xcL3d4XFwucWxvZ29cXC5jblxcLy8sXG4gICAgLy8g5Zyw5Zu+57uE5Lu255qE6LWE5rqQXG4gICAgL15odHRwcz86XFwvXFwvW14vXSpcXC5xcVxcLmNvbVxcLy8sXG4gICAgL15odHRwcz86XFwvXFwvW14vXSpcXC5ndGltZ1xcLmNvbVxcLy8sXG4gICAgL15odHRwcz86XFwvXFwvW14vXSpcXC5teWFwcFxcLmNvbVxcLy8sXG4gICAgLy8g5bel5YW35YaF6YOo6K+35rGCXG4gICAgL15odHRwOlxcL1xcLzEyNy4wLjAuMTovLFxuICAgIC8vIOaJqeWxlVxuICAgIC9eY2hyb21lLWV4dGVuc2lvbjpcXC9cXC8vLFxuICAgIC8vIHJ1bnRpbWXnjq/looNcbiAgICAvXmh0dHBzPzpcXC9cXC9zZXJ2aWNld2VjaGF0XFwuY29tXFwvLyxcbiAgICAvXFwvYXVkaXRzXFwvYXNzZXJ0XFwvLyxcbiAgICAvXFwvd3hhY3Jhd2xlclxcLy8sXG5cbiAgICAvXmh0dHBzPzpcXC9cXC9bXi9dKlxcLndlaXhpbmJyaWRnZVxcLmNvbVxcLy8sXG5cbiAgICAvLyDmoYbmnrbotYTmupBcbiAgICAvLyAvXmh0dHA6XFwvXFwvMTI3LjAuMC4xOltcXGRdK1xcL2Zhdmljb24uaWNvLyxcbiAgXVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW52YWxpZERvbWFpblJlZy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh1cmwubWF0Y2goaW52YWxpZERvbWFpblJlZ1tpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmNvbnN0IGZpbHRlckxpYlN0YWNrID0gZnVuY3Rpb24gKHN0YWNrcykge1xuICByZXR1cm4gc3RhY2tzLmZpbHRlcigoc3RhY2spID0+IHtcbiAgICByZXR1cm4gIS9eKF9fZGV2X198X19hc2RlYnVnX198X19wYWdlZnJhbWVfX3xhcHBzZXJ2aWNlXFw/KXxhdWRpdHNcXC9hc3NlcnRcXC9pbmplY3R8V0FTZXJ2aWNlLmpzfFdBV2Vidmlldy5qc3x3eGFjcmF3bGVyXFwvcHVibGljLy50ZXN0KHN0YWNrLmZpbGUpXG4gIH0pXG59XG5cbm1vZHVsZS5leHBvcnRzLnBhcnNlU3RhY2tTdHJpbmdzID0gZnVuY3Rpb24gKHN0YWNrU3RyLCBmaWx0ZXJMaWIgPSB0cnVlKSB7XG4gIGxldCBzdGFja3MgPSBzdGFja1N0ci5zcGxpdCgnXFxuJylcbiAgbGV0IFJFR19FWFAgPSAvYXRcXHMrKFtcXFNdKylcXHMrXFwoKFxcUyspXFwpL1xuICBsZXQgcmVzdWx0ID0gc3RhY2tzLm1hcCgoc3RhY2spID0+IHtcbiAgICBsZXQgcmVzdWx0ID0gc3RhY2subWF0Y2goUkVHX0VYUClcbiAgICBpZiAocmVzdWx0ICYmIHJlc3VsdFsxXSAmJiByZXN1bHRbMl0pIHtcbiAgICAgIGxldCBmaWxlU3RyaW5nID0gcmVzdWx0WzJdLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL2h0dHA6XFwvXFwvMTI3XFwuMFxcLjBcXC4xOlxcZCtcXC8oOj8oOj9hcHBzZXJ2aWNlfHd4YWNyYXdsZXJcXC9cXGQrXFwvcHJvZ3JhbVxcL1xcdyspP1xcLyk/LywgJycpXG4gICAgICBsZXQgW2ZpbGUsIGxpbmUsIGNvbHVtbl0gPSBmaWxlU3RyaW5nLnNwbGl0KCc6JylcbiAgICAgIGlmIChmaWxlU3RyaW5nLnNwbGl0KCc6JykubGVuZ3RoID09IDMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBmdW5jOiByZXN1bHRbMV0ucmVwbGFjZSgvXkF1ZGl0XyhzZXRUaW1lb3V0fHNldEludGVydmFsKV8/LiokLywgJyQxJyksXG4gICAgICAgICAgZmlsZSxcbiAgICAgICAgICBsaW5lOiArbGluZSxcbiAgICAgICAgICBjb2x1bW46ICtjb2x1bW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9KS5maWx0ZXIoc3RhY2sgPT4gISFzdGFjaylcblxuICBpZiAoZmlsdGVyTGliKSB7XG4gICAgcmVzdWx0ID0gZmlsdGVyTGliU3RhY2socmVzdWx0KVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5tb2R1bGUuZXhwb3J0cy5nZXRDYWxsU3RhY2sgPSBmdW5jdGlvbiAoZmlsdGVyTGliID0gdHJ1ZSkge1xuICBsZXQgcmVzdWx0ID0gZXhwb3J0cy5wYXJzZVN0YWNrU3RyaW5ncyhuZXcgRXJyb3IoKS5zdGFjaylcblxuICBpZiAoZmlsdGVyTGliKSB7XG4gICAgcmVzdWx0ID0gZmlsdGVyTGliU3RhY2socmVzdWx0KVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5tb2R1bGUuZXhwb3J0cy5vbkdlbmVyYXRlRnVuY1JlYWR5ID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgaWYgKHdpbmRvdy5fX2dlbmVyYXRlRnVuY19fKSB7XG4gICAgc2V0VGltZW91dChmdW5jKVxuICB9IGVsc2Uge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2dlbmVyYXRlRnVuY1JlYWR5JywgZnVuYylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cy5zdGF0dXMgPSAncnVubmluZydcbiIsImNvbnN0IHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudFxuY29uc3QgcG9ydE1hdGNoID0gdWEubWF0Y2goL3BvcnRcXC8oXFxkKikvKVxuXG5pZiAocG9ydE1hdGNoICYmIHdpbmRvdyAmJiB3aW5kb3cudG9wID09IHdpbmRvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbWVzc2FnZXI0RGV2dG9vbCcpXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbWVzc2FnZXI0UnVudGltZScpXG59XG4iLCJjb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbmNvbnN0IGVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKClcbmVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKDEwMClcbm1vZHVsZS5leHBvcnRzID0gZW1pdHRlclxuIiwiY29uc3QgYmFkanNSZXBvcnRlciA9IHJlcXVpcmUoJy4vYmotcmVwb3J0LXRyeWpzJylcblxuYmFkanNSZXBvcnRlci5pbml0KHtcbiAgaWQ6IDE4NyxcbiAgdXJsOiAnaHR0cHM6Ly9iYWRqcy53ZWl4aW5icmlkZ2UuY29tL2JhZGpzJyxcbiAgZ2xvYmFsRXJyb3I6ICEhd2luZG93LmlzQXVkaXRzVGFiRW52LFxuICBleHRlbmQ6IHtcbiAgICB2ZXJzaW9uOiAnMC4wLjQ4JyxcbiAgfSxcbn0pXG5cbmJhZGpzUmVwb3J0ZXIucmVwb3J0Q3VzdG9tRXJyb3IgPSBmdW5jdGlvbihlcnJNc2cpIHtcbiAgdHJ5IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFtjdXN0b21dICR7ZXJyTXNnfWApXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBiYWRqc1JlcG9ydGVyLnJlcG9ydChlKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFkanNSZXBvcnRlclxuIiwiY29uc3QgYmFkanNSZXBvcnRlciA9IHJlcXVpcmUoJy4vYmFkanMtcmVwb3J0JylcbmNvbnN0IGVlID0gcmVxdWlyZSgnLi9ldmVudGVtaXR0ZXInKVxuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcblxudmFyIG1lc3NhZ2VyID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgbmF2aWdhdG9yID0gd2luZG93Lm5hdmlnYXRvciB8fCB3aW5kb3cuX19nbG9iYWwubmF2aWdhdG9yXG4gIGNvbnN0IFdlYlNvY2tldCA9IHdpbmRvdy5XZWJTb2NrZXQgfHwgd2luZG93Ll9fZ2xvYmFsLldlYlNvY2tldFxuXG4gIGNvbnN0IHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudFxuXG5cbiAgdmFyIHBvcnRNYXRjaCA9IHVhLm1hdGNoKC9wb3J0XFwvKFxcZCopLylcbiAgdmFyIHBvcnQgPSBwb3J0TWF0Y2ggPyBwYXJzZUludChwb3J0TWF0Y2hbMV0pIDogOTk3NFxuICB2YXIgd3MgPSBudWxsXG4gIHZhciBfdXJsID0gYHdzOi8vMTI3LjAuMC4xOiR7cG9ydH1gXG4gIHZhciBfcHJvdG9jb2wgPSBudWxsXG4gIHZhciBfY2FsbGJhY2sgPSBbXVxuICB2YXIgX21zZ1F1ZXVlID0gW11cblxuICBjb25zdCBHRVRfTUVTU0FHRV9UT0tFTiA9IFwiR0VUX01FU1NBR0VfVE9LRU5cIlxuXG4gIGZ1bmN0aW9uIGNvbm5lY3QocHJvdG9jb2wpIHtcbiAgICBfcHJvdG9jb2wgPSBwcm90b2NvbCA/IHByb3RvY29sIDogX3Byb3RvY29sXG4gICAgdmFyIHRva2VuID0gd2luZG93LnByb21wdCA/IHByb21wdChHRVRfTUVTU0FHRV9UT0tFTikgOiBfX2dsb2JhbC5wcm9tcHQoR0VUX01FU1NBR0VfVE9LRU4pXG4gICAgd3MgPSBuZXcgV2ViU29ja2V0KF91cmwsIGAke19wcm90b2NvbH0jJHt0b2tlbn0jYClcbiAgICB3cy5vbm9wZW4gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBsZXQgd2FpdEZvclNlbmQgPSBbXS5jb25jYXQoX21zZ1F1ZXVlKVxuICAgICAgX21zZ1F1ZXVlID0gW11cblxuICAgICAgd2FpdEZvclNlbmQuZm9yRWFjaChtc2cgPT4ge1xuICAgICAgICBzZW5kKG1zZylcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgd3Mub25jbG9zZSA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIHdzID0gbnVsbFxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbm5lY3QocHJvdG9jb2wpXG4gICAgICB9LCAxMDApXG4gICAgfVxuXG4gICAgd3Mub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IG1zZyA9IEpTT04ucGFyc2UoZXZ0LmRhdGEpXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAgIHV0aWxzLmxvZygnd3Mub25tZXNzYWdlJywgbXNnLmNvbW1hbmQsIG1zZy5kYXRhLmV2ZW50TmFtZSlcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjayhtc2cpXG4gICAgICAgIGVtaXQobXNnKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvL1RPRE86IGxvZyBlcnJvclxuICAgICAgICBjb25zb2xlLmVycm9yKCd3cy5vbm1lc3NhZ2UgY2IgZXJyb3InLCBlKVxuICAgICAgICBiYWRqc1JlcG9ydGVyLnJlcG9ydChlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbmQobXNnKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICB1dGlscy5sb2coJ3dzLnNlbmQnLCBtc2cpXG4gICAgfVxuICAgIGlmICh3cyAmJiB3cy5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAgICAgd3Muc2VuZChKU09OLnN0cmluZ2lmeShtc2cpKVxuICAgIH0gZWxzZSB7XG4gICAgICBfbXNnUXVldWUucHVzaChtc2cpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FsbGJhY2sobXNnKSB7XG4gICAgX2NhbGxiYWNrLmZvckVhY2goZm4gPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4obXNnKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpXG4gICAgICAgIGJhZGpzUmVwb3J0ZXIucmVwb3J0KGUpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IHJlZ2lzdGVyQ2FsbGJhY2sgPSAoY2FsbGJhY2spID0+IHtcbiAgICBfY2FsbGJhY2sucHVzaChjYWxsYmFjaylcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXQobXNnKSB7XG4gICAgaWYgKG1zZy5jb21tYW5kID09PSAnVFJBTlNGRVInICYmIG1zZy5kYXRhKSB7XG4gICAgICBjb25zdCB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50XG4gICAgICBjb25zdCBldmVudE5hbWUgPSBtc2cuZGF0YS5ldmVudE5hbWVcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICB1dGlscy5sb2codWEuaW5kZXhPZignYXBwc2VydmljZScpID4gLTEgPyAnQXBwU2VydmljZScgOiAnV2ViVmlldycsICdSZWNlaXZlIE1zZzonLCBldmVudE5hbWUpXG4gICAgICB9XG4gICAgICBlZS5lbWl0KGV2ZW50TmFtZSwgbXNnLmRhdGEuZGF0YSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwdWIoZXZlbnROYW1lLCBkYXRhID0ge30pIHtcbiAgICBjb25zdCB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50XG4gICAgc2VuZCh7XG4gICAgICBjb21tYW5kOiAnVFJBTlNGRVInLFxuICAgICAgZGF0YToge1xuICAgICAgICBldmVudE5hbWUsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGZyb206IHVhLmluZGV4T2YoJ2FwcHNlcnZpY2UnKSA+IC0xID8gJ2FwcHNlcnZpY2UnIDogJ3dlYnZpZXcnLFxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBzdWIoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgIHJlZ2lzdGVyQ2FsbGJhY2sobXNnID0+IHtcbiAgICAgIGlmIChtc2cuY29tbWFuZCAhPT0gJ1RSQU5TRkVSJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmICghbXNnLmRhdGEpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignbWVzc2FnZXIgc3ViIGVycm9yOiBubyBkYXRhIGZpZWxkLicpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKG1zZy5kYXRhLmV2ZW50TmFtZSA9PT0gZXZlbnROYW1lKSB7XG4gICAgICAgIGNhbGxiYWNrKG1zZy5kYXRhKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNvbm5lY3QsXG4gICAgc2VuZCxcbiAgICByZWdpc3RlckNhbGxiYWNrLFxuICAgIGdldFdzKCkge1xuICAgICAgcmV0dXJuIHdzXG4gICAgfSxcbiAgICBwdWIsXG4gICAgc3ViLFxuICB9XG59KCkpXG5cbm1vZHVsZS5leHBvcnRzID0gbWVzc2FnZXJcbiIsImNvbnN0IGVlID0gcmVxdWlyZSgnLi9ldmVudGVtaXR0ZXInKVxuXG5sZXQgYXBwSWQgPSAnJ1xubGV0IGxpYlZlcnNpb24gPSAnJ1xuXG5lZS5vbignYXBwc2VydmljZS1vbmxvYWQnLCBmdW5jdGlvbihkYXRhKSB7XG4gIGFwcElkID0gZGF0YS5hcHBJZFxuICBsaWJWZXJzaW9uID0gZGF0YS5saWJWZXJzaW9uXG59KVxuXG4vKiFcbiAqIEBtb2R1bGUgcmVwb3J0XG4gKiBAYXV0aG9yIGthZWwsIGNocmlzY2FpXG4gKiBAZGF0ZSBAREFURVxuICogQ29weXJpZ2h0IChjKSAyMDE0IGthZWwsIGNocmlzY2FpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cbnZhciBCSl9SRVBPUlQgPSAoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gICAgaWYgKGdsb2JhbC5CSl9SRVBPUlQpIHJldHVybiBnbG9iYWwuQkpfUkVQT1JUO1xuXG4gICAgdmFyIF9lcnJvciA9IFtdO1xuICAgIHZhciBfZXJyb3JfbWFwID0ge307XG4gICAgdmFyIF9jb25maWcgPSB7XG4gICAgICAgIGlkOiAwLCAvLyDkuIrmiqUgaWRcbiAgICAgICAgdWluOiAwLCAvLyB1c2VyIGlkXG4gICAgICAgIHVybDogXCJcIiwgLy8g5LiK5oqlIOaOpeWPo1xuICAgICAgICBjb21ibzogMSwgLy8g5piv5ZCm5ZCI5bm2ICEwLeWQiOW5tiAwLeS4jeWQiOW5tlxuICAgICAgICBleHQ6IG51bGwsIC8vIOaJqeWxleWPguaVsCDnlKjkuo7oh6rlrprkuYnkuIrmiqVcbiAgICAgICAgbGV2ZWw6IDQsIC8vIOmUmeivr+e6p+WIqyAxLWRlYnVnIDItaW5mbyA0LWVycm9yXG4gICAgICAgIGlnbm9yZTogW10sIC8vIOW/veeVpeafkOS4qumUmeivrywg5pSv5oyBIFJlZ2V4cCDlkowgRnVuY3Rpb25cbiAgICAgICAgcmFuZG9tOiAxLCAvLyDmir3moLcgKDAtMV0gMS3lhajph49cbiAgICAgICAgZGVsYXk6IDEwMDAsIC8vIOW7tui/n+S4iuaKpSBjb21ibyDkuLogdHJ1ZSDml7bmnInmlYhcbiAgICAgICAgc3VibWl0OiBudWxsLCAvLyDoh6rlrprkuYnkuIrmiqXmlrnlvI9cbiAgICAgICAgcmVwZWF0OiA1LCAvLyDph43lpI3kuIrmiqXmrKHmlbAo5a+55LqO5ZCM5LiA5Liq6ZSZ6K+v6LaF6L+H5aSa5bCR5qyh5LiN5LiK5oqlKVxuICAgICAgICBnbG9iYWxFcnJvcjogdHJ1ZSxcbiAgICB9O1xuXG4gICAgdmFyIF9pc09CSkJ5VHlwZSA9IGZ1bmN0aW9uKG8sIHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSA9PT0gXCJbb2JqZWN0IFwiICsgKHR5cGUgfHwgXCJPYmplY3RcIikgKyBcIl1cIjtcbiAgICB9O1xuXG4gICAgdmFyIF9pc09CSiA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7XG4gICAgICAgIHJldHVybiB0eXBlID09PSBcIm9iamVjdFwiICYmICEhb2JqO1xuICAgIH07XG5cbiAgICB2YXIgX2lzRW1wdHkgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgaWYgKG9iaiA9PT0gbnVsbCkgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChfaXNPQkpCeVR5cGUob2JqLCBcIk51bWJlclwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhb2JqO1xuICAgIH07XG5cbiAgICB2YXIgX2xpc3Rlbkdsb2JhbEVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvcmdFcnJvciA9IHdpbmRvdy5vbmVycm9yO1xuICAgICAgICAvLyByZXdyaXRlIHdpbmRvdy5vZXJyb3JcbiAgICAgICAgd2luZG93Lm9uZXJyb3IgPSBmdW5jdGlvbihtc2csIHVybCwgbGluZSwgY29sLCBlcnJvcikge1xuICAgICAgICAgICAgdmFyIG5ld01zZyA9IG1zZztcblxuICAgICAgICAgICAgaWYgKGVycm9yICYmIGVycm9yLnN0YWNrKSB7XG4gICAgICAgICAgICAgICAgbmV3TXNnID0gX3Byb2Nlc3NTdGFja01zZyhlcnJvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfaXNPQkpCeVR5cGUobmV3TXNnLCBcIkV2ZW50XCIpKSB7XG4gICAgICAgICAgICAgICAgbmV3TXNnICs9IG5ld01zZy50eXBlID9cbiAgICAgICAgICAgICAgICAgICAgKFwiLS1cIiArIG5ld01zZy50eXBlICsgXCItLVwiICsgKG5ld01zZy50YXJnZXQgP1xuICAgICAgICAgICAgICAgICAgICAgICAgKG5ld01zZy50YXJnZXQudGFnTmFtZSArIFwiOjpcIiArIG5ld01zZy50YXJnZXQuc3JjKSA6IFwiXCIpKSA6IFwiXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlcG9ydC5wdXNoKHtcbiAgICAgICAgICAgICAgICBtc2c6IG5ld01zZyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHVybCxcbiAgICAgICAgICAgICAgICByb3dOdW06IGxpbmUsXG4gICAgICAgICAgICAgICAgY29sTnVtOiBjb2xcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfc2VuZCgpO1xuICAgICAgICAgICAgb3JnRXJyb3IgJiYgb3JnRXJyb3IuYXBwbHkod2luZG93LCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBfcHJvY2Vzc0Vycm9yID0gZnVuY3Rpb24oZXJyT2JqKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZXJyT2JqLnN0YWNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IGVyck9iai5zdGFjay5tYXRjaChcImh0dHBzPzovL1teXFxuXStcIik7XG4gICAgICAgICAgICAgICAgdXJsID0gdXJsID8gdXJsWzBdIDogXCJcIjtcbiAgICAgICAgICAgICAgICB2YXIgcm93Q29scyA9IHVybC5tYXRjaChcIjooXFxcXGQrKTooXFxcXGQrKVwiKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJvd0NvbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93Q29scyA9IFswLCAwLCAwXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgc3RhY2sgPSBfcHJvY2Vzc1N0YWNrTXNnKGVyck9iaik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbXNnOiBzdGFjayxcbiAgICAgICAgICAgICAgICAgICAgcm93TnVtOiByb3dDb2xzWzFdLFxuICAgICAgICAgICAgICAgICAgICBjb2xOdW06IHJvd0NvbHNbMl0sXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogdXJsLnJlcGxhY2Uocm93Q29sc1swXSwgXCJcIilcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL2llIOeLrOaciSBlcnJvciDlr7nosaHkv6Hmga/vvIx0cnktY2F0Y2gg5o2V6I635Yiw6ZSZ6K+v5L+h5oGv5Lyg6L+H5p2l77yM6YCg5oiQ5rKh5pyJbXNnXG4gICAgICAgICAgICAgICAgaWYgKGVyck9iai5uYW1lICYmIGVyck9iai5tZXNzYWdlICYmIGVyck9iai5kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXNnOiBKU09OLnN0cmluZ2lmeShlcnJPYmopXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJPYmo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIGVyck9iajtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgX3Byb2Nlc3NTdGFja01zZyA9IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHZhciBzdGFjayA9IGVycm9yLnN0YWNrXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxuL2dpLCBcIlwiKVxuICAgICAgICAgICAgLnNwbGl0KC9cXGJhdFxcYi8pXG4gICAgICAgICAgICAuc2xpY2UoMCwgOSlcbiAgICAgICAgICAgIC5qb2luKFwiQFwiKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcP1teOl0rL2dpLCBcIlwiKTtcbiAgICAgICAgdmFyIG1zZyA9IGVycm9yLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChzdGFjay5pbmRleE9mKG1zZykgPCAwKSB7XG4gICAgICAgICAgICBzdGFjayA9IG1zZyArIFwiQFwiICsgc3RhY2s7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YWNrO1xuICAgIH07XG5cbiAgICB2YXIgX2Vycm9yX3Rvc3RyaW5nID0gZnVuY3Rpb24oZXJyb3IsIGluZGV4KSB7XG4gICAgICAgIHZhciBwYXJhbSA9IFtdO1xuICAgICAgICB2YXIgcGFyYW1zID0gW107XG4gICAgICAgIHZhciBzdHJpbmdpZnkgPSBbXTtcbiAgICAgICAgaWYgKF9pc09CSihlcnJvcikpIHtcbiAgICAgICAgICAgIGVycm9yLmxldmVsID0gZXJyb3IubGV2ZWwgfHwgX2NvbmZpZy5sZXZlbDtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBlcnJvcikge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGVycm9yW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKCFfaXNFbXB0eSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9pc09CSih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFwiW0JKX1JFUE9SVCBkZXRlY3QgdmFsdWUgc3RyaW5naWZ5IGVycm9yXSBcIiArIGVyci50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ2lmeS5wdXNoKGtleSArIFwiOlwiICsgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBwYXJhbS5wdXNoKGtleSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKGtleSArIFwiW1wiICsgaW5kZXggKyBcIl09XCIgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtc2dbMF09bXNnJnRhcmdldFswXT10YXJnZXQgLS0gY29tYm8gcmVwb3J0XG4gICAgICAgIC8vIG1zZzptc2csdGFyZ2V0OnRhcmdldCAtLSBpZ25vcmVcbiAgICAgICAgLy8gbXNnPW1zZyZ0YXJnZXQ9dGFyZ2V0IC0tIHJlcG9ydCB3aXRoIG91dCBjb21ib1xuICAgICAgICByZXR1cm4gW3BhcmFtcy5qb2luKFwiJlwiKSwgc3RyaW5naWZ5LmpvaW4oXCIsXCIpLCBwYXJhbS5qb2luKFwiJlwiKV07XG4gICAgfTtcblxuICAgIHZhciBfaW1ncyA9IFtdO1xuICAgIHZhciBfc3VibWl0ID0gZnVuY3Rpb24odXJsKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0JKX1JFUE9SVF0gc3VibWl0JywgdXJsKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2NvbmZpZy5zdWJtaXQpIHtcbiAgICAgICAgICAgIF9jb25maWcuc3VibWl0KHVybCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgX2ltZztcbiAgICAgICAgICAgIGlmICh0eXBlb2YgSW1hZ2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgX2ltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBfaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIF9pbWdzLnB1c2goX2ltZyk7XG4gICAgICAgICAgICBpZiAoX2ltZykge1xuICAgICAgICAgICAgICAgIF9pbWcuc3JjID0gdXJsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBfaXNfcmVwZXJ0ID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgaWYgKCFfaXNPQkooZXJyb3IpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgdmFyIG1zZyA9IGVycm9yLm1zZztcbiAgICAgICAgdmFyIHRpbWVzID0gX2Vycm9yX21hcFttc2ddID0gKHBhcnNlSW50KF9lcnJvcl9tYXBbbXNnXSwgMTApIHx8IDApICsgMTtcbiAgICAgICAgcmV0dXJuIHRpbWVzID4gX2NvbmZpZy5yZXBlYXQ7XG4gICAgfTtcblxuICAgIHZhciBlcnJvcl9saXN0ID0gW107XG4gICAgdmFyIGNvbWJvVGltZW91dCA9IDA7XG4gICAgdmFyIF9zZW5kID0gZnVuY3Rpb24oaXNSZW9wcnROb3cpIHtcbiAgICAgICAgaWYgKCFfY29uZmlnLnJlcG9ydCkgcmV0dXJuO1xuXG4gICAgICAgIHdoaWxlIChfZXJyb3IubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgaXNJZ25vcmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBlcnJvciA9IF9lcnJvci5zaGlmdCgpO1xuICAgICAgICAgICAgLy8g6YeN5aSN5LiK5oqlXG4gICAgICAgICAgICBpZiAoX2lzX3JlcGVydChlcnJvcikpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIGVycm9yX3N0ciA9IF9lcnJvcl90b3N0cmluZyhlcnJvciwgZXJyb3JfbGlzdC5sZW5ndGgpO1xuICAgICAgICAgICAgaWYgKF9pc09CSkJ5VHlwZShfY29uZmlnLmlnbm9yZSwgXCJBcnJheVwiKSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gX2NvbmZpZy5pZ25vcmUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBydWxlID0gX2NvbmZpZy5pZ25vcmVbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmICgoX2lzT0JKQnlUeXBlKHJ1bGUsIFwiUmVnRXhwXCIpICYmIHJ1bGUudGVzdChlcnJvcl9zdHJbMV0pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKF9pc09CSkJ5VHlwZShydWxlLCBcIkZ1bmN0aW9uXCIpICYmIHJ1bGUoZXJyb3IsIGVycm9yX3N0clsxXSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0lnbm9yZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNJZ25vcmUpIHtcbiAgICAgICAgICAgICAgICBpZiAoX2NvbmZpZy5jb21ibykge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcl9saXN0LnB1c2goZXJyb3Jfc3RyWzBdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfc3VibWl0KF9jb25maWcucmVwb3J0ICsgZXJyb3Jfc3RyWzJdICsgXCImX3Q9XCIgKyAoK25ldyBEYXRlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF9jb25maWcub25SZXBvcnQgJiYgKF9jb25maWcub25SZXBvcnQoX2NvbmZpZy5pZCwgZXJyb3IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOWQiOW5tuS4iuaKpVxuICAgICAgICB2YXIgY291bnQgPSBlcnJvcl9saXN0Lmxlbmd0aDtcbiAgICAgICAgaWYgKGNvdW50KSB7XG4gICAgICAgICAgICB2YXIgY29tYm9SZXBvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoY29tYm9UaW1lb3V0KTtcbiAgICAgICAgICAgICAgICBfc3VibWl0KF9jb25maWcucmVwb3J0ICsgZXJyb3JfbGlzdC5qb2luKFwiJlwiKSArIFwiJmNvdW50PVwiICsgZXJyb3JfbGlzdC5sZW5ndGggKyBcIiZfdD1cIiArICgrbmV3IERhdGUpKTtcbiAgICAgICAgICAgICAgICBjb21ib1RpbWVvdXQgPSAwO1xuICAgICAgICAgICAgICAgIGVycm9yX2xpc3QgPSBbXTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChpc1Jlb3BydE5vdykge1xuICAgICAgICAgICAgICAgIGNvbWJvUmVwb3J0KCk7IC8vIOeri+WNs+S4iuaKpVxuICAgICAgICAgICAgfSBlbHNlIGlmICghY29tYm9UaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgY29tYm9UaW1lb3V0ID0gc2V0VGltZW91dChjb21ib1JlcG9ydCwgX2NvbmZpZy5kZWxheSk7IC8vIOW7tui/n+S4iuaKpVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXBvcnQgPSBnbG9iYWwuQkpfUkVQT1JUID0ge1xuICAgICAgICBwdXNoOiBmdW5jdGlvbihtc2cpIHsgLy8g5bCG6ZSZ6K+v5o6o5Yiw57yT5a2Y5rGgXG4gICAgICAgICAgICAvLyDmir3moLdcbiAgICAgICAgICAgIGlmIChNYXRoLnJhbmRvbSgpID49IF9jb25maWcucmFuZG9tKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcG9ydDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGRhdGEgPSBfaXNPQkoobXNnKSA/IF9wcm9jZXNzRXJyb3IobXNnKSA6IHtcbiAgICAgICAgICAgICAgICBtc2c6IG1zZ1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gZXh0IOaciem7mOiupOWAvCwg5LiU5LiK5oql5LiN5YyF5ZCrIGV4dCwg5L2/55So6buY6K6kIGV4dFxuICAgICAgICAgICAgaWYgKF9jb25maWcuZXh0ICYmICFkYXRhLmV4dCkge1xuICAgICAgICAgICAgICAgIGRhdGEuZXh0ID0gX2NvbmZpZy5leHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGZyb20g5pS55oiQ6L+Z5qC377yM5Y6f5p2l55qEIGxvY2F0aW9uLmhyZWYg5Zyo6L+Z6YeM5peg5oSP5LmJXG4gICAgICAgICAgICBkYXRhLmZyb20gPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdmVyc2lvbjogX2NvbmZpZy5leHRlbmQgJiYgX2NvbmZpZy5leHRlbmQudmVyc2lvbixcbiAgICAgICAgICAgICAgICBhcHBJZDogdHlwZW9mIF9fd3hDb25maWcgIT09ICd1bmRlZmluZWQnICYmIF9fd3hDb25maWcuYWNjb3VudEluZm8gJiYgX193eENvbmZpZy5hY2NvdW50SW5mby5hcHBJZCB8fCBhcHBJZCxcbiAgICAgICAgICAgICAgICBsaWJWZXJzaW9uOiB0eXBlb2YgX19hcHBTZXJ2aWNlU0RLX18gIT09ICd1bmRlZmluZWQnID9cbiAgICAgICAgICAgICAgICAgICAgKF9fYXBwU2VydmljZVNES19fLnd4ICYmIF9fYXBwU2VydmljZVNES19fLnd4LnZlcnNpb24gJiYgX19hcHBTZXJ2aWNlU0RLX18ud3gudmVyc2lvbi52ZXJzaW9uKSA6XG4gICAgICAgICAgICAgICAgICAgICh0eXBlb2Ygd3ggIT09ICd1bmRlZmluZWQnID8gKHd4LnZlcnNpb24gJiYgd3gudmVyc2lvbi52ZXJzaW9uKSA6IGxpYlZlcnNpb24pLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF9lcnJvci5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgX3NlbmQoKTtcbiAgICAgICAgICAgIHJldHVybiByZXBvcnQ7XG4gICAgICAgIH0sXG4gICAgICAgIHJlcG9ydDogZnVuY3Rpb24obXNnKSB7IC8vIGVycm9yIHJlcG9ydFxuICAgICAgICAgICAgbXNnICYmIHJlcG9ydC5wdXNoKG1zZyk7XG4gICAgICAgICAgICBfc2VuZCh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiByZXBvcnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGluZm86IGZ1bmN0aW9uKG1zZykgeyAvLyBpbmZvIHJlcG9ydFxuICAgICAgICAgICAgaWYgKCFtc2cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVwb3J0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF9pc09CSihtc2cpKSB7XG4gICAgICAgICAgICAgICAgbXNnLmxldmVsID0gMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbXNnID0ge1xuICAgICAgICAgICAgICAgICAgICBtc2c6IG1zZyxcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWw6IDJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVwb3J0LnB1c2gobXNnKTtcbiAgICAgICAgICAgIHJldHVybiByZXBvcnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGRlYnVnOiBmdW5jdGlvbihtc2cpIHsgLy8gZGVidWcgcmVwb3J0XG4gICAgICAgICAgICBpZiAoIW1zZykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXBvcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX2lzT0JKKG1zZykpIHtcbiAgICAgICAgICAgICAgICBtc2cubGV2ZWwgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtc2cgPSB7XG4gICAgICAgICAgICAgICAgICAgIG1zZzogbXNnLFxuICAgICAgICAgICAgICAgICAgICBsZXZlbDogMVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXBvcnQucHVzaChtc2cpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcG9ydDtcbiAgICAgICAgfSxcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oY29uZmlnKSB7IC8vIOWIneWni+WMllxuICAgICAgICAgICAgaWYgKF9pc09CSihjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGNvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICBfY29uZmlnW2tleV0gPSBjb25maWdba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyDmsqHmnInorr7nva5pZOWwhuS4jeS4iuaKpVxuICAgICAgICAgICAgdmFyIGlkID0gcGFyc2VJbnQoX2NvbmZpZy5pZCwgMTApO1xuICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgLy8gc2V0IGRlZmF1bHQgcmVwb3J0IHVybCBhbmQgdWluXG4gICAgICAgICAgICAgICAgaWYgKC9xcVxcLmNvbSQvZ2kudGVzdChsb2NhdGlvbi5ob3N0bmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfY29uZmlnLnVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbmZpZy51cmwgPSBcIi8vYmFkanMyLnFxLmNvbS9iYWRqc1wiO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfY29uZmlnLnVpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbmZpZy51aW4gPSBwYXJzZUludCgoZG9jdW1lbnQuY29va2llLm1hdGNoKC9cXGJ1aW49XFxEKyhcXGQrKS8pIHx8IFtdKVsxXSwgMTApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX2NvbmZpZy5yZXBvcnQgPSAoX2NvbmZpZy51cmwgfHwgXCIvYmFkanNcIikgK1xuICAgICAgICAgICAgICAgICAgICBcIj9pZD1cIiArIGlkICtcbiAgICAgICAgICAgICAgICAgICAgXCImdWluPVwiICsgX2NvbmZpZy51aW4gK1xuICAgICAgICAgICAgICAgICAgICAvLyBcIiZmcm9tPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGxvY2F0aW9uLmhyZWYpICtcbiAgICAgICAgICAgICAgICAgICAgXCImXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIGhhZCBlcnJvciBpbiBjYWNoZSAsIHJlcG9ydCBub3dcbiAgICAgICAgICAgIGlmIChfZXJyb3IubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgX3NlbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfY29uZmlnLmdsb2JhbEVycm9yKSB7XG4gICAgICAgICAgICAgICAgX2xpc3Rlbkdsb2JhbEVycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVwb3J0O1xuICAgICAgICB9LFxuXG4gICAgICAgIF9fb25lcnJvcl9fOiBnbG9iYWwub25lcnJvclxuICAgIH07XG5cbiAgICB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLmVycm9yICYmIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlcnIgPSAoKGxvY2F0aW9uLmhhc2ggfHwgXCJcIikubWF0Y2goLyhbIyZdKUJKX0VSUk9SPShbXiYkXSspLykgfHwgW10pWzJdO1xuICAgICAgICBlcnIgJiYgY29uc29sZS5lcnJvcihcIkJKX0VSUk9SXCIsIGRlY29kZVVSSUNvbXBvbmVudChlcnIpLnJlcGxhY2UoLyg6XFxkKzpcXGQrKVxccyovZywgXCIkMVxcblwiKSk7XG4gICAgfSwgMCk7XG5cbiAgICByZXR1cm4gcmVwb3J0O1xuXG59KHRoaXMpKTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJKX1JFUE9SVDtcbn1cbjsoZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgICBpZiAoIWdsb2JhbC5CSl9SRVBPUlQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcInBsZWFzZSBsb2FkIGJnLXJlcG9ydCBmaXJzdFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBfb250aHJvdyA9IGZ1bmN0aW9uKGVyck9iaikge1xuICAgICAgICBnbG9iYWwuQkpfUkVQT1JULnB1c2goZXJyT2JqKTtcbiAgICB9O1xuXG4gICAgdmFyIHRyeUpzID0ge307XG4gICAgZ2xvYmFsLkJKX1JFUE9SVC50cnlKcyA9IGZ1bmN0aW9uKHRocm93Q2IpIHtcbiAgICAgICAgdGhyb3dDYiAmJiAoX29udGhyb3cgPSB0aHJvd0NiKTtcbiAgICAgICAgcmV0dXJuIHRyeUpzO1xuICAgIH07XG5cbiAgICAvLyBtZXJnZVxuICAgIHZhciBfbWVyZ2UgPSBmdW5jdGlvbihvcmcsIG9iaikge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICBvcmdba2V5XSA9IG9ialtrZXldO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIGZ1bmN0aW9uIG9yIG5vdFxuICAgIHZhciBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKGZvbykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGZvbyA9PT0gXCJmdW5jdGlvblwiO1xuICAgIH07XG5cbiAgICB2YXIgdGltZW91dGtleTtcblxuICAgIHZhciBjYXQgPSBmdW5jdGlvbihmb28sIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9vLmFwcGx5KHRoaXMsIGFyZ3MgfHwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG5cbiAgICAgICAgICAgICAgICBfb250aHJvdyhlcnJvcik7XG5cbiAgICAgICAgICAgICAgICAvL3NvbWUgYnJvd3NlciB0aHJvdyBlcnJvciAoY2hyb21lKSAsIGNhbiBub3QgZmluZCBlcnJvciB3aGVyZSBpdCB0aHJvdywgIHNvIHByaW50IGl0IG9uIGNvbnNvbGU7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLnN0YWNrICYmIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW0JKLVJFUE9SVF1cIiwgZXJyb3Iuc3RhY2spO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGhhbmcgdXAgYnJvd3NlciBhbmQgdGhyb3cgLCBidXQgaXQgc2hvdWxkIHRyaWdnZXIgb25lcnJvciAsIHNvIHJld3JpdGUgb25lcnJvciB0aGVuIHJlY292ZXIgaXRcbiAgICAgICAgICAgICAgICBpZiAoIXRpbWVvdXRrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yZ09uZXJyb3IgPSBnbG9iYWwub25lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLm9uZXJyb3IgPSBmdW5jdGlvbigpIHt9O1xuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0a2V5ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC5vbmVycm9yID0gb3JnT25lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXRrZXkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICB2YXIgY2F0QXJncyA9IGZ1bmN0aW9uKGZvbykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYXJnLCBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhcmcgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgX2lzRnVuY3Rpb24oYXJnKSAmJiAoYXJnID0gY2F0KGFyZykpO1xuICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZvby5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgdmFyIGNhdFRpbWVvdXQgPSBmdW5jdGlvbihmb28pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNiLCB0aW1lb3V0KSB7XG4gICAgICAgICAgICAvLyBmb3Igc2V0VGltZW91dChzdHJpbmcsIGRlbGF5KVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNiID0gbmV3IEZ1bmN0aW9uKGNiKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgICAgICAgICAgLy8gZm9yIHNldFRpbWVvdXQoZnVuY3Rpb24sIGRlbGF5LCBwYXJhbTEsIC4uLilcbiAgICAgICAgICAgIGNiID0gY2F0KGNiLCBhcmdzLmxlbmd0aCAmJiBhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiBmb28oY2IsIHRpbWVvdXQpO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBtYWtlQXJnc1RyeVxuICAgICAqIHdyYXAgYSBmdW5jdGlvbidzIGFyZ3VtZW50cyB3aXRoIHRyeSAmIGNhdGNoXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm9vXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNlbGZcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICovXG4gICAgdmFyIG1ha2VBcmdzVHJ5ID0gZnVuY3Rpb24oZm9vLCBzZWxmKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhcmcsIHRtcCwgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgIF9pc0Z1bmN0aW9uKGFyZykgJiYgKHRtcCA9IGNhdChhcmcpKSAmJlxuICAgICAgICAgICAgICAgICAgICAoYXJnLnRyeVdyYXAgPSB0bXApICYmIChhcmcgPSB0bXApO1xuICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZvby5hcHBseShzZWxmIHx8IHRoaXMsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBtYWtlT2JqVHJ5XG4gICAgICogd3JhcCBhIG9iamVjdCdzIGFsbCB2YWx1ZSB3aXRoIHRyeSAmIGNhdGNoXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm9vXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNlbGZcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICovXG4gICAgdmFyIG1ha2VPYmpUcnkgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgdmFyIGtleSwgdmFsdWU7XG4gICAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICAgICAgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgICAgICAgIGlmIChfaXNGdW5jdGlvbih2YWx1ZSkpIG9ialtrZXldID0gY2F0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiB3cmFwIGpxdWVyeSBhc3luYyBmdW5jdGlvbiAsZXhwIDogZXZlbnQuYWRkICwgZXZlbnQucmVtb3ZlICwgYWpheFxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0cnlKcy5zcHlKcXVlcnkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8kID0gZ2xvYmFsLiQ7XG5cbiAgICAgICAgaWYgKCFfJCB8fCAhXyQuZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnlKcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfYWRkLCBfcmVtb3ZlO1xuICAgICAgICBpZiAoXyQuemVwdG8pIHtcbiAgICAgICAgICAgIF9hZGQgPSBfJC5mbi5vbiwgX3JlbW92ZSA9IF8kLmZuLm9mZjtcblxuICAgICAgICAgICAgXyQuZm4ub24gPSBtYWtlQXJnc1RyeShfYWRkKTtcbiAgICAgICAgICAgIF8kLmZuLm9mZiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBhcmcsIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICBfaXNGdW5jdGlvbihhcmcpICYmIGFyZy50cnlXcmFwICYmIChhcmcgPSBhcmcudHJ5V3JhcCk7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gX3JlbW92ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cualF1ZXJ5KSB7XG4gICAgICAgICAgICBfYWRkID0gXyQuZXZlbnQuYWRkLCBfcmVtb3ZlID0gXyQuZXZlbnQucmVtb3ZlO1xuXG4gICAgICAgICAgICBfJC5ldmVudC5hZGQgPSBtYWtlQXJnc1RyeShfYWRkKTtcbiAgICAgICAgICAgIF8kLmV2ZW50LnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBhcmcsIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICBfaXNGdW5jdGlvbihhcmcpICYmIGFyZy50cnlXcmFwICYmIChhcmcgPSBhcmcudHJ5V3JhcCk7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gX3JlbW92ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX2FqYXggPSBfJC5hamF4O1xuXG4gICAgICAgIGlmIChfYWpheCkge1xuICAgICAgICAgICAgXyQuYWpheCA9IGZ1bmN0aW9uKHVybCwgc2V0dGluZykge1xuICAgICAgICAgICAgICAgIGlmICghc2V0dGluZykge1xuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nID0gdXJsO1xuICAgICAgICAgICAgICAgICAgICB1cmwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1ha2VPYmpUcnkoc2V0dGluZyk7XG4gICAgICAgICAgICAgICAgaWYgKHVybCkgcmV0dXJuIF9hamF4LmNhbGwoXyQsIHVybCwgc2V0dGluZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9hamF4LmNhbGwoXyQsIHNldHRpbmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnlKcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogd3JhcCBhbWQgb3IgY29tbW9uanMgb2YgZnVuY3Rpb24gICxleHAgOiAgZGVmaW5lICwgcmVxdWlyZSAsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHRyeUpzLnNweU1vZHVsZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF9yZXF1aXJlID0gZ2xvYmFsLnJlcXVpcmUsXG4gICAgICAgICAgICBfZGVmaW5lID0gZ2xvYmFsLmRlZmluZTtcbiAgICAgICAgaWYgKF9kZWZpbmUgJiYgX2RlZmluZS5hbWQgJiYgX3JlcXVpcmUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5yZXF1aXJlID0gY2F0QXJncyhfcmVxdWlyZSk7XG4gICAgICAgICAgICBfbWVyZ2UoZ2xvYmFsLnJlcXVpcmUsIF9yZXF1aXJlKTtcbiAgICAgICAgICAgIGdsb2JhbC5kZWZpbmUgPSBjYXRBcmdzKF9kZWZpbmUpO1xuICAgICAgICAgICAgX21lcmdlKGdsb2JhbC5kZWZpbmUsIF9kZWZpbmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdsb2JhbC5zZWFqcyAmJiBfZGVmaW5lKSB7XG4gICAgICAgICAgICBnbG9iYWwuZGVmaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZywgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChfaXNGdW5jdGlvbihhcmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBjYXQoYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2VhanMgc2hvdWxkIHVzZSB0b1N0cmluZyBwYXJzZSBkZXBlbmRlbmNpZXMgLCBzbyByZXdyaXRlIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcudG9TdHJpbmcgPSAoZnVuY3Rpb24ob3JnQXJnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JnQXJnLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0oYXJndW1lbnRzW2ldKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBfZGVmaW5lLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZ2xvYmFsLnNlYWpzLnVzZSA9IGNhdEFyZ3MoZ2xvYmFsLnNlYWpzLnVzZSk7XG5cbiAgICAgICAgICAgIF9tZXJnZShnbG9iYWwuZGVmaW5lLCBfZGVmaW5lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnlKcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogd3JhcCBhc3luYyBvZiBmdW5jdGlvbiBpbiB3aW5kb3cgLCBleHAgOiBzZXRUaW1lb3V0ICwgc2V0SW50ZXJ2YWxcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICovXG4gICAgdHJ5SnMuc3B5U3lzdGVtID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGdsb2JhbC5zZXRUaW1lb3V0ID0gY2F0VGltZW91dChnbG9iYWwuc2V0VGltZW91dCk7XG4gICAgICAgIGdsb2JhbC5zZXRJbnRlcnZhbCA9IGNhdFRpbWVvdXQoZ2xvYmFsLnNldEludGVydmFsKTtcbiAgICAgICAgcmV0dXJuIHRyeUpzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiB3cmFwIGN1c3RvbSBvZiBmdW5jdGlvbiAsXG4gICAgICogQHBhcmFtIG9iaiAtIG9iaiBvciAgZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICovXG4gICAgdHJ5SnMuc3B5Q3VzdG9tID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIGlmIChfaXNGdW5jdGlvbihvYmopKSB7XG4gICAgICAgICAgICByZXR1cm4gY2F0KG9iaik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbWFrZU9ialRyeShvYmopO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIHJ1biBzcHlKcXVlcnkoKSBhbmQgc3B5TW9kdWxlcygpIGFuZCBzcHlTeXN0ZW0oKVxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0cnlKcy5zcHlBbGwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5SnNcbiAgICAgICAgICAgIC5zcHlKcXVlcnkoKVxuICAgICAgICAgICAgLnNweU1vZHVsZXMoKVxuICAgICAgICAgICAgLnNweVN5c3RlbSgpO1xuICAgICAgICByZXR1cm4gdHJ5SnM7XG4gICAgfTtcblxufSh0aGlzKSk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gJGdldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gJGdldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9ICRnZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBSZWZsZWN0QXBwbHkodGhpcy5saXN0ZW5lciwgdGhpcy50YXJnZXQsIGFyZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuLy8gRW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmIGFuZCBvbmx5IGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGlzdCwgZXZlbnRzLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbiIsImNvbnN0IGJhZGpzUmVwb3J0ZXIgPSByZXF1aXJlKCcuL2JhZGpzLXJlcG9ydCcpXG5jb25zdCBlZSA9IHJlcXVpcmUoJy4vZXZlbnRlbWl0dGVyJylcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbnZhciBtZXNzYWdlciA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBfY2FsbGJhY2sgPSBbXVxuICB2YXIgX3Byb3RvY29sID0gbnVsbFxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBtc2cgPSBlLmRhdGFcbiAgICAgIFxuICAgICAgaWYgKCFtc2cuZGF0YSkgcmV0dXJuXG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICB1dGlscy5sb2coJ3dpbmRvdy5vbm1lc3NhZ2UnLCBtc2cuY29tbWFuZCwgbXNnLmRhdGEuZXZlbnROYW1lKVxuICAgICAgfVxuICAgICAgY2FsbGJhY2sobXNnKVxuICAgICAgZW1pdChtc2cpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcignd2luZG93Lm9ubWVzc2FnZSBjYiBlcnJvcicsIGUpXG4gICAgICBiYWRqc1JlcG9ydGVyLnJlcG9ydChlKVxuICAgIH1cbiAgfSlcblxuICBmdW5jdGlvbiBjb25uZWN0KHByb3RvY29sKSB7XG4gICAgX3Byb3RvY29sID0gcHJvdG9jb2wgPyBwcm90b2NvbCA6IF9wcm90b2NvbFxuICB9XG5cbiAgZnVuY3Rpb24gc2VuZChjb21tYW5kLCBkYXRhKSB7XG4gICAgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZSh7XG4gICAgICBjb21tYW5kLFxuICAgICAgZGF0YSxcbiAgICAgIHByb3RvY29sOiBfcHJvdG9jb2xcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gY2FsbGJhY2sobXNnKSB7XG4gICAgX2NhbGxiYWNrLmZvckVhY2goZm4gPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4obXNnKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpXG4gICAgICAgIGJhZGpzUmVwb3J0ZXIucmVwb3J0KGUpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IHJlZ2lzdGVyQ2FsbGJhY2sgPSAoY2FsbGJhY2spID0+IHtcbiAgICBfY2FsbGJhY2sucHVzaChjYWxsYmFjaylcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXQobXNnKSB7XG4gICAgaWYgKG1zZy5jb21tYW5kID09PSAnVFJBTlNGRVInICYmIG1zZy5kYXRhKSB7XG4gICAgICBjb25zdCBldmVudE5hbWUgPSBtc2cuZGF0YS5ldmVudE5hbWVcbiAgICAgIGVlLmVtaXQoZXZlbnROYW1lLCBtc2cuZGF0YS5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHB1YihldmVudE5hbWUsIGRhdGEgPSB7fSkge1xuICAgIGNvbnN0IHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnRcbiAgICBzZW5kKCdUUkFOU0ZFUicsIHtcbiAgICAgIGV2ZW50TmFtZSxcbiAgICAgIGRhdGEsXG4gICAgICBmcm9tOiB1YS5pbmRleE9mKCdhcHBzZXJ2aWNlJykgPiAtMSA/ICdhcHBzZXJ2aWNlJyA6ICd3ZWJ2aWV3JyxcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gc3ViKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICByZWdpc3RlckNhbGxiYWNrKG1zZyA9PiB7XG4gICAgICBpZiAobXNnLmNvbW1hbmQgIT09ICdUUkFOU0ZFUicpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAoIW1zZy5kYXRhKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ21lc3NhZ2VyIHN1YiBlcnJvcjogbm8gZGF0YSBmaWVsZC4nKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmIChtc2cuZGF0YS5ldmVudE5hbWUgPT09IGV2ZW50TmFtZSkge1xuICAgICAgICBjYWxsYmFjayhtc2cuZGF0YSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjb25uZWN0LFxuICAgIHNlbmQsXG4gICAgcmVnaXN0ZXJDYWxsYmFjayxcbiAgICBwdWIsXG4gICAgc3ViLFxuICB9XG59KCkpXG5cbm1vZHVsZS5leHBvcnRzID0gbWVzc2FnZXJcbiIsImNvbnN0IHsgY29tcGFyZVZlcnNpb24gfSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzJylcbmNvbnN0IGJhZGpzUmVwb3J0ZXIgPSByZXF1aXJlKCcuLi8uLi9iYWRqcy1yZXBvcnQnKVxuXG4vKlxuICog5LuOIG9iaiDkuK3mib7lh7rnrKblkIjmnaHku7bnmoQgdmVyc2lvbiDliJfooahcbiAqL1xubW9kdWxlLmV4cG9ydHMuZ2V0VmFsaWRWZXJzaW9ucyA9IGJhZGpzUmVwb3J0ZXIudHJ5SnMoKS5zcHlDdXN0b20oZnVuY3Rpb24oU0RLVmVyc2lvbiwgbmFtZSwgb2JqKSB7XG4gIGlmICghbmFtZSkge1xuICAgIHJldHVybiBbXVxuICB9XG5cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iailcbiAgY29uc3QgaW5kZXggPSBrZXlzLmluZGV4T2YobmFtZSlcblxuICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgcmV0dXJuIFtdXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaXRlbSA9IG9ialtrZXlzW2luZGV4XV1cblxuICAgIGNvbnN0IHZhbGlkVmVyc2lvbnMgPSBPYmplY3Qua2V5cyhpdGVtKS5maWx0ZXIoKGN1cnJlbnRWZXJzaW9uKSA9PiB7XG4gICAgICByZXR1cm4gY29tcGFyZVZlcnNpb24oY3VycmVudFZlcnNpb24sIFNES1ZlcnNpb24pIDw9IDBcbiAgICB9KVxuXG4gICAgcmV0dXJuIHZhbGlkVmVyc2lvbnNcbiAgfVxufSlcblxubW9kdWxlLmV4cG9ydHMuZG9lc05lZWRQcm9wZXJ0eSA9IGJhZGpzUmVwb3J0ZXIudHJ5SnMoKS5zcHlDdXN0b20oZnVuY3Rpb24odmFsaWRWZXJzaW9ucywgbGlzdCwga2V5KSB7XG4gIGxldCBkb2VzTmVlZCA9IGZhbHNlXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsaWRWZXJzaW9ucy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBjdXJyZW50VmVyc2lvbiA9IGxpc3RbdmFsaWRWZXJzaW9uc1tpXV1cblxuICAgIGlmIChjdXJyZW50VmVyc2lvbi5sZW5ndGgpIHtcbiAgICAgIGRvZXNOZWVkID0gdHJ1ZVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZG9lc05lZWRcbn0pXG5cbi8vIOaMh+WumuWQiOazleeJiOacrOWPt++8jOS7juWIl+ihqOi/lOWbnuespuWQiOadoeS7tueahOWtkOmhueebrlxubW9kdWxlLmV4cG9ydHMuZ2V0VmFsaWRJdGVtc1dpdGhTcGVjaWZpY1ZlcnNpb25zID0gYmFkanNSZXBvcnRlci50cnlKcygpLnNweUN1c3RvbShmdW5jdGlvbih2YWxpZFZlcnNpb25zLCBsaXN0LCBrZXkpIHtcbiAgbGV0IHJldCA9IHVuZGVmaW5lZFxuICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbGlkVmVyc2lvbnMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgY3VycmVudFZlcnNpb24gPSBsaXN0W3ZhbGlkVmVyc2lvbnNbaV1dXG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGN1cnJlbnRWZXJzaW9uLmxlbmd0aDsgaisrKSB7XG4gICAgICBsZXQgY3VycmVudFByb3BlcnR5ID0gY3VycmVudFZlcnNpb25bal1cblxuICAgICAgaWYgKHR5cGVvZiBjdXJyZW50UHJvcGVydHkgPT09ICdzdHJpbmcnICYmIGN1cnJlbnRQcm9wZXJ0eSA9PT0ga2V5KSB7XG4gICAgICAgIGlmIChyZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldCA9IFtdXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGN1cnJlbnRQcm9wZXJ0eSA9PT0gJ29iamVjdCcgJiYgY3VycmVudFByb3BlcnR5Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0ID0gY3VycmVudFByb3BlcnR5W2tleV1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXQgPSByZXQuY29uY2F0KGN1cnJlbnRQcm9wZXJ0eVtrZXldKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJldFxufSlcblxuLypcbiAqIOS7jiBsaXN0IOS4reaJvuWIsOS4gOS4qiBrZXkg5piv5ZCm5a2Y5Zyo77yM5pWw57uE55qE5q+P5LiA6aG55piv5LiA5Liq5a2X56ym5Liy5oiW5LiA5LiqIE9iamVjdO+8jOW5tui/lOWbnuWFtuWAvFxuICpcbiAqXCJsaXN0XCI6IFtcbiAqICBcImR1cmF0aW9uXCIsXG4gKiAge1xuICogICAgXCJ0aW1pbmdGdW5jdGlvblwiOiBbXG4gKiAgICAgIFwibGluZWFyXCIsXG4gKiAgICAgIFwiZWFzZVwiLFxuICogICAgICBcImVhc2UtaW5cIixcbiAqICAgICAgXCJlYXNlLWluLW91dFwiLFxuICogICAgICBcImVhc2Utb3V0XCIsXG4gKiAgICAgIFwic3RlcC1zdGFydFwiLFxuICogICAgICBcInN0ZXAtZW5kXCJcbiAqICAgIF1cbiAqICB9LFxuICogIFwiZGVsYXlcIixcbiAqICBcInRyYW5zZm9ybU9yaWdpblwiXG4gKl1cbiAqL1xubW9kdWxlLmV4cG9ydHMuZ2V0VmFsaWRJdGVtID0gYmFkanNSZXBvcnRlci50cnlKcygpLnNweUN1c3RvbShmdW5jdGlvbihsaXN0LCBrZXkpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0W2ldID09PSAnc3RyaW5nJyAmJiBsaXN0W2ldID09PSBrZXkpIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3RbaV0gPT09ICdvYmplY3QnICYmIGxpc3RbaV0uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0dXJuIGxpc3RbaV1ba2V5XVxuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkXG59KSIsImNvbnN0IHsgY29tcGFyZVZlcnNpb24gfSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzJylcbmNvbnN0IGJhZGpzUmVwb3J0ZXIgPSByZXF1aXJlKCcuLi8uLi9iYWRqcy1yZXBvcnQnKVxuXG4vKlxuICog5LuOIG9iaiDkuK3mib7lh7rnrKblkIjmnaHku7bnmoQgdmVyc2lvbiDliJfooahcbiAqL1xubW9kdWxlLmV4cG9ydHMuZ2V0VmFsaWRWZXJzaW9ucyA9IGJhZGpzUmVwb3J0ZXIudHJ5SnMoKS5zcHlDdXN0b20oZnVuY3Rpb24oU0RLVmVyc2lvbiwgbmFtZSwgb2JqKSB7XG4gIGlmICghbmFtZSkge1xuICAgIHJldHVybiBbXVxuICB9XG5cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iailcbiAgY29uc3QgaW5kZXggPSBrZXlzLmluZGV4T2YobmFtZSlcblxuICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgcmV0dXJuIFtdXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaXRlbSA9IG9ialtrZXlzW2luZGV4XV1cblxuICAgIGNvbnN0IHZhbGlkVmVyc2lvbnMgPSBPYmplY3Qua2V5cyhpdGVtKS5maWx0ZXIoKGN1cnJlbnRWZXJzaW9uKSA9PiB7XG4gICAgICByZXR1cm4gY29tcGFyZVZlcnNpb24oY3VycmVudFZlcnNpb24sIFNES1ZlcnNpb24pID4gMFxuICAgIH0pXG5cbiAgICByZXR1cm4gdmFsaWRWZXJzaW9uc1xuICB9XG59KVxuXG5tb2R1bGUuZXhwb3J0cy5kb2VzTmVlZFByb3BlcnR5ID0gYmFkanNSZXBvcnRlci50cnlKcygpLnNweUN1c3RvbShmdW5jdGlvbih2YWxpZFZlcnNpb25zLCBsaXN0LCBrZXkpIHtcbiAgbGV0IGRvZXNOZWVkID0gZmFsc2VcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWxpZFZlcnNpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGN1cnJlbnRWZXJzaW9uID0gbGlzdFt2YWxpZFZlcnNpb25zW2ldXVxuXG4gICAgaWYgKGN1cnJlbnRWZXJzaW9uLmxlbmd0aCkge1xuICAgICAgZG9lc05lZWQgPSB0cnVlXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkb2VzTmVlZFxufSlcblxuLy8g5oyH5a6a5ZCI5rOV54mI5pys5Y+377yM5LuO5YiX6KGo6L+U5Zue56ym5ZCI5p2h5Lu255qE5a2Q6aG555uuXG5tb2R1bGUuZXhwb3J0cy5nZXRWYWxpZEl0ZW1zV2l0aFNwZWNpZmljVmVyc2lvbnMgPSBiYWRqc1JlcG9ydGVyLnRyeUpzKCkuc3B5Q3VzdG9tKGZ1bmN0aW9uKHZhbGlkVmVyc2lvbnMsIGxpc3QsIGtleSkge1xuICBsZXQgcmV0ID0gdW5kZWZpbmVkXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsaWRWZXJzaW9ucy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBjdXJyZW50VmVyc2lvbiA9IGxpc3RbdmFsaWRWZXJzaW9uc1tpXV1cblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgY3VycmVudFZlcnNpb24ubGVuZ3RoOyBqKyspIHtcbiAgICAgIGxldCBjdXJyZW50UHJvcGVydHkgPSBjdXJyZW50VmVyc2lvbltqXVxuXG4gICAgICBpZiAodHlwZW9mIGN1cnJlbnRQcm9wZXJ0eSA9PT0gJ3N0cmluZycgJiYgY3VycmVudFByb3BlcnR5ID09PSBrZXkpIHtcbiAgICAgICAgaWYgKHJldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0ID0gW11cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY3VycmVudFByb3BlcnR5ID09PSAnb2JqZWN0JyAmJiBjdXJyZW50UHJvcGVydHkuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBpZiAodHlwZW9mIHJldCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXQgPSBjdXJyZW50UHJvcGVydHlba2V5XVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldCA9IHJldC5jb25jYXQoY3VycmVudFByb3BlcnR5W2tleV0pXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmV0XG59KVxuXG4vKlxuICog5LuOIGxpc3Qg5Lit5om+5Yiw5LiA5LiqIGtleSDmmK/lkKblrZjlnKjvvIzmlbDnu4TnmoTmr4/kuIDpobnmmK/kuIDkuKrlrZfnrKbkuLLmiJbkuIDkuKogT2JqZWN077yM5bm26L+U5Zue5YW25YC8XG4gKlxuICpcImxpc3RcIjogW1xuICogIFwiZHVyYXRpb25cIixcbiAqICB7XG4gKiAgICBcInRpbWluZ0Z1bmN0aW9uXCI6IFtcbiAqICAgICAgXCJsaW5lYXJcIixcbiAqICAgICAgXCJlYXNlXCIsXG4gKiAgICAgIFwiZWFzZS1pblwiLFxuICogICAgICBcImVhc2UtaW4tb3V0XCIsXG4gKiAgICAgIFwiZWFzZS1vdXRcIixcbiAqICAgICAgXCJzdGVwLXN0YXJ0XCIsXG4gKiAgICAgIFwic3RlcC1lbmRcIlxuICogICAgXVxuICogIH0sXG4gKiAgXCJkZWxheVwiLFxuICogIFwidHJhbnNmb3JtT3JpZ2luXCJcbiAqXVxuICovXG5tb2R1bGUuZXhwb3J0cy5nZXRWYWxpZEl0ZW0gPSBiYWRqc1JlcG9ydGVyLnRyeUpzKCkuc3B5Q3VzdG9tKGZ1bmN0aW9uKGxpc3QsIGtleSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIGxpc3RbaV0gPT09ICdzdHJpbmcnICYmIGxpc3RbaV0gPT09IGtleSkge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdFtpXSA9PT0gJ29iamVjdCcgJiYgbGlzdFtpXS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gbGlzdFtpXVtrZXldXG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWRcbn0pIiwiLyogZ2xvYmFsIF9fYXBwU2VydmljZUVuZ2luZV9fIFJlcG9ydGVyICovXG5jb25zdCBtZXNzYWdlciA9IHJlcXVpcmUoJy4uLy4uL21lc3NhZ2VyJylcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMnKVxuXG5mdW5jdGlvbiBzZW5kRXJyb3IobXNnKSB7XG4gIGlmICh1dGlscy5zdGF0dXMgIT09ICdydW5uaW5nJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgbWVzc2FnZXIucHViKCdqcy1leGNlcHRpb24nLCB7XG4gICAgbXNnLFxuICAgIHBhZ2U6IHdpbmRvdy5fX2FwcFNlcnZpY2VFbmdpbmVfXyAmJiBfX2FwcFNlcnZpY2VFbmdpbmVfXy5nZXRDdXJyZW50Um91dGUoKVxuICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24gKCkge1xuICBSZXBvcnRlci5yZWdpc3RlckVycm9yTGlzdGVuZXIoc2VuZEVycm9yKVxufVxuIiwiY29uc3QgbWVzc2FnZXIgPSByZXF1aXJlKCcuLi9tZXNzYWdlcicpXG5jb25zdCB0YXNrcyA9IHJlcXVpcmUoJy4uL3Rhc2tzL2FwcHNlcnZpY2UnKVxuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpXG5cbm1lc3NhZ2VyLmNvbm5lY3QoJ0FQUFNFUlZJQ0VfRVhQRVJJRU5DRScpXG5cbmlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gIGluaXQoKVxufSBlbHNlIHtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBpbml0KVxufVxuLy8g5rKh5rOV55+l6YGTIF9fRE9NUmVhZHlcbi8vICdQQUdFX0VWRU5UJ1xuLy8gZXZlbnROYW1lID09PSAnX19ET01SZWFkeSdcblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgdGFza3MuaW5pdCgpXG59XG4iLCIvKiBnbG9iYWwgX19hcHBTZXJ2aWNlRW5naW5lX18gX193eENvbmZpZyBleHBhcnNlciBfX2FwcFNlcnZpY2VTREtfXyBfX2RldnRvb2xzQ29uZmlnIGdldEN1cnJlbnRQYWdlcyBfX3ZpcnR1YWxET01fXyAqL1xuY29uc3QgbWVzc2FnZXIgPSByZXF1aXJlKCcuLi9tZXNzYWdlcicpXG5jb25zdCBlZSA9IHJlcXVpcmUoJy4uL2V2ZW50ZW1pdHRlcicpXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJylcbmNvbnN0IGJhZGpzUmVwb3J0ZXIgPSByZXF1aXJlKCcuLi9iYWRqcy1yZXBvcnQnKVxuXG5jb25zdCBlbHRUYXNrID0gcmVxdWlyZSgnLi9leGVjdXRlLWxvbmctdGltZS9hcHBzZXJ2aWNlJylcbmNvbnN0IGRhVGFzayA9IHJlcXVpcmUoJy4vZGVwcmVjYXRlZC1hcGkvYXBwc2VydmljZScpXG5jb25zdCByZWNvbWVuZGVkVmVyc2lvblRhc2sgPSByZXF1aXJlKCcuL3JlY29tZW5kZWQtdmVyc2lvbi9hcHBzZXJ2aWNlJylcblxuY29uc3Qgb3JpU2V0SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbFxuY29uc3Qgb3JpU2V0VGltZW91dCA9IHNldFRpbWVvdXRcbmNvbnN0IGRlZmluZVByb3BlcnRpZXMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllc1xuY29uc3QgcmVxSW5mbyA9IHt9XG5cbmNvbnN0IF9rZXlzID0gT2JqZWN0LmtleXNcbmNvbnN0IHJlcG9ydGVyTWV0aG9kcyA9IFsnc3Vycm91bmRUaGlyZEJ5VHJ5Q2F0Y2gnLCAnc2xvd1JlcG9ydCcsICdzcGVlZFJlcG9ydCcsICdyZXBvcnRLZXlWYWx1ZScsICdyZXBvcnRJREtleSddXG5jb25zdCBhbGxNb2R1bGVzID0gW11cbmxldCB3eENvbmZpZyA9IG51bGxcbmxldCBfaW5pdGVkID0gZmFsc2VcblxuT2JqZWN0LmtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIGNvbnN0IGtleXMgPSBfa2V5cyhvYmopXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmVwb3J0ZXJNZXRob2RzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IG1ldGhvZCA9IHJlcG9ydGVyTWV0aG9kc1tpXVxuICAgIGlmIChrZXlzLmluZGV4T2YobWV0aG9kKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBrZXlzXG4gICAgfVxuICB9XG4gIC8vIOaOpeS4i+adpeaYryBSZXBvcnRlciDnmoTpgY3ljoZcbiAgLy8gaG9vayDkvY8gZm9yRWFjaCDlkowgZGVmaW5lUHJvcGVydHnvvIznu5kgZGVzY3JpcHRpb24g5Yqg5LiqIGNvbmZpZ3VyYWJsZVxuICBjb25zdCBmb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2hcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dGVuZC1uYXRpdmVcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoZm4pIHtcbiAgICBjb25zdCBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIGtleSwgZGVzY3JpcHRpb24pIHtcbiAgICAgIGRlc2NyaXB0aW9uLmNvbmZpZ3VyYWJsZSA9IHRydWVcbiAgICAgIGRlZmluZVByb3BlcnR5KG9iaiwga2V5LCBkZXNjcmlwdGlvbilcbiAgICB9XG4gICAgZm9yRWFjaC5jYWxsKHRoaXMsIGZuKVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dGVuZC1uYXRpdmVcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCA9IGZvckVhY2hcbiAgfVxuICBPYmplY3Qua2V5cyA9IF9rZXlzXG4gIHJldHVybiBfa2V5cyhvYmopXG59XG5cbndpbmRvdy5fX3Bhc3NXQVNlcnZpY2VHbG9iYWxfXyA9IGZ1bmN0aW9uIChfX1dBU2VydmljZUdsb2JhbF9fKSB7XG4gIGZvciAobGV0IGtleSBpbiBfX1dBU2VydmljZUdsb2JhbF9fKSB7XG4gICAgaWYgKGtleSA9PT0gJ1Byb3RlY3QnKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICB3aW5kb3dba2V5XSA9IF9fV0FTZXJ2aWNlR2xvYmFsX19ba2V5XVxuICB9XG5cbiAgaG9va1JlcXVlc3QoKVxuICBob29rUmVxdWlyZSgpXG4gIGVsdFRhc2suaG9vaygpXG4gIGRhVGFzay5ob29rKClcbiAgcmVjb21lbmRlZFZlcnNpb25UYXNrLmhvb2soKVxuXG4gIHd4Q29uZmlnID0gX193eENvbmZpZ1xuXG4gIGlmICghX193eENvbmZpZy5wbHVnaW5zKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLy8g5YWs5YWx5bqT6YeM5b6A5LiL5Lya5omn6KGM5o+S5Lu255qE5L+d5oqk5YWo5bGA5Y+Y6YeP6YC76L6RXG4gIC8vIOWPquiDveWcqOatpOS5i+WJjSBob29rIOaOpeWPo1xuICByZXR1cm5cbn1cblxuZWUub24oJ3N0b3AtYXVkaXQnLCBmdW5jdGlvbiAoKSB7XG4gIC8vIHV0aWxzLmxvZygnc3RvcC1hdWRpdCcpXG4gIHV0aWxzLnN0YXR1cyA9ICdzdG9wcGVkJ1xufSlcblxuZWUub24oJ2NvbnNvbGUnLCBmdW5jdGlvbiAoZGF0YSkge1xuICBjb25zb2xlLndhcm4oZGF0YS5tc2cpXG59KVxuXG5mdW5jdGlvbiBzZW5kUmVxVXJsKHVybCkge1xuICBtZXNzYWdlci5wdWIoJ3d4LXJlcXVlc3QnLCB7XG4gICAgdXJsLFxuICAgIHBhZ2U6IF9fYXBwU2VydmljZUVuZ2luZV9fLmdldEN1cnJlbnRSb3V0ZSgpLFxuICB9KVxufVxuXG5mdW5jdGlvbiBzZW5kUmVzcEJvZHkodXJsLCBib2R5KSB7XG4gIG1lc3NhZ2VyLnB1Yignd3gtcmVxdWVzdC1ib2R5Jywge1xuICAgIHVybCxcbiAgICBib2R5LFxuICAgIHBhZ2U6IF9fYXBwU2VydmljZUVuZ2luZV9fLmdldEN1cnJlbnRSb3V0ZSgpLFxuICB9KVxufVxuXG5jb25zdCBob29rQ29tcFNldERhdGEgPSBiYWRqc1JlcG9ydGVyLnRyeUpzKCkuc3B5Q3VzdG9tKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgcmVnaXN0ZXJlZENvbXBzID0ge31cbiAgLy8g5Y675o6JIOaPkuS7tiDlkowgZnVuY3Rpb25hbC1wYWdlIOWSjCBucG3mqKHlnZdcbiAgT2JqZWN0LmtleXMoZXhwYXJzZXIuQ29tcG9uZW50Ll9saXN0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWtleSB8fCBrZXkgPT09ICd3eDovL2Z1bmN0aW9uYWwtcGFnZScgfHxcbiAgICAgIC9ecGx1Z2luOlxcL1xcLy8udGVzdChrZXkpIHx8XG4gICAgICAvXnBsdWdpbi1wcml2YXRlOlxcL1xcLy8udGVzdChrZXkpIHx8XG4gICAgICAvKF58XFwvKW1pbmlwcm9ncmFtX25wbVxcLy9nLnRlc3Qoa2V5KSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHJlZ2lzdGVyZWRDb21wc1trZXldID0gZXhwYXJzZXIuQ29tcG9uZW50Ll9saXN0W2tleV1cbiAgfSlcbiAgLy8gdXRpbHMubG9nKCdob29rQ29tcFNldERhdGEgcmVnaXN0ZXJlZENvbXBzJywgcmVnaXN0ZXJlZENvbXBzKVxuICBPYmplY3Qua2V5cyhyZWdpc3RlcmVkQ29tcHMpLmZvckVhY2goY29tcElzID0+IHtcbiAgICBpZiAoIWNvbXBJcykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGNvbXBEZWYgPSByZWdpc3RlcmVkQ29tcHNbY29tcElzXVxuICAgIGNvbnN0IG9yaUluaXQgPSBjb21wRGVmLmluaXRpYXRvclxuICAgIGNvbXBEZWYuaW5pdGlhdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgY29tcCA9IHRoaXNcbiAgICAgIGNvbnN0IG9yaVNldERhdGEgPSBjb21wLnNldERhdGFcbiAgICAgIG9yaUluaXQuY2FsbChjb21wKVxuICAgICAgaWYgKGNvbXAuX19jdXN0b21Db25zdHJ1Y3Rvcl9fID09PSBfX3ZpcnR1YWxET01fXy5QYWdlIHx8XG4gICAgICAgIGNvbXAuX19zZXRfZGF0YV9yZXdyaXRlZF9fKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLy8gdXRpbHMubG9nKCdkZWZpbmVQcm9wZXJ0aWVzIGNvbXAnKVxuICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAgIHNldERhdGE6IHtcbiAgICAgICAgICB2YWx1ZShkYXRhLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgb3JpU2V0RGF0YS5jYWxsKGNvbXAsIGRhdGEsIGNhbGxiYWNrKVxuICAgICAgICAgICAgaWYgKHV0aWxzLnN0YXR1cyAhPT0gJ3J1bm5pbmcnKSByZXR1cm5cbiAgICAgICAgICAgIG9yaVNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICBlZS5lbWl0KCdzZXQtZGF0YScsIGRhdGEsIHRoaXMuaXMsIHN0YWNrKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gdXRpbHMuZ2V0Q2FsbFN0YWNrKClcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIGNvbXAuX19zZXRfZGF0YV9yZXdyaXRlZF9fID0gdHJ1ZVxuICAgIH1cbiAgfSlcbn0pXG5cbmNvbnN0IGhvb2tQYWdlU2V0RGF0YSA9IGJhZGpzUmVwb3J0ZXIudHJ5SnMoKS5zcHlDdXN0b20oZnVuY3Rpb24gKCkge1xuICBjb25zdCBwYWdlcyA9IGdldEN1cnJlbnRQYWdlcygpXG5cbiAgLy8gdXRpbHMubG9nKCdob29rUGFnZVNldERhdGEnLCBwYWdlcylcbiAgcGFnZXMuZm9yRWFjaChwYWdlID0+IHtcbiAgICAvLyB1dGlscy5sb2coJ2hvb2tQYWdlU2V0RGF0YScsIHBhZ2UuX19zZXRfZGF0YV9yZXdyaXRlZF9fKVxuICAgIGlmICghcGFnZSB8fCBwYWdlLl9fc2V0X2RhdGFfcmV3cml0ZWRfXykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3Qgb3JpU2V0RGF0YSA9IHBhZ2Uuc2V0RGF0YVxuICAgIC8vIHV0aWxzLmxvZygnZGVmaW5lUHJvcGVydGllcyBwYWdlJylcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKHBhZ2UsIHtcbiAgICAgIHNldERhdGE6IHtcbiAgICAgICAgdmFsdWUoZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAvLyB1dGlscy5sb2coJ3BhZ2Ugc2V0RGF0YSBob29rZWQnLCBkYXRhLCBjYWxsYmFjaylcbiAgICAgICAgICBvcmlTZXREYXRhLmNhbGwocGFnZSwgZGF0YSwgY2FsbGJhY2spXG4gICAgICAgICAgaWYgKHV0aWxzLnN0YXR1cyAhPT0gJ3J1bm5pbmcnKSByZXR1cm5cbiAgICAgICAgICBvcmlTZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVlLmVtaXQoJ3NldC1kYXRhJywgZGF0YSwgJ1BhZ2UnLCBzdGFjaylcbiAgICAgICAgICB9KVxuICAgICAgICAgIGNvbnN0IHN0YWNrID0gdXRpbHMuZ2V0Q2FsbFN0YWNrKClcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgfVxuICAgIH0pXG4gICAgcGFnZS5fX3NldF9kYXRhX3Jld3JpdGVkX18gPSB0cnVlXG4gIH0pXG59KVxuXG5jb25zdCBob29rUmVxdWVzdCA9IGJhZGpzUmVwb3J0ZXIudHJ5SnMoKS5zcHlDdXN0b20oZnVuY3Rpb24gKCkge1xuICBjb25zdCBvcmlSZXF1ZXN0ID0gX19hcHBTZXJ2aWNlU0RLX18ud3gucmVxdWVzdFxuICBkZWZpbmVQcm9wZXJ0aWVzKF9fYXBwU2VydmljZVNES19fLnd4LCB7XG4gICAgcmVxdWVzdDoge1xuICAgICAgdmFsdWUoYXJncykge1xuICAgICAgICBjb25zdCBvcmlTdWNjZXNzID0gYXJncy5zdWNjZXNzXG4gICAgICAgIGFyZ3Muc3VjY2VzcyA9IGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICB0eXBlb2Ygb3JpU3VjY2VzcyA9PT0gJ2Z1bmN0aW9uJyAmJiBvcmlTdWNjZXNzKHJlcylcbiAgICAgICAgICBpZiAodXRpbHMuc3RhdHVzICE9PSAncnVubmluZycpIHJldHVyblxuICAgICAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSA9PT0gMjAwICYmIHJlcy5kYXRhKSB7XG4gICAgICAgICAgICBzZW5kUmVzcEJvZHkoYXJncy51cmwsIHV0aWxzLmhhc2goSlNPTi5zdHJpbmdpZnkocmVzLmRhdGEpKSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb3JpUmVxdWVzdChhcmdzKVxuICAgICAgICBpZiAodXRpbHMuc3RhdHVzICE9PSAncnVubmluZycpIHJldHVyblxuICAgICAgICBzZW5kUmVxVXJsKGFyZ3MudXJsKVxuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB9XG4gIH0pXG59KVxuXG5jb25zdCBob29rUmVxdWlyZSA9IGJhZGpzUmVwb3J0ZXIudHJ5SnMoKS5zcHlDdXN0b20oZnVuY3Rpb24gKCkge1xuICBjb25zdCBvcmlSZXF1aXJlID0gd2luZG93LnJlcXVpcmVcbiAgd2luZG93LnJlcXVpcmUgPSBmdW5jdGlvbiAobW9kSWQpIHtcbiAgICBhbGxNb2R1bGVzLnB1c2gobW9kSWQpXG4gICAgaWYgKF9pbml0ZWQpIHtcbiAgICAgIG1lc3NhZ2VyLnB1YignYWRkLWpzLW1vZHVsZScsIHttb2Q6IG1vZElkfSlcbiAgICB9XG4gICAgcmV0dXJuIG9yaVJlcXVpcmUobW9kSWQpXG4gIH1cbn0pXG5cbm1vZHVsZS5leHBvcnRzLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgX19hcHBTZXJ2aWNlU0RLX18gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcign5Z+656GA5bqT5YiH5o2i5YiwIDIuMi4wKyDvvIzmiY3og73kvb/nlKggQXVkaXRzIOWKn+iDvScpXG4gICAgbWVzc2FnZXIucHViKCdub3Qtc3VwcG9ydGVkLXd4YWxpYicpXG4gICAgcmV0dXJuXG4gIH1cblxuICBtZXNzYWdlci5wdWIoJ2FwcHNlcnZpY2Utb25sb2FkJywge1xuICAgIGFwcElkOiB3eENvbmZpZyAmJiB3eENvbmZpZy5hY2NvdW50SW5mby5hcHBJZCxcbiAgICBsaWJWZXJzaW9uOiBfX2FwcFNlcnZpY2VTREtfXy53eCAmJiBfX2FwcFNlcnZpY2VTREtfXy53eC52ZXJzaW9uICYmIF9fYXBwU2VydmljZVNES19fLnd4LnZlcnNpb24udmVyc2lvbixcbiAgICBpc0NyYXdsZXI6IHR5cGVvZiBfX2RldnRvb2xzQ29uZmlnICE9PSAndW5kZWZpbmVkJyAmJiBfX2RldnRvb2xzQ29uZmlnLm9ubGluZSxcbiAgICBhbGxNb2R1bGVzLFxuICAgIHd4Q29uZmlnXG4gIH0pXG4gIF9fYXBwU2VydmljZVNES19fLm9uQXBwUm91dGUoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAodXRpbHMuc3RhdHVzICE9PSAncnVubmluZycpIHJldHVyblxuICAgIGhvb2tQYWdlU2V0RGF0YSgpXG4gICAgbWVzc2FnZXIucHViKCdhcHAtcm91dGUnLCBkYXRhKVxuICB9KVxuXG4gIGhvb2tQYWdlU2V0RGF0YSgpXG4gIGhvb2tDb21wU2V0RGF0YSgpIC8vIOWIneWni+WMluWQjuaJgOaciee7hOS7tumDveayoeazqOWGjOS6hu+8jOe8k+WtmOWcqCBleHBhcnNlci5Db21wb25lbnQuX2xpc3RcblxuICByZXF1aXJlKCcuL2pzLWV4Y2VwdGlvbi9hcHBzZXJ2aWNlJykuaW5pdCgpXG4gIHJlcXVpcmUoJy4vc2V0LWRhdGEtbGFyZ2UvYXBwc2VydmljZScpLmluaXQoKVxuICByZXF1aXJlKCcuL3NldC1kYXRhLWZyZXEvYXBwc2VydmljZScpLmluaXQob3JpU2V0VGltZW91dClcbiAgcmVxdWlyZSgnLi9zZXQtZGF0YS1uby1iaW5kaW5nL2FwcHNlcnZpY2UnKS5pbml0KClcbiAgcmVxdWlyZSgnLi90aW1lci1uby1yZWN5Y2xlL2FwcHNlcnZpY2UnKS5pbml0KG9yaVNldFRpbWVvdXQsIG9yaVNldEludGVydmFsKVxuICByZXF1aXJlKCcuL3VudXNlZC1jc3MvYXBwc2VydmljZScpLmluaXQoKVxuXG4gIF9pbml0ZWQgPSB0cnVlXG59XG4iLCJjb25zdCBtZXNzYWdlciA9IHJlcXVpcmUoJy4uLy4uL21lc3NhZ2VyJylcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMnKVxuY29uc3QgYmFkanNSZXBvcnRlciA9IHJlcXVpcmUoJy4uLy4uL2JhZGpzLXJlcG9ydCcpXG5cbmZ1bmN0aW9uIHNlbmQoY29zdCwgZXh0ZW5kKSB7XG4gIG1lc3NhZ2VyLnB1YignZXhlY3V0ZS1sb25nLXRpbWUnLCB7XG4gICAgY29zdCxcbiAgICBleHRlbmQsXG4gICAgcGFnZTogX19hcHBTZXJ2aWNlRW5naW5lX18uZ2V0Q3VycmVudFJvdXRlKCksXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGhvb2tTcGVlZFJlcG9ydCgpIHtcbiAgY29uc3Qgb3JpU2xvd1JlcG9ydCA9IFJlcG9ydGVyLnNsb3dSZXBvcnRcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVwb3J0ZXIsIHtcbiAgICBzbG93UmVwb3J0OiB7XG4gICAgICB2YWx1ZShkYXRhKSB7XG4gICAgICAgIG9yaVNsb3dSZXBvcnQoZGF0YSlcbiAgICAgICAgaWYgKHV0aWxzLnN0YXR1cyAhPT0gJ3J1bm5pbmcnKSByZXR1cm5cbiAgICAgICAgaWYgKGRhdGEua2V5ID09PSAncGFnZUludm9rZScpIHtcbiAgICAgICAgICBzZW5kKGRhdGEuY29zdCwgZGF0YS5leHRlbmQpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgfVxuICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cy5ob29rID0gYmFkanNSZXBvcnRlci50cnlKcygpLnNweUN1c3RvbShob29rU3BlZWRSZXBvcnQpXG4iLCIvKiBnbG9iYWwgX19hcHBTZXJ2aWNlU0RLX18gX19hcHBTZXJ2aWNlRW5naW5lX18gKi9cbmNvbnN0IG1lc3NhZ2VyID0gcmVxdWlyZSgnLi4vLi4vbWVzc2FnZXInKVxuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscycpXG5jb25zdCBBUElzID0gcmVxdWlyZSgnLi9hcGkuanNvbicpXG5jb25zdCBiYWRqc1JlcG9ydGVyID0gcmVxdWlyZSgnLi4vLi4vYmFkanMtcmVwb3J0JylcbmNvbnN0IHtnZXRWYWxpZFZlcnNpb25zLCBnZXRWYWxpZEl0ZW1zV2l0aFNwZWNpZmljVmVyc2lvbnMsIGRvZXNOZWVkUHJvcGVydHl9ID0gcmVxdWlyZSgnLi9jb21tb24nKVxuXG5jb25zdCBkZWZpbmVQcm9wZXJ0aWVzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXNcbmNvbnN0IGtleXNPZkFQSSA9IE9iamVjdC5rZXlzKEFQSXMpXG5sZXQgZGVwcmVjYXRlZHMgPSBbXVxubGV0IHRpbWVyID0gbnVsbFxuXG5mdW5jdGlvbiBoYW5kbGVEZXByZWNhdGVkcyhhcGksIHN0YWNrKSB7XG4gIGlmIChzdGFjayAmJiBzdGFjay5sZW5ndGggJiYgZGVwcmVjYXRlZHMuaW5kZXhPZihhcGkpID09PSAtMSkge1xuICAgIGRlcHJlY2F0ZWRzLnB1c2goe1xuICAgICAgYXBpLFxuICAgICAgc3RhY2tcbiAgICB9KVxuICB9XG4gIGNvbnN0IHBhZ2UgPSBfX2FwcFNlcnZpY2VFbmdpbmVfXy5nZXRDdXJyZW50Um91dGUoKVxuICBjbGVhclRpbWVvdXQodGltZXIpXG4gIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgbWVzc2FnZXIucHViKCdkZXByZWNhdGVkLWFwaScsIHtcbiAgICAgIGRlcHJlY2F0ZWRzLFxuICAgICAgcGFnZVxuICAgIH0pXG4gICAgZGVwcmVjYXRlZHMgPSBbXVxuICB9LCA1MDApXG59XG5cbi8vIOi/lOWbnuS4gOS4quaOpeWPo+aUr+aMgeeahOWPguaVsFxuY29uc3QgZ2V0VmFsaWRBcmcgPSAodmFsaWRWZXJzaW9ucywgQVBJLCBhcmcpID0+IHtcbiAgcmV0dXJuIGdldFZhbGlkSXRlbXNXaXRoU3BlY2lmaWNWZXJzaW9ucyh2YWxpZFZlcnNpb25zLCBBUEksIGFyZylcbn1cblxuY29uc3QgY2hlY2tBUElzID0gKFNES1ZlcnNpb24sIG5hbWUsIGFyZ3MsIHJldCwgc3RhY2spID0+IHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgdXRpbHMubG9nKCdjaGVja0FQSXMnLCBTREtWZXJzaW9uLCBuYW1lLCBhcmdzLCByZXQpXG4gIH1cbiAgY29uc3QgQVBJID0gQVBJc1tuYW1lXVxuICBsZXQgdmFsaWRWZXJzaW9uc1xuICBsZXQgZGVzY3JpcHRvcnNcblxuICB2YWxpZFZlcnNpb25zID0gZ2V0VmFsaWRWZXJzaW9ucyhTREtWZXJzaW9uLCBuYW1lLCBBUElzKVxuICBpZiAodmFsaWRWZXJzaW9ucy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IGRvZXNOZWVkID0gZG9lc05lZWRQcm9wZXJ0eSh2YWxpZFZlcnNpb25zLCBBUEkpXG4gIGlmICghZG9lc05lZWQpIHtcbiAgICAvLyDlup/lvIPmlbTkuKrmjqXlj6PvvIznm7TmjqXov5Tlm57vvIzkuIvpnaLpgLvovpHkuI3nlKjotbBcbiAgICBoYW5kbGVEZXByZWNhdGVkcyhuYW1lLCBzdGFjaylcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGNvbnN0IHZhbGlkQXJncyA9IGdldFZhbGlkQXJnKHZhbGlkVmVyc2lvbnMsIEFQSSwgJyRhcmd1bWVudCcpIHx8IFtdXG4gIGNvbnN0IHZhbGlkTWV0aG9kcyA9IGdldFZhbGlkQXJnKHZhbGlkVmVyc2lvbnMsIEFQSSwgJyRtZXRob2QnKSB8fCBbXVxuICBkZXNjcmlwdG9ycyA9IFtdXG5cbiAgdmFsaWRNZXRob2RzLmZvckVhY2gobWV0aG9kID0+IHtcbiAgICBjb25zdCBfbWV0aG9kID0gcmV0W21ldGhvZF1cbiAgICBkZXNjcmlwdG9yc1ttZXRob2RdID0ge1xuICAgICAgdmFsdWUoLi4uYXJncykge1xuICAgICAgICBsZXQgc3RhY2sgPSB1dGlscy5nZXRDYWxsU3RhY2soKVxuICAgICAgICBfbWV0aG9kLmFwcGx5KHJldCwgYXJncylcbiAgICAgICAgaGFuZGxlRGVwcmVjYXRlZHMoYCR7bmFtZX0uJHttZXRob2R9YCwgc3RhY2spXG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KVxuICBkZWZpbmVQcm9wZXJ0aWVzKHJldCwgZGVzY3JpcHRvcnMpXG59XG5cbm1vZHVsZS5leHBvcnRzLmhvb2sgPSBiYWRqc1JlcG9ydGVyLnRyeUpzKCkuc3B5Q3VzdG9tKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgZGVzY3JpcHRvcnMgPSB7fVxuICBjb25zdCB3eCA9IF9fYXBwU2VydmljZVNES19fLnd4XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgIHV0aWxzLmxvZygnZGVwcmVjYXRlZC1hcGkgaW5pdCBrZXlzT2ZBUEknLCBrZXlzT2ZBUEkpXG4gIH1cbiAga2V5c09mQVBJLmZvckVhY2gobmFtZSA9PiB7XG4gICAgY29uc3Qgb3JpZ2luYWwgPSB3eFtuYW1lXVxuICAgIGRlc2NyaXB0b3JzW25hbWVdID0ge1xuICAgICAgdmFsdWUoLi4uYXJncykge1xuICAgICAgICBsZXQgc3RhY2sgPSB1dGlscy5nZXRDYWxsU3RhY2soKVxuICAgICAgICBjb25zdCByZXQgPSBvcmlnaW5hbC5hcHBseSh3eCwgYXJncylcbiAgICAgICAgY29uc3QgY3VycmVudFZlcnNpb24gPSB3eC52ZXJzaW9uICYmIHd4LnZlcnNpb24udmVyc2lvblxuXG4gICAgICAgIGlmIChjdXJyZW50VmVyc2lvbikge1xuICAgICAgICAgIGNoZWNrQVBJcyhjdXJyZW50VmVyc2lvbiwgbmFtZSwgYXJncywgcmV0LCBzdGFjaylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXRcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pXG4gIGRlZmluZVByb3BlcnRpZXMod3gsIGRlc2NyaXB0b3JzKVxufSlcbiIsIi8qIGdsb2JhbCBfX2FwcFNlcnZpY2VFbmdpbmVfXyBfX2FwcFNlcnZpY2VTREtfXyAqL1xuY29uc3QgbWVzc2FnZXIgPSByZXF1aXJlKCcuLi8uLi9tZXNzYWdlcicpXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzJylcbmNvbnN0IEFQSXMgPSByZXF1aXJlKCcuL2FwaS5qc29uJylcbmNvbnN0IGJhZGpzUmVwb3J0ZXIgPSByZXF1aXJlKCcuLi8uLi9iYWRqcy1yZXBvcnQnKVxuY29uc3Qge2NvbXBhcmVWZXJzaW9ufSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzJylcbmNvbnN0IHtnZXRWYWxpZFZlcnNpb25zLCBnZXRWYWxpZEl0ZW1zV2l0aFNwZWNpZmljVmVyc2lvbnMsIGRvZXNOZWVkUHJvcGVydHl9ID0gcmVxdWlyZSgnLi9jb21tb24nKVxuXG5jb25zdCBkZWZpbmVQcm9wZXJ0aWVzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXNcbmNvbnN0IGtleXNPZkFQSSA9IE9iamVjdC5rZXlzKEFQSXMpXG5cbmxldCBtaW5QdWJsaWNMaWJWZXJzaW9uID0gJzEuMC4wJ1xubGV0IHRpbWVyID0gbnVsbFxubGV0IGFwaURlc2NyaXB0b3JMaXN0ID0gW11cblxubWVzc2FnZXIuc3ViKCdtaW4tcHVibGljLWxpYi12ZXJzaW9uJywgKHtkYXRhfSkgPT4ge1xuICB1dGlscy5sb2coYG1pbi1wdWJsaWMtbGliLXZlcnNpb24gJHtkYXRhLm1pblB1YmxpY0xpYlZlcnNpb259YClcbiAgdXRpbHMubG9nKGRhdGEpXG4gIG1pblB1YmxpY0xpYlZlcnNpb24gPSBkYXRhLm1pblB1YmxpY0xpYlZlcnNpb24gPyBkYXRhLm1pblB1YmxpY0xpYlZlcnNpb24gOiAnMS4wLjAnXG59KVxuXG5mdW5jdGlvbiBoYW5kbGVBcGlWZXJzaW9uKGRlc2NyaXB0b3IsIHZlcnNpb24sIHN0YWNrKSB7XG4gIGNvbnN0IHBhZ2UgPSBfX2FwcFNlcnZpY2VFbmdpbmVfXy5nZXRDdXJyZW50Um91dGUoKVxuICBpZiAoY29tcGFyZVZlcnNpb24obWluUHVibGljTGliVmVyc2lvbiwgdmVyc2lvbikgPCAwICYmIHN0YWNrICYmIHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICBtZXNzYWdlci5wdWIoJ3JlY29tZW5kZWQtdmVyc2lvbicsIHtcbiAgICAgIGRlc2NyaXB0b3IsXG4gICAgICBzdGFjayxcbiAgICAgIHZlcnNpb24sXG4gICAgICBwYWdlXG4gICAgfSlcbiAgfVxufVxuXG4vLyDov5Tlm57kuIDkuKrmjqXlj6PmlK/mjIHnmoTlj4LmlbBcbmNvbnN0IGdldFZhbGlkQXJnID0gKHZhbGlkVmVyc2lvbnMsIEFQSSwgYXJnKSA9PiB7XG4gIHJldHVybiBnZXRWYWxpZEl0ZW1zV2l0aFNwZWNpZmljVmVyc2lvbnModmFsaWRWZXJzaW9ucywgQVBJLCBhcmcpXG59XG5cbmNvbnN0IGNoZWNrQVBJQXJncyA9IChsaXN0LCBhcmdLZXlzKSA9PiB7XG4gIHZhciByZXN1bHQgPSBbXVxuICBmb3IgKGxldCBqID0gMCwga2V5TGVuID0gbGlzdC5sZW5ndGg7IGogPCBrZXlMZW47ICsraikge1xuICAgIGlmICh0eXBlb2YgbGlzdFtqXSA9PT0gJ3N0cmluZycgJiYgYXJnS2V5cy5pbmRleE9mKGxpc3Rbal0pID4gLTEpIHtcbiAgICAgIGxldCBkZXNjcmlwdG9yID0gbGlzdFtqXVxuICAgICAgcmVzdWx0LnB1c2goZGVzY3JpcHRvcilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5jb25zdCBob29rQXBpUmV0dXJuID0gKG5hbWUsIGxpc3QsIHJldE9iaiwgdmVyc2lvbikgPT4ge1xuICBpZiAodHlwZW9mIHJldE9iaiAhPT0gJ29iamVjdCcpIHJldHVyblxuXG4gIGxldCBvcmlnaW5hbFJldCA9IE9iamVjdC5hc3NpZ24oe30sIHJldE9iailcbiAgbGV0IHByb3AgPSB7fVxuICBsaXN0LmZvckVhY2goKGtleSkgPT4ge1xuICAgIHByb3Bba2V5XSA9IHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgbGV0IHN0YWNrID0gdXRpbHMuZ2V0Q2FsbFN0YWNrKClcbiAgICAgICAgdXRpbHMubG9nKGBob29rQXBpUmV0dXJuIGluIHJldHVybiBvYmogJHtuYW1lfSAke2tleX1gKVxuICAgICAgICBoYW5kbGVBcGlWZXJzaW9uKFtuYW1lLCAncmV0dXJuJywga2V5XS5qb2luKCcuJyksIHZlcnNpb24sIHN0YWNrKVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxSZXRba2V5XVxuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSlcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhyZXRPYmosIHByb3ApXG59XG5cbmNvbnN0IGhvb2tTdWNjZXNzUmVzID0gKG5hbWUsIG9yaWdpblN1Y2Nlc3MpID0+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChyZXMsIC4uLmFyZ3MpIHtcbiAgICBsZXQgb3JpZ2luYWxSZXMgPSBPYmplY3QuYXNzaWduKHt9LCByZXMpXG4gICAgbGV0IHByb3AgPSB7fVxuICAgIGxldCBBUEkgPSBBUElzW25hbWVdXG4gICAgbGV0IGFsbFZlcnNpb25zID0gT2JqZWN0LmtleXMoQVBJKS5zb3J0KGNvbXBhcmVWZXJzaW9uKVxuXG4gICAgYWxsVmVyc2lvbnMuZm9yRWFjaCgodmVyKSA9PiB7XG4gICAgICBpZiAoY29tcGFyZVZlcnNpb24obWluUHVibGljTGliVmVyc2lvbiwgdmVyKSA+IDApIHJldHVyblxuXG4gICAgICBsZXQgdmVyc2lvblN1cHBvcnQgPSBBUElbdmVyXVxuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHZlcnNpb25TdXBwb3J0Lmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmVyc2lvblN1cHBvcnRbaV0gPT09ICdvYmplY3QnICYmIHZlcnNpb25TdXBwb3J0W2ldLnN1Y2Nlc3MpIHtcbiAgICAgICAgICB2ZXJzaW9uU3VwcG9ydFtpXS5zdWNjZXNzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgcHJvcFtrZXldID0ge1xuICAgICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YWNrID0gdXRpbHMuZ2V0Q2FsbFN0YWNrKClcbiAgICAgICAgICAgICAgICBoYW5kbGVBcGlWZXJzaW9uKFtuYW1lLCAnc3VjY2VzcycsIGtleV0uam9pbignLicpLCB2ZXIsIHN0YWNrKVxuICAgICAgICAgICAgICAgIHV0aWxzLmxvZygnaG9va1N1Y2Nlc3NSZXMnLCB2ZXIsIGtleSlcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxSZXNba2V5XVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHJlcywgcHJvcClcbiAgICBhcmdzLnVuc2hpZnQocmVzKVxuICAgIG9yaWdpblN1Y2Nlc3MuYXBwbHkodGhpcywgYXJncylcbiAgfVxufVxuXG5jb25zdCBjaGVja0FQSXMgPSAoU0RLVmVyc2lvbiwgbmFtZSwgYXJncywgcmV0LCBzdGFjaykgPT4ge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICB1dGlscy5sb2coJ2NoZWNrQVBJcycsIFNES1ZlcnNpb24sIG5hbWUsIGFyZ3MsIHJldCwgc3RhY2spXG4gIH1cbiAgY29uc3QgQVBJID0gQVBJc1tuYW1lXVxuICBsZXQgYWxsVmVyc2lvbnMgPSBPYmplY3Qua2V5cyhBUEkpLnNvcnQoY29tcGFyZVZlcnNpb24pXG4gIGxldCBhcmdLZXlzID0gdHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnID8gT2JqZWN0LmtleXMoYXJnc1swXSkgOiBbXVxuICAvLyBsZXQgQVBJUmVjb21lbmRlZFZlcnNpb24gPSBhbGxWZXJzaW9ucy5sZW5ndGggPyBhbGxWZXJzaW9uc1swXSA6ICcxLjAuMCdcbiAgbGV0IGRlc2NyaXB0b3IgPSBuYW1lXG5cbiAgaWYgKGFsbFZlcnNpb25zLmxlbmd0aCkge1xuICAgIGhhbmRsZUFwaVZlcnNpb24obmFtZSwgYWxsVmVyc2lvbnNbMF0sIHN0YWNrKVxuICB9XG5cbiAgLy8gY2hlY2sgYXJnc1xuICBsZXQgaWR4ID0gMVxuICB3aGlsZSAoaWR4IDwgYWxsVmVyc2lvbnMubGVuZ3RoKSB7XG4gICAgaWYgKGNvbXBhcmVWZXJzaW9uKG1pblB1YmxpY0xpYlZlcnNpb24sIGFsbFZlcnNpb25zW2lkeF0pID4gMCkge1xuICAgICAgaWR4KytcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgbGV0IHZlciA9IGFsbFZlcnNpb25zW2lkeF1cbiAgICBsZXQgdmVyc2lvblN1cHBvcnQgPSBBUElbdmVyXVxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB2ZXJzaW9uU3VwcG9ydC5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgaWYgKHR5cGVvZiB2ZXJzaW9uU3VwcG9ydFtpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHZlcnNpb25TdXBwb3J0W2ldLm9iamVjdCAmJiBhcmdLZXlzLmxlbmd0aCkge1xuICAgICAgICAgIGxldCBzdXBwb3J0T2JqZWN0ID0gdmVyc2lvblN1cHBvcnRbaV0ub2JqZWN0XG4gICAgICAgICAgbGV0IGZvdW5kQXJncyA9IGNoZWNrQVBJQXJncyhzdXBwb3J0T2JqZWN0LCBhcmdLZXlzKVxuXG4gICAgICAgICAgaWYgKGZvdW5kQXJncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvdW5kQXJncy5mb3JFYWNoKChhcmdLZXkpID0+IHtcbiAgICAgICAgICAgICAgaGFuZGxlQXBpVmVyc2lvbihbbmFtZSwgJ29iamVjdCcsIGFyZ0tleV0uam9pbignLicpLCB2ZXIsIHN0YWNrKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHZlcnNpb25TdXBwb3J0W2ldLnJldHVybiAmJiByZXQgJiYgT2JqZWN0LmtleXMocmV0KS5sZW5ndGgpIHtcbiAgICAgICAgICBob29rQXBpUmV0dXJuKG5hbWUsIHZlcnNpb25TdXBwb3J0W2ldLnJldHVybiwgcmV0LCB2ZXIpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZlcnNpb25TdXBwb3J0W2ldID09PSAnc3RyaW5nJykge1xuICAgICAgICBsZXQgb3JpZ2luYWxSZXQgPSBPYmplY3QuYXNzaWduKHt9LCByZXQpXG4gICAgICAgIGxldCBkZWZpbmVLZXkgPSB2ZXJzaW9uU3VwcG9ydFtpXVxuICAgICAgICBsZXQgZGVmaW5lT2JqID0ge31cblxuICAgICAgICBkZWZpbmVPYmpbZGVmaW5lS2V5XSA9IHtcbiAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICBsZXQgc3RhY2sgPSB1dGlscy5nZXRDYWxsU3RhY2soKVxuICAgICAgICAgICAgdXRpbHMubG9nKGBob29rQXBpUmV0dXJuIGluIHZlcmlvbkxpc3QgJHtuYW1lfSAke2RlZmluZUtleX1gKVxuICAgICAgICAgICAgaGFuZGxlQXBpVmVyc2lvbihbbmFtZSwgZGVmaW5lS2V5XS5qb2luKCcuJyksIHZlciwgc3RhY2spXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxSZXRbZGVmaW5lS2V5XVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMocmV0LCBkZWZpbmVPYmopXG4gICAgICB9XG4gICAgfVxuICAgIGlkeCsrXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMuaG9vayA9IGJhZGpzUmVwb3J0ZXIudHJ5SnMoKS5zcHlDdXN0b20oZnVuY3Rpb24gKCkge1xuICBjb25zdCBkZXNjcmlwdG9ycyA9IHt9XG4gIGNvbnN0IHd4ID0gX19hcHBTZXJ2aWNlU0RLX18ud3hcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgdXRpbHMubG9nKCdyZWNvbm1lbmRlZC12ZXJzaW9uIGluaXQga2V5c09mQVBJJywga2V5c09mQVBJKVxuICB9XG4gIGtleXNPZkFQSS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgIGNvbnN0IG9yaWdpbmFsID0gd3hbbmFtZV1cbiAgICBkZXNjcmlwdG9yc1tuYW1lXSA9IHtcbiAgICAgIHZhbHVlKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKGFyZ3NbMF0gJiYgYXJnc1swXS5zdWNjZXNzICYmIHR5cGVvZiBhcmdzWzBdLnN1Y2Nlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBhcmdzWzBdLnN1Y2Nlc3MgPSBob29rU3VjY2Vzc1JlcyhuYW1lLCBhcmdzWzBdLnN1Y2Nlc3MpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXQgPSBvcmlnaW5hbC5hcHBseSh3eCwgYXJncylcbiAgICAgICAgY29uc3Qgc3RhY2sgPSB1dGlscy5nZXRDYWxsU3RhY2soKVxuICAgICAgICBjb25zdCBjdXJyZW50VmVyc2lvbiA9IHd4LnZlcnNpb24gJiYgd3gudmVyc2lvbi52ZXJzaW9uXG5cbiAgICAgICAgaWYgKGN1cnJlbnRWZXJzaW9uKSB7XG4gICAgICAgICAgY2hlY2tBUElzKGN1cnJlbnRWZXJzaW9uLCBuYW1lLCBhcmdzLCByZXQsIHN0YWNrKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldFxuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB9XG4gIH0pXG4gIGRlZmluZVByb3BlcnRpZXMod3gsIGRlc2NyaXB0b3JzKVxufSlcbiIsIi8qIGdsb2JhbCBfX2FwcFNlcnZpY2VFbmdpbmVfXyAqL1xuY29uc3QgbWVzc2FnZXIgPSByZXF1aXJlKCcuLi8uLi9tZXNzYWdlcicpXG5jb25zdCBlZSA9IHJlcXVpcmUoJy4uLy4uL2V2ZW50ZW1pdHRlcicpXG5cbmNvbnN0IE1BWF9EQVRBX1NJWkUgPSAyNTYgKiAxMDI0XG5cbmZ1bmN0aW9uIHNlbmQoc2l6ZSwgcG9zaXRpb24sIHN0YWNrLCB2YXJzKSB7XG4gIG1lc3NhZ2VyLnB1Yignc2V0LWRhdGEtbGFyZ2UnLCB7XG4gICAgc2l6ZSxcbiAgICBwYWdlOiBfX2FwcFNlcnZpY2VFbmdpbmVfXy5nZXRDdXJyZW50Um91dGUoKSxcbiAgICBwb3NpdGlvbixcbiAgICBzdGFjayxcbiAgICB2YXJzLFxuICB9KVxufVxuXG5lZS5vbignc2V0LWRhdGEnLCBmdW5jdGlvbiAoZGF0YSwgcG9zaXRpb24sIHN0YWNrKSB7XG4gIGNvbnN0IGxlbiA9IEpTT04uc3RyaW5naWZ5KGRhdGEpLmxlbmd0aFxuICBpZiAobGVuID4gTUFYX0RBVEFfU0laRSkge1xuICAgIHNlbmQobGVuLCBwb3NpdGlvbiwgc3RhY2ssIE9iamVjdC5rZXlzKGRhdGEpLmpvaW4oJywnKSlcbiAgfVxufSlcblxubW9kdWxlLmV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uICgpIHt9XG4iLCIvKiBnbG9iYWwgX19hcHBTZXJ2aWNlRW5naW5lX18gKi9cbmNvbnN0IG1lc3NhZ2VyID0gcmVxdWlyZSgnLi4vLi4vbWVzc2FnZXInKVxuY29uc3QgZWUgPSByZXF1aXJlKCcuLi8uLi9ldmVudGVtaXR0ZXInKVxuXG5jb25zdCBPTkVfU0VDT05EID0gMTAwMFxuY29uc3QgTUFYX1NFVF9EQVRBX05VTSA9IDIwXG5cbmxldCBvcmlTZXRUaW1lb3V0ID0gc2V0VGltZW91dFxubGV0IHRpbWVTdGFtcHMgPSBbXVxubGV0IGxhc3RUUyA9IERhdGUubm93KClcbmxldCB0aW1lciA9IG51bGxcblxuZnVuY3Rpb24gc2VuZCh0aW1lcywgcG9zaXRpb24sIHN0YWNrKSB7XG4gIG1lc3NhZ2VyLnB1Yignc2V0LWRhdGEtZnJlcScsIHtcbiAgICB0aW1lcyxcbiAgICBwYWdlOiBfX2FwcFNlcnZpY2VFbmdpbmVfXy5nZXRDdXJyZW50Um91dGUoKSxcbiAgICBwb3NpdGlvbixcbiAgICBzdGFja1xuICB9KVxufVxuXG5mdW5jdGlvbiBjaGVjayhwb3NpdGlvbiwgc3RhY2spIHtcbiAgY2xlYXJUaW1lb3V0KHRpbWVyKVxuICBmb3IgKGxldCBpID0gMCwgbCA9IHRpbWVTdGFtcHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IHN1bSA9IDBcbiAgICBsZXQgaiA9IGlcbiAgICB3aGlsZSAoc3VtIDwgT05FX1NFQ09ORCAmJiBqIDwgbCkge1xuICAgICAgc3VtICs9IHRpbWVTdGFtcHNbal1cbiAgICAgIGorK1xuICAgIH1cbiAgICBpZiAoc3VtIDwgT05FX1NFQ09ORCkge1xuICAgICAgLy8gMeenkuWQjuayoeacieaWsOWinu+8jOWwseeul+S4gOasoVxuICAgICAgaWYgKGogLSBpID49IE1BWF9TRVRfREFUQV9OVU0pIHtcbiAgICAgICAgdGltZXIgPSBvcmlTZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZW5kKGogLSBpLCBwb3NpdGlvbiwgc3RhY2spXG4gICAgICAgICAgdGltZVN0YW1wcyA9IFtdXG4gICAgICAgIH0sIE9ORV9TRUNPTkQgLSBzdW0pXG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKGogLSBpID49IE1BWF9TRVRfREFUQV9OVU0pIHtcbiAgICAgIHNlbmQoaiAtIGksIHBvc2l0aW9uLCBzdGFjaylcbiAgICAgIHRpbWVTdGFtcHMgPSBbXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cbmVlLm9uKCdzZXQtZGF0YScsIGZ1bmN0aW9uIChkYXRhLCBwb3NpdGlvbiwgc3RhY2spIHtcbiAgaWYgKHBvc2l0aW9uICE9PSAnUGFnZScpIHtcbiAgICByZXR1cm5cbiAgfVxuICBjb25zdCBub3cgPSBEYXRlLm5vdygpXG4gIGNvbnN0IHRpbWVTdGFtcCA9IG5vdyAtIGxhc3RUU1xuICBsYXN0VFMgPSBub3dcbiAgaWYgKHRpbWVTdGFtcCA+IE9ORV9TRUNPTkQpIHsgLy8g6Iul5Ye6546w6Ze06ZqU5aSn5LqOMeenku+8jOWJjemdoueahOiusOW9leaXoOeUqFxuICAgIHRpbWVTdGFtcHMgPSBbXVxuICB9IGVsc2Uge1xuICAgIHRpbWVTdGFtcHMucHVzaCh0aW1lU3RhbXApXG4gIH1cbiAgaWYgKHRpbWVTdGFtcHMubGVuZ3RoID49IE1BWF9TRVRfREFUQV9OVU0pIHtcbiAgICBjaGVjayhwb3NpdGlvbiwgc3RhY2spXG4gIH1cbn0pXG5cbm1vZHVsZS5leHBvcnRzLmluaXQgPSBmdW5jdGlvbiAoc2V0VGltZW91dCkge1xuICBvcmlTZXRUaW1lb3V0ID0gc2V0VGltZW91dFxufVxuIiwiY29uc3QgbWVzc2FnZXIgPSByZXF1aXJlKCcuLi8uLi9tZXNzYWdlcicpXG5jb25zdCBlZSA9IHJlcXVpcmUoJy4uLy4uL2V2ZW50ZW1pdHRlcicpXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzJylcblxuZnVuY3Rpb24gc2VuZCh2YXJzLCBwb3NpdGlvbiwgc3RhY2spIHtcbiAgbWVzc2FnZXIucHViKCdzZXQtZGF0YS1uby1iaW5kaW5nJywge1xuICAgIHZhcnMsXG4gICAgcGFnZTogX19hcHBTZXJ2aWNlRW5naW5lX18uZ2V0Q3VycmVudFJvdXRlKCksXG4gICAgcG9zaXRpb24sXG4gICAgc3RhY2ssXG4gIH0pXG59XG5cbmVlLm9uKCdzZXQtZGF0YScsIGZ1bmN0aW9uKGRhdGEsIHBvc2l0aW9uLCBzdGFjaykge1xuICAvLyB1dGlscy5sb2coJ3NldC1kYXRhJywgZGF0YSlcbiAgc2VuZChPYmplY3Qua2V5cyhkYXRhKSwgcG9zaXRpb24sIHN0YWNrKVxufSlcblxubW9kdWxlLmV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uKCkge31cbiIsIi8qIGdsb2JhbCBfX2FwcFNlcnZpY2VFbmdpbmVfXyAqL1xuY29uc3QgbWVzc2FnZXIgPSByZXF1aXJlKCcuLi8uLi9tZXNzYWdlcicpXG5jb25zdCBlZSA9IHJlcXVpcmUoJy4uLy4uL2V2ZW50ZW1pdHRlcicpXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzJylcblxuY29uc3QgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHlcbmNvbnN0IF90aGlzID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXNcbn0oKSlcblxubGV0IG5vdEFwcGxpY2FibGUgPSB0cnVlXG5cbmZ1bmN0aW9uIHNlbmQocGFnZSwgbmFtZSwgc3RhY2spIHtcbiAgaWYgKHN0YWNrICYmIHN0YWNrLmxlbmd0aCkge1xuICAgIG1lc3NhZ2VyLnB1YigndGltZXItbm8tcmVjeWNsZScsIHtcbiAgICAgIG5hbWUsXG4gICAgICBwYWdlLFxuICAgICAgc3RhY2ssXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiB3cmFwKHRpbWVyRnVuYywgZnVuY05hbWUpIHtcbiAgY29uc3QgZnVuYyA9IGZ1bmN0aW9uIChmdW5jLCBkZWxheSA9IDAsIC4uLnJlc3RBcmdzKSB7XG4gICAgLy8g6LCD55So5a6a5pe25Zmo5pe255qEcGFnZVxuICAgIGxldCBpbmZvID0ge31cbiAgICBsZXQgY3VyclBhZ2UgPSBfX2FwcFNlcnZpY2VFbmdpbmVfXy5nZXRDdXJyZW50Um91dGUoKVxuICAgIGNvbnN0IG5ld0Z1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jLmFwcGx5KF90aGlzLCByZXN0QXJncylcbiAgICAgIC8vIOahhuaetuWGheiwg+eUqFxuICAgICAgaWYgKCFpbmZvLnN0YWNrIHx8ICFpbmZvLnN0YWNrLmxlbmd0aCkgcmV0dXJuXG4gICAgICBpZiAobm90QXBwbGljYWJsZSkge1xuICAgICAgICAvLyDosIPov4cgc2V0VGltZW91dO+8jOi/meS4quinhOWImeWwseaYr+mAgueUqOeahFxuICAgICAgICBub3RBcHBsaWNhYmxlID0gZmFsc2VcbiAgICAgICAgbWVzc2FnZXIucHViKCd0aW1lci1uby1yZWN5Y2xlLWFwcGxpY2FibGUnKVxuICAgICAgfVxuICAgICAgLy8g5a6a5pe25Zmo5omn6KGM5pe255qEcGFnZVxuICAgICAgY29uc3QgcGFnZSA9IF9fYXBwU2VydmljZUVuZ2luZV9fLmdldEN1cnJlbnRSb3V0ZSgpXG4gICAgICBjb25zdCBtYXRjaCA9IChpbmZvLmZ1bmNOYW1lIHx8ICcnKS5tYXRjaCgvQXVkaXRfKHNldFRpbWVvdXR8c2V0SW50ZXJ2YWwpXyguKikvKVxuICAgICAgaWYgKG1hdGNoICYmIG1hdGNoWzJdKSB7XG4gICAgICAgIGN1cnJQYWdlID0gbWF0Y2hbMl1cbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAocGFnZSAhPT0gY3VyclBhZ2UpICYmIHV0aWxzLmxvZyhgc2V0VGltZW91dCBob29rZWQuIGN1cnJQYWdlOiAke2N1cnJQYWdlfSwgcGFnZTogJHtwYWdlfSwgZnVuY05hbWU6ICR7ZnVuY05hbWV9LCBzdGFjazpgLCBpbmZvLnN0YWNrKVxuICAgICAgfVxuICAgICAgaWYgKHBhZ2UgIT09IGN1cnJQYWdlKSB7XG4gICAgICAgIHNlbmQoY3VyclBhZ2UsIGZ1bmNOYW1lLCBpbmZvLnN0YWNrKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscy5zdGF0dXMgPT09ICdydW5uaW5nJykge1xuICAgICAgLy8gc2V0VGltZW91dCBjYWxsYmFja+eahG5hbWXph4zorrDkuIvlvZPliY3nmoRwYWdlXG4gICAgICAvLyBjYWxsYmFja+WGjeiwg+eUqHNldFRpbWVvdXTnmoTor53lj6/ku6Xnn6XpgZPliJ3lp4twYWdl5piv5ZOq5Liq77yM5Lul5Yik5pat6Lef5b2T5YmN5piv5LiN5piv5ZCM5LiA5LiqXG4gICAgICBkZWZpbmVQcm9wZXJ0eShmdW5jLCAnbmFtZScsIHt3cml0YWJsZTogdHJ1ZX0pXG4gICAgICBmdW5jLm5hbWUgPSBgQXVkaXRfJHtmdW5jTmFtZX1fJHtjdXJyUGFnZX1gXG4gICAgICBpbmZvLnN0YWNrID0gdXRpbHMuZ2V0Q2FsbFN0YWNrKClcbiAgICB9XG5cbiAgICByZXR1cm4gdGltZXJGdW5jKHV0aWxzLnN0YXR1cyA9PT0gJ3J1bm5pbmcnID8gbmV3RnVuYyA6IGZ1bmMsIGRlbGF5KVxuICB9XG5cbiAgZGVmaW5lUHJvcGVydHkoZnVuYywgJ25hbWUnLCB7d3JpdGFibGU6IHRydWV9KVxuICBmdW5jLm5hbWUgPSBgQXVkaXRfJHtmdW5jTmFtZX1gXG4gIHJldHVybiBmdW5jXG59XG5cbmZ1bmN0aW9uIGRlZmluZVRpbWVyRnVuYyhvcmlTZXRUaW1lb3V0LCBvcmlTZXRJbnRlcnZhbCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZ2xvYmFsLWFzc2lnblxuICBzZXRJbnRlcnZhbCA9IHdyYXAob3JpU2V0SW50ZXJ2YWwsICdzZXRJbnRlcnZhbCcpXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1nbG9iYWwtYXNzaWduXG4gIHNldFRpbWVvdXQgPSB3cmFwKG9yaVNldFRpbWVvdXQsICdzZXRUaW1lb3V0Jylcbn1cblxubW9kdWxlLmV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uIChvcmlTZXRUaW1lb3V0LCBvcmlTZXRJbnRlcnZhbCkge1xuICBkZWZpbmVUaW1lckZ1bmMob3JpU2V0VGltZW91dCwgb3JpU2V0SW50ZXJ2YWwpXG59XG4iLCJjb25zdCBtZXNzYWdlciA9IHJlcXVpcmUoJy4uLy4uL21lc3NhZ2VyJylcbmNvbnN0IGVlID0gcmVxdWlyZSgnLi4vLi4vZXZlbnRlbWl0dGVyJylcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMnKVxuXG5sZXQgdGFiYmFyUGFnZXMgPSBbXVxubGV0IGN1cnJlbnRQYWdlcyA9IFtdXG5sZXQgdGFiYmFyRmlyc3RQYWdlID0gW11cbmlmICghIV9fd3hDb25maWcgJiYgISFfX3d4Q29uZmlnLnRhYkJhcikge1xuICB0YWJiYXJGaXJzdFBhZ2UgPSBfX3d4Q29uZmlnLnRhYkJhci5saXN0Lm1hcCgocGFnZSkgPT4gcGFnZS5wYWdlUGF0aC5yZXBsYWNlKCcuaHRtbCcsICcnKSlcbiAgLy91dGlscy5sb2coJ3RhYmJhckZpcnN0UGFnZScsIHRhYmJhckZpcnN0UGFnZSwgX193eENvbmZpZy50YWJCYXIubGlzdClcbn1cbmVlLm9uKCdzdG9wLWF1ZGl0JywgZnVuY3Rpb24oKSB7XG4gIGxldCBwYWdlcyA9IFtdXG4gIGZvciAobGV0IHBhZ2Ugb2YgY3VycmVudFBhZ2VzKSB7XG4gICAgcGFnZSAmJiBwYWdlcy5wdXNoKHBhZ2Uucm91dGUpXG4gIH1cbiAgcGFnZXMgPSBwYWdlcy5jb25jYXQodGFiYmFyUGFnZXMpXG4gIG1lc3NhZ2VyLnB1YigncGFnZS1pbmZvJywge3BhZ2VzfSlcbn0pXG5cbl9fYXBwU2VydmljZVNES19fLm9uQXBwUm91dGUoKGRhdGEpID0+IHtcbiAgbGV0IHBhZ2VzID0gX19hcHBTZXJ2aWNlRW5naW5lX18uZ2V0Q3VycmVudFBhZ2VzKClcbiAgLy91dGlscy5sb2coJ3BhZ2Vz5a6e5L6LJywgcGFnZXMsIGRhdGEpXG4gIGlmIChwYWdlc1swXSAmJiB0YWJiYXJQYWdlcy5pbmRleE9mKHBhZ2VzWzBdLnJvdXRlKSA8IDAgJiYgdGFiYmFyRmlyc3RQYWdlLmluZGV4T2YocGFnZXNbMF0ucm91dGUpID4gLTEpIHtcbiAgICAvLyAg56ys5LiA5Liq5qyh6L+b5YWl6L+Z5LiqdGFi6aG16Z2iLOS4lOehruWunuaYr+S4gOS4qnRhYmJhcumhtemdolxuICAgIHRhYmJhclBhZ2VzLnB1c2gocGFnZXNbMF0ucm91dGUpXG4gIH1cbiAgY3VycmVudFBhZ2VzID0gcGFnZXNcbiAgLy8g5oyq5YiwIHNyYy9qcy90YXNrcy9hcHBzZXJ2aWNlLmpzIOabtOWQiOeQhlxuICAvLyBtZXNzYWdlci5wdWIoJ2FwcC1yb3V0ZScsIGRhdGEpXG59KVxuXG5tb2R1bGUuZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oKSB7fVxuIl0sInNvdXJjZVJvb3QiOiIifQ==