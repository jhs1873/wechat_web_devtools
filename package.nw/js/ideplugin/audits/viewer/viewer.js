!function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=9)}([function(e,t,n){"use strict";(function(e,n){
/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
var a=Object.freeze({});function r(e){return null==e}function i(e){return null!=e}function o(e){return!0===e}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function c(e){return null!==e&&"object"==typeof e}var d=Object.prototype.toString;function l(e){return"[object Object]"===d.call(e)}function p(e){return"[object RegExp]"===d.call(e)}function u(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function f(e){return i(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function g(e){return null==e?"":Array.isArray(e)||l(e)&&e.toString===d?JSON.stringify(e,null,2):String(e)}function y(e){var t=parseFloat(e);return isNaN(t)?e:t}function x(e,t){for(var n=Object.create(null),a=e.split(","),r=0;r<a.length;r++)n[a[r]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var m=x("slot,component",!0),k=x("key,ref,slot,slot-scope,is");function h(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var v=Object.prototype.hasOwnProperty;function w(e,t){return v.call(e,t)}function b(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var _=/-(\w)/g,C=b(function(e){return e.replace(_,function(e,t){return t?t.toUpperCase():""})}),$=b(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),O=/\B([A-Z])/g,A=b(function(e){return e.replace(O,"-$1").toLowerCase()});var E=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var a=arguments.length;return a?a>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function T(e,t){t=t||0;for(var n=e.length-t,a=new Array(n);n--;)a[n]=e[n+t];return a}function P(e,t){for(var n in t)e[n]=t[n];return e}function S(e){for(var t={},n=0;n<e.length;n++)e[n]&&P(t,e[n]);return t}function I(e,t,n){}var j=function(e,t,n){return!1},M=function(e){return e};function D(e,t){if(e===t)return!0;var n=c(e),a=c(t);if(!n||!a)return!n&&!a&&String(e)===String(t);try{var r=Array.isArray(e),i=Array.isArray(t);if(r&&i)return e.length===t.length&&e.every(function(e,n){return D(e,t[n])});if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(r||i)return!1;var o=Object.keys(e),s=Object.keys(t);return o.length===s.length&&o.every(function(n){return D(e[n],t[n])})}catch(e){return!1}}function N(e,t){for(var n=0;n<e.length;n++)if(D(e[n],t))return n;return-1}function L(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var z="data-server-rendered",R=["component","directive","filter"],F=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],B={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:j,isReservedAttr:j,isUnknownElement:j,getTagNamespace:I,parsePlatformTagName:M,mustUseProp:j,async:!0,_lifecycleHooks:F},U=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function q(e,t,n,a){Object.defineProperty(e,t,{value:n,enumerable:!!a,writable:!0,configurable:!0})}var V=new RegExp("[^"+U.source+".$_\\d]");var G,J="__proto__"in{},K="undefined"!=typeof window,W="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,Z=W&&WXEnvironment.platform.toLowerCase(),Y=K&&window.navigator.userAgent.toLowerCase(),X=Y&&/msie|trident/.test(Y),Q=Y&&Y.indexOf("msie 9.0")>0,ee=Y&&Y.indexOf("edge/")>0,te=(Y&&Y.indexOf("android"),Y&&/iphone|ipad|ipod|ios/.test(Y)||"ios"===Z),ne=(Y&&/chrome\/\d+/.test(Y),Y&&/phantomjs/.test(Y),Y&&Y.match(/firefox\/(\d+)/)),ae={}.watch,re=!1;if(K)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){re=!0}}),window.addEventListener("test-passive",null,ie)}catch(e){}var oe=function(){return void 0===G&&(G=!K&&!W&&void 0!==e&&(e.process&&"server"===e.process.env.VUE_ENV)),G},se=K&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ce(e){return"function"==typeof e&&/native code/.test(e.toString())}var de,le="undefined"!=typeof Symbol&&ce(Symbol)&&"undefined"!=typeof Reflect&&ce(Reflect.ownKeys);de="undefined"!=typeof Set&&ce(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var pe=I,ue=0,fe=function(){this.id=ue++,this.subs=[]};fe.prototype.addSub=function(e){this.subs.push(e)},fe.prototype.removeSub=function(e){h(this.subs,e)},fe.prototype.depend=function(){fe.target&&fe.target.addDep(this)},fe.prototype.notify=function(){var e=this.subs.slice();for(var t=0,n=e.length;t<n;t++)e[t].update()},fe.target=null;var ge=[];function ye(e){ge.push(e),fe.target=e}function xe(){ge.pop(),fe.target=ge[ge.length-1]}var me=function(e,t,n,a,r,i,o,s){this.tag=e,this.data=t,this.children=n,this.text=a,this.elm=r,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},ke={child:{configurable:!0}};ke.child.get=function(){return this.componentInstance},Object.defineProperties(me.prototype,ke);var he=function(e){void 0===e&&(e="");var t=new me;return t.text=e,t.isComment=!0,t};function ve(e){return new me(void 0,void 0,void 0,String(e))}function we(e){var t=new me(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var be=Array.prototype,_e=Object.create(be);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=be[e];q(_e,e,function(){for(var n=[],a=arguments.length;a--;)n[a]=arguments[a];var r,i=t.apply(this,n),o=this.__ob__;switch(e){case"push":case"unshift":r=n;break;case"splice":r=n.slice(2)}return r&&o.observeArray(r),o.dep.notify(),i})});var Ce=Object.getOwnPropertyNames(_e),$e=!0;function Oe(e){$e=e}var Ae=function(e){this.value=e,this.dep=new fe,this.vmCount=0,q(e,"__ob__",this),Array.isArray(e)?(J?function(e,t){e.__proto__=t}(e,_e):function(e,t,n){for(var a=0,r=n.length;a<r;a++){var i=n[a];q(e,i,t[i])}}(e,_e,Ce),this.observeArray(e)):this.walk(e)};function Ee(e,t){var n;if(c(e)&&!(e instanceof me))return w(e,"__ob__")&&e.__ob__ instanceof Ae?n=e.__ob__:$e&&!oe()&&(Array.isArray(e)||l(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Ae(e)),t&&n&&n.vmCount++,n}function Te(e,t,n,a,r){var i=new fe,o=Object.getOwnPropertyDescriptor(e,t);if(!o||!1!==o.configurable){var s=o&&o.get,c=o&&o.set;s&&!c||2!==arguments.length||(n=e[t]);var d=!r&&Ee(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):n;return fe.target&&(i.depend(),d&&(d.dep.depend(),Array.isArray(t)&&function e(t){for(var n=void 0,a=0,r=t.length;a<r;a++)(n=t[a])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&e(n)}(t))),t},set:function(t){var a=s?s.call(e):n;t===a||t!=t&&a!=a||s&&!c||(c?c.call(e,t):n=t,d=!r&&Ee(t),i.notify())}})}}function Pe(e,t,n){if(Array.isArray(e)&&u(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var a=e.__ob__;return e._isVue||a&&a.vmCount?n:a?(Te(a.value,t,n),a.dep.notify(),n):(e[t]=n,n)}function Se(e,t){if(Array.isArray(e)&&u(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount||w(e,t)&&(delete e[t],n&&n.dep.notify())}}Ae.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Te(e,t[n])},Ae.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Ee(e[t])};var Ie=B.optionMergeStrategies;function je(e,t){if(!t)return e;for(var n,a,r,i=le?Reflect.ownKeys(t):Object.keys(t),o=0;o<i.length;o++)"__ob__"!==(n=i[o])&&(a=e[n],r=t[n],w(e,n)?a!==r&&l(a)&&l(r)&&je(a,r):Pe(e,n,r));return e}function Me(e,t,n){return n?function(){var a="function"==typeof t?t.call(n,n):t,r="function"==typeof e?e.call(n,n):e;return a?je(a,r):r}:t?e?function(){return je("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function De(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function Ne(e,t,n,a){var r=Object.create(e||null);return t?P(r,t):r}Ie.data=function(e,t,n){return n?Me(e,t,n):t&&"function"!=typeof t?e:Me(e,t)},F.forEach(function(e){Ie[e]=De}),R.forEach(function(e){Ie[e+"s"]=Ne}),Ie.watch=function(e,t,n,a){if(e===ae&&(e=void 0),t===ae&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var r={};for(var i in P(r,e),t){var o=r[i],s=t[i];o&&!Array.isArray(o)&&(o=[o]),r[i]=o?o.concat(s):Array.isArray(s)?s:[s]}return r},Ie.props=Ie.methods=Ie.inject=Ie.computed=function(e,t,n,a){if(!e)return t;var r=Object.create(null);return P(r,e),t&&P(r,t),r},Ie.provide=Me;var Le=function(e,t){return void 0===t?e:t};function ze(e,t,n){if("function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var a,r,i={};if(Array.isArray(n))for(a=n.length;a--;)"string"==typeof(r=n[a])&&(i[C(r)]={type:null});else if(l(n))for(var o in n)r=n[o],i[C(o)]=l(r)?r:{type:r};e.props=i}}(t),function(e,t){var n=e.inject;if(n){var a=e.inject={};if(Array.isArray(n))for(var r=0;r<n.length;r++)a[n[r]]={from:n[r]};else if(l(n))for(var i in n){var o=n[i];a[i]=l(o)?P({from:i},o):{from:o}}}}(t),function(e){var t=e.directives;if(t)for(var n in t){var a=t[n];"function"==typeof a&&(t[n]={bind:a,update:a})}}(t),!t._base&&(t.extends&&(e=ze(e,t.extends,n)),t.mixins))for(var a=0,r=t.mixins.length;a<r;a++)e=ze(e,t.mixins[a],n);var i,o={};for(i in e)s(i);for(i in t)w(e,i)||s(i);function s(a){var r=Ie[a]||Le;o[a]=r(e[a],t[a],n,a)}return o}function Re(e,t,n,a){if("string"==typeof n){var r=e[t];if(w(r,n))return r[n];var i=C(n);if(w(r,i))return r[i];var o=$(i);return w(r,o)?r[o]:r[n]||r[i]||r[o]}}function Fe(e,t,n,a){var r=t[e],i=!w(n,e),o=n[e],s=He(Boolean,r.type);if(s>-1)if(i&&!w(r,"default"))o=!1;else if(""===o||o===A(e)){var c=He(String,r.type);(c<0||s<c)&&(o=!0)}if(void 0===o){o=function(e,t,n){if(!w(t,"default"))return;var a=t.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return"function"==typeof a&&"Function"!==Be(t.type)?a.call(e):a}(a,r,e);var d=$e;Oe(!0),Ee(o),Oe(d)}return o}function Be(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function Ue(e,t){return Be(e)===Be(t)}function He(e,t){if(!Array.isArray(t))return Ue(t,e)?0:-1;for(var n=0,a=t.length;n<a;n++)if(Ue(t[n],e))return n;return-1}function qe(e,t,n){ye();try{if(t)for(var a=t;a=a.$parent;){var r=a.$options.errorCaptured;if(r)for(var i=0;i<r.length;i++)try{if(!1===r[i].call(a,e,t,n))return}catch(e){Ge(e,a,"errorCaptured hook")}}Ge(e,t,n)}finally{xe()}}function Ve(e,t,n,a,r){var i;try{(i=n?e.apply(t,n):e.call(t))&&!i._isVue&&f(i)&&!i._handled&&(i.catch(function(e){return qe(e,a,r+" (Promise/async)")}),i._handled=!0)}catch(e){qe(e,a,r)}return i}function Ge(e,t,n){if(B.errorHandler)try{return B.errorHandler.call(null,e,t,n)}catch(t){t!==e&&Je(t,null,"config.errorHandler")}Je(e,t,n)}function Je(e,t,n){if(!K&&!W||"undefined"==typeof console)throw e;console.error(e)}var Ke,We=!1,Ze=[],Ye=!1;function Xe(){Ye=!1;var e=Ze.slice(0);Ze.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&ce(Promise)){var Qe=Promise.resolve();Ke=function(){Qe.then(Xe),te&&setTimeout(I)},We=!0}else if(X||"undefined"==typeof MutationObserver||!ce(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Ke=void 0!==n&&ce(n)?function(){n(Xe)}:function(){setTimeout(Xe,0)};else{var et=1,tt=new MutationObserver(Xe),nt=document.createTextNode(String(et));tt.observe(nt,{characterData:!0}),Ke=function(){et=(et+1)%2,nt.data=String(et)},We=!0}function at(e,t){var n;if(Ze.push(function(){if(e)try{e.call(t)}catch(e){qe(e,t,"nextTick")}else n&&n(t)}),Ye||(Ye=!0,Ke()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){n=e})}var rt=new de;function it(e){!function e(t,n){var a,r;var i=Array.isArray(t);if(!i&&!c(t)||Object.isFrozen(t)||t instanceof me)return;if(t.__ob__){var o=t.__ob__.dep.id;if(n.has(o))return;n.add(o)}if(i)for(a=t.length;a--;)e(t[a],n);else for(r=Object.keys(t),a=r.length;a--;)e(t[r[a]],n)}(e,rt),rt.clear()}var ot=b(function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),a="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=a?e.slice(1):e,once:n,capture:a,passive:t}});function st(e,t){function n(){var e=arguments,a=n.fns;if(!Array.isArray(a))return Ve(a,null,arguments,t,"v-on handler");for(var r=a.slice(),i=0;i<r.length;i++)Ve(r[i],null,e,t,"v-on handler")}return n.fns=e,n}function ct(e,t,n,a,i,s){var c,d,l,p;for(c in e)d=e[c],l=t[c],p=ot(c),r(d)||(r(l)?(r(d.fns)&&(d=e[c]=st(d,s)),o(p.once)&&(d=e[c]=i(p.name,d,p.capture)),n(p.name,d,p.capture,p.passive,p.params)):d!==l&&(l.fns=d,e[c]=l));for(c in t)r(e[c])&&a((p=ot(c)).name,t[c],p.capture)}function dt(e,t,n){var a;e instanceof me&&(e=e.data.hook||(e.data.hook={}));var s=e[t];function c(){n.apply(this,arguments),h(a.fns,c)}r(s)?a=st([c]):i(s.fns)&&o(s.merged)?(a=s).fns.push(c):a=st([s,c]),a.merged=!0,e[t]=a}function lt(e,t,n,a,r){if(i(t)){if(w(t,n))return e[n]=t[n],r||delete t[n],!0;if(w(t,a))return e[n]=t[a],r||delete t[a],!0}return!1}function pt(e){return s(e)?[ve(e)]:Array.isArray(e)?function e(t,n){var a=[];var c,d,l,p;for(c=0;c<t.length;c++)r(d=t[c])||"boolean"==typeof d||(l=a.length-1,p=a[l],Array.isArray(d)?d.length>0&&(ut((d=e(d,(n||"")+"_"+c))[0])&&ut(p)&&(a[l]=ve(p.text+d[0].text),d.shift()),a.push.apply(a,d)):s(d)?ut(p)?a[l]=ve(p.text+d):""!==d&&a.push(ve(d)):ut(d)&&ut(p)?a[l]=ve(p.text+d.text):(o(t._isVList)&&i(d.tag)&&r(d.key)&&i(n)&&(d.key="__vlist"+n+"_"+c+"__"),a.push(d)));return a}(e):void 0}function ut(e){return i(e)&&i(e.text)&&!1===e.isComment}function ft(e,t){if(e){for(var n=Object.create(null),a=le?Reflect.ownKeys(e):Object.keys(e),r=0;r<a.length;r++){var i=a[r];if("__ob__"!==i){for(var o=e[i].from,s=t;s;){if(s._provided&&w(s._provided,o)){n[i]=s._provided[o];break}s=s.$parent}if(!s)if("default"in e[i]){var c=e[i].default;n[i]="function"==typeof c?c.call(t):c}else 0}}return n}}function gt(e,t){if(!e||!e.length)return{};for(var n={},a=0,r=e.length;a<r;a++){var i=e[a],o=i.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,i.context!==t&&i.fnContext!==t||!o||null==o.slot)(n.default||(n.default=[])).push(i);else{var s=o.slot,c=n[s]||(n[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var d in n)n[d].every(yt)&&delete n[d];return n}function yt(e){return e.isComment&&!e.asyncFactory||" "===e.text}function xt(e,t,n){var r,i=Object.keys(t).length>0,o=e?!!e.$stable:!i,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(o&&n&&n!==a&&s===n.$key&&!i&&!n.$hasNormal)return n;for(var c in r={},e)e[c]&&"$"!==c[0]&&(r[c]=mt(t,c,e[c]))}else r={};for(var d in t)d in r||(r[d]=kt(t,d));return e&&Object.isExtensible(e)&&(e._normalized=r),q(r,"$stable",o),q(r,"$key",s),q(r,"$hasNormal",i),r}function mt(e,t,n){var a=function(){var e=arguments.length?n.apply(null,arguments):n({});return(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:pt(e))&&(0===e.length||1===e.length&&e[0].isComment)?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:a,enumerable:!0,configurable:!0}),a}function kt(e,t){return function(){return e[t]}}function ht(e,t){var n,a,r,o,s;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),a=0,r=e.length;a<r;a++)n[a]=t(e[a],a);else if("number"==typeof e)for(n=new Array(e),a=0;a<e;a++)n[a]=t(a+1,a);else if(c(e))if(le&&e[Symbol.iterator]){n=[];for(var d=e[Symbol.iterator](),l=d.next();!l.done;)n.push(t(l.value,n.length)),l=d.next()}else for(o=Object.keys(e),n=new Array(o.length),a=0,r=o.length;a<r;a++)s=o[a],n[a]=t(e[s],s,a);return i(n)||(n=[]),n._isVList=!0,n}function vt(e,t,n,a){var r,i=this.$scopedSlots[e];i?(n=n||{},a&&(n=P(P({},a),n)),r=i(n)||t):r=this.$slots[e]||t;var o=n&&n.slot;return o?this.$createElement("template",{slot:o},r):r}function wt(e){return Re(this.$options,"filters",e)||M}function bt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function _t(e,t,n,a,r){var i=B.keyCodes[t]||n;return r&&a&&!B.keyCodes[t]?bt(r,a):i?bt(i,e):a?A(a)!==t:void 0}function Ct(e,t,n,a,r){if(n)if(c(n)){var i;Array.isArray(n)&&(n=S(n));var o=function(o){if("class"===o||"style"===o||k(o))i=e;else{var s=e.attrs&&e.attrs.type;i=a||B.mustUseProp(t,s,o)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var c=C(o),d=A(o);c in i||d in i||(i[o]=n[o],r&&((e.on||(e.on={}))["update:"+o]=function(e){n[o]=e}))};for(var s in n)o(s)}else;return e}function $t(e,t){var n=this._staticTrees||(this._staticTrees=[]),a=n[e];return a&&!t?a:(At(a=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),a)}function Ot(e,t,n){return At(e,"__once__"+t+(n?"_"+n:""),!0),e}function At(e,t,n){if(Array.isArray(e))for(var a=0;a<e.length;a++)e[a]&&"string"!=typeof e[a]&&Et(e[a],t+"_"+a,n);else Et(e,t,n)}function Et(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function Tt(e,t){if(t)if(l(t)){var n=e.on=e.on?P({},e.on):{};for(var a in t){var r=n[a],i=t[a];n[a]=r?[].concat(r,i):i}}else;return e}function Pt(e,t,n,a){t=t||{$stable:!n};for(var r=0;r<e.length;r++){var i=e[r];Array.isArray(i)?Pt(i,t,n):i&&(i.proxy&&(i.fn.proxy=!0),t[i.key]=i.fn)}return a&&(t.$key=a),t}function St(e,t){for(var n=0;n<t.length;n+=2){var a=t[n];"string"==typeof a&&a&&(e[t[n]]=t[n+1])}return e}function It(e,t){return"string"==typeof e?t+e:e}function jt(e){e._o=Ot,e._n=y,e._s=g,e._l=ht,e._t=vt,e._q=D,e._i=N,e._m=$t,e._f=wt,e._k=_t,e._b=Ct,e._v=ve,e._e=he,e._u=Pt,e._g=Tt,e._d=St,e._p=It}function Mt(e,t,n,r,i){var s,c=this,d=i.options;w(r,"_uid")?(s=Object.create(r))._original=r:(s=r,r=r._original);var l=o(d._compiled),p=!l;this.data=e,this.props=t,this.children=n,this.parent=r,this.listeners=e.on||a,this.injections=ft(d.inject,r),this.slots=function(){return c.$slots||xt(e.scopedSlots,c.$slots=gt(n,r)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return xt(e.scopedSlots,this.slots())}}),l&&(this.$options=d,this.$slots=this.slots(),this.$scopedSlots=xt(e.scopedSlots,this.$slots)),d._scopeId?this._c=function(e,t,n,a){var i=Ht(s,e,t,n,a,p);return i&&!Array.isArray(i)&&(i.fnScopeId=d._scopeId,i.fnContext=r),i}:this._c=function(e,t,n,a){return Ht(s,e,t,n,a,p)}}function Dt(e,t,n,a,r){var i=we(e);return i.fnContext=n,i.fnOptions=a,t.slot&&((i.data||(i.data={})).slot=t.slot),i}function Nt(e,t){for(var n in t)e[C(n)]=t[n]}jt(Mt.prototype);var Lt={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;Lt.prepatch(n,n)}else{(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},a=e.data.inlineTemplate;i(a)&&(n.render=a.render,n.staticRenderFns=a.staticRenderFns);return new e.componentOptions.Ctor(n)}(e,Qt)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,r,i){0;var o=r.data.scopedSlots,s=e.$scopedSlots,c=!!(o&&!o.$stable||s!==a&&!s.$stable||o&&e.$scopedSlots.$key!==o.$key),d=!!(i||e.$options._renderChildren||c);e.$options._parentVnode=r,e.$vnode=r,e._vnode&&(e._vnode.parent=r);if(e.$options._renderChildren=i,e.$attrs=r.data.attrs||a,e.$listeners=n||a,t&&e.$options.props){Oe(!1);for(var l=e._props,p=e.$options._propKeys||[],u=0;u<p.length;u++){var f=p[u],g=e.$options.props;l[f]=Fe(f,g,t,e)}Oe(!0),e.$options.propsData=t}n=n||a;var y=e.$options._parentListeners;e.$options._parentListeners=n,Xt(e,n,y),d&&(e.$slots=gt(i,r.context),e.$forceUpdate());0}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,a=e.componentInstance;a._isMounted||(a._isMounted=!0,an(a,"mounted")),e.data.keepAlive&&(n._isMounted?((t=a)._inactive=!1,on.push(t)):nn(a,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,n){if(n&&(t._directInactive=!0,tn(t)))return;if(!t._inactive){t._inactive=!0;for(var a=0;a<t.$children.length;a++)e(t.$children[a]);an(t,"deactivated")}}(t,!0):t.$destroy())}},zt=Object.keys(Lt);function Rt(e,t,n,s,d){if(!r(e)){var l=n.$options._base;if(c(e)&&(e=l.extend(e)),"function"==typeof e){var p;if(r(e.cid)&&void 0===(e=function(e,t){if(o(e.error)&&i(e.errorComp))return e.errorComp;if(i(e.resolved))return e.resolved;var n=Vt;n&&i(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n);if(o(e.loading)&&i(e.loadingComp))return e.loadingComp;if(n&&!i(e.owners)){var a=e.owners=[n],s=!0,d=null,l=null;n.$on("hook:destroyed",function(){return h(a,n)});var p=function(e){for(var t=0,n=a.length;t<n;t++)a[t].$forceUpdate();e&&(a.length=0,null!==d&&(clearTimeout(d),d=null),null!==l&&(clearTimeout(l),l=null))},u=L(function(n){e.resolved=Gt(n,t),s?a.length=0:p(!0)}),g=L(function(t){i(e.errorComp)&&(e.error=!0,p(!0))}),y=e(u,g);return c(y)&&(f(y)?r(e.resolved)&&y.then(u,g):f(y.component)&&(y.component.then(u,g),i(y.error)&&(e.errorComp=Gt(y.error,t)),i(y.loading)&&(e.loadingComp=Gt(y.loading,t),0===y.delay?e.loading=!0:d=setTimeout(function(){d=null,r(e.resolved)&&r(e.error)&&(e.loading=!0,p(!1))},y.delay||200)),i(y.timeout)&&(l=setTimeout(function(){l=null,r(e.resolved)&&g(null)},y.timeout)))),s=!1,e.loading?e.loadingComp:e.resolved}}(p=e,l)))return function(e,t,n,a,r){var i=he();return i.asyncFactory=e,i.asyncMeta={data:t,context:n,children:a,tag:r},i}(p,t,n,s,d);t=t||{},On(e),i(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",a=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var r=t.on||(t.on={}),o=r[a],s=t.model.callback;i(o)?(Array.isArray(o)?-1===o.indexOf(s):o!==s)&&(r[a]=[s].concat(o)):r[a]=s}(e.options,t);var u=function(e,t,n){var a=t.options.props;if(!r(a)){var o={},s=e.attrs,c=e.props;if(i(s)||i(c))for(var d in a){var l=A(d);lt(o,c,d,l,!0)||lt(o,s,d,l,!1)}return o}}(t,e);if(o(e.options.functional))return function(e,t,n,r,o){var s=e.options,c={},d=s.props;if(i(d))for(var l in d)c[l]=Fe(l,d,t||a);else i(n.attrs)&&Nt(c,n.attrs),i(n.props)&&Nt(c,n.props);var p=new Mt(n,c,o,r,e),u=s.render.call(null,p._c,p);if(u instanceof me)return Dt(u,n,p.parent,s);if(Array.isArray(u)){for(var f=pt(u)||[],g=new Array(f.length),y=0;y<f.length;y++)g[y]=Dt(f[y],n,p.parent,s);return g}}(e,u,t,n,s);var g=t.on;if(t.on=t.nativeOn,o(e.options.abstract)){var y=t.slot;t={},y&&(t.slot=y)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<zt.length;n++){var a=zt[n],r=t[a],i=Lt[a];r===i||r&&r._merged||(t[a]=r?Ft(i,r):i)}}(t);var x=e.options.name||d;return new me("vue-component-"+e.cid+(x?"-"+x:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:u,listeners:g,tag:d,children:s},p)}}}function Ft(e,t){var n=function(n,a){e(n,a),t(n,a)};return n._merged=!0,n}var Bt=1,Ut=2;function Ht(e,t,n,a,d,l){return(Array.isArray(n)||s(n))&&(d=a,a=n,n=void 0),o(l)&&(d=Ut),function(e,t,n,a,s){if(i(n)&&i(n.__ob__))return he();i(n)&&i(n.is)&&(t=n.is);if(!t)return he();0;Array.isArray(a)&&"function"==typeof a[0]&&((n=n||{}).scopedSlots={default:a[0]},a.length=0);s===Ut?a=pt(a):s===Bt&&(a=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(a));var d,l;if("string"==typeof t){var p;l=e.$vnode&&e.$vnode.ns||B.getTagNamespace(t),d=B.isReservedTag(t)?new me(B.parsePlatformTagName(t),n,a,void 0,void 0,e):n&&n.pre||!i(p=Re(e.$options,"components",t))?new me(t,n,a,void 0,void 0,e):Rt(p,n,e,a,t)}else d=Rt(t,n,e,a);return Array.isArray(d)?d:i(d)?(i(l)&&function e(t,n,a){t.ns=n;"foreignObject"===t.tag&&(n=void 0,a=!0);if(i(t.children))for(var s=0,c=t.children.length;s<c;s++){var d=t.children[s];i(d.tag)&&(r(d.ns)||o(a)&&"svg"!==d.tag)&&e(d,n,a)}}(d,l),i(n)&&function(e){c(e.style)&&it(e.style);c(e.class)&&it(e.class)}(n),d):he()}(e,t,n,a,d)}var qt,Vt=null;function Gt(e,t){return(e.__esModule||le&&"Module"===e[Symbol.toStringTag])&&(e=e.default),c(e)?t.extend(e):e}function Jt(e){return e.isComment&&e.asyncFactory}function Kt(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(i(n)&&(i(n.componentOptions)||Jt(n)))return n}}function Wt(e,t){qt.$on(e,t)}function Zt(e,t){qt.$off(e,t)}function Yt(e,t){var n=qt;return function a(){var r=t.apply(null,arguments);null!==r&&n.$off(e,a)}}function Xt(e,t,n){qt=e,ct(t,n||{},Wt,Zt,Yt,e),qt=void 0}var Qt=null;function en(e){var t=Qt;return Qt=e,function(){Qt=t}}function tn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function nn(e,t){if(t){if(e._directInactive=!1,tn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)nn(e.$children[n]);an(e,"activated")}}function an(e,t){ye();var n=e.$options[t],a=t+" hook";if(n)for(var r=0,i=n.length;r<i;r++)Ve(n[r],e,null,e,a);e._hasHookEvent&&e.$emit("hook:"+t),xe()}var rn=[],on=[],sn={},cn=!1,dn=!1,ln=0;var pn=0,un=Date.now;if(K&&!X){var fn=window.performance;fn&&"function"==typeof fn.now&&un()>document.createEvent("Event").timeStamp&&(un=function(){return fn.now()})}function gn(){var e,t;for(pn=un(),dn=!0,rn.sort(function(e,t){return e.id-t.id}),ln=0;ln<rn.length;ln++)(e=rn[ln]).before&&e.before(),t=e.id,sn[t]=null,e.run();var n=on.slice(),a=rn.slice();ln=rn.length=on.length=0,sn={},cn=dn=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,nn(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],a=n.vm;a._watcher===n&&a._isMounted&&!a._isDestroyed&&an(a,"updated")}}(a),se&&B.devtools&&se.emit("flush")}var yn=0,xn=function(e,t,n,a,r){this.vm=e,r&&(e._watcher=this),e._watchers.push(this),a?(this.deep=!!a.deep,this.user=!!a.user,this.lazy=!!a.lazy,this.sync=!!a.sync,this.before=a.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++yn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new de,this.newDepIds=new de,this.expression="","function"==typeof t?this.getter=t:(this.getter=function(e){if(!V.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=I)),this.value=this.lazy?void 0:this.get()};xn.prototype.get=function(){var e;ye(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;qe(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&it(e),xe(),this.cleanupDeps()}return e},xn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},xn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},xn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==sn[t]){if(sn[t]=!0,dn){for(var n=rn.length-1;n>ln&&rn[n].id>e.id;)n--;rn.splice(n+1,0,e)}else rn.push(e);cn||(cn=!0,at(gn))}}(this)},xn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||c(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){qe(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},xn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},xn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},xn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||h(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var mn={enumerable:!0,configurable:!0,get:I,set:I};function kn(e,t,n){mn.get=function(){return this[t][n]},mn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,mn)}function hn(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},a=e._props={},r=e.$options._propKeys=[];e.$parent&&Oe(!1);var i=function(i){r.push(i);var o=Fe(i,t,n,e);Te(a,i,o),i in e||kn(e,"_props",i)};for(var o in t)i(o);Oe(!0)}(e,t.props),t.methods&&function(e,t){e.$options.props;for(var n in t)e[n]="function"!=typeof t[n]?I:E(t[n],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;l(t=e._data="function"==typeof t?function(e,t){ye();try{return e.call(t,t)}catch(e){return qe(e,t,"data()"),{}}finally{xe()}}(t,e):t||{})||(t={});var n=Object.keys(t),a=e.$options.props,r=(e.$options.methods,n.length);for(;r--;){var i=n[r];0,a&&w(a,i)||H(i)||kn(e,"_data",i)}Ee(t,!0)}(e):Ee(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),a=oe();for(var r in t){var i=t[r],o="function"==typeof i?i:i.get;0,a||(n[r]=new xn(e,o||I,I,vn)),r in e||wn(e,r,i)}}(e,t.computed),t.watch&&t.watch!==ae&&function(e,t){for(var n in t){var a=t[n];if(Array.isArray(a))for(var r=0;r<a.length;r++)Cn(e,n,a[r]);else Cn(e,n,a)}}(e,t.watch)}var vn={lazy:!0};function wn(e,t,n){var a=!oe();"function"==typeof n?(mn.get=a?bn(t):_n(n),mn.set=I):(mn.get=n.get?a&&!1!==n.cache?bn(t):_n(n.get):I,mn.set=n.set||I),Object.defineProperty(e,t,mn)}function bn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),fe.target&&t.depend(),t.value}}function _n(e){return function(){return e.call(this,this)}}function Cn(e,t,n,a){return l(n)&&(a=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,a)}var $n=0;function On(e){var t=e.options;if(e.super){var n=On(e.super);if(n!==e.superOptions){e.superOptions=n;var a=function(e){var t,n=e.options,a=e.sealedOptions;for(var r in n)n[r]!==a[r]&&(t||(t={}),t[r]=n[r]);return t}(e);a&&P(e.extendOptions,a),(t=e.options=ze(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function An(e){this._init(e)}function En(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,a=n.cid,r=e._Ctor||(e._Ctor={});if(r[a])return r[a];var i=e.name||n.options.name;var o=function(e){this._init(e)};return(o.prototype=Object.create(n.prototype)).constructor=o,o.cid=t++,o.options=ze(n.options,e),o.super=n,o.options.props&&function(e){var t=e.options.props;for(var n in t)kn(e.prototype,"_props",n)}(o),o.options.computed&&function(e){var t=e.options.computed;for(var n in t)wn(e.prototype,n,t[n])}(o),o.extend=n.extend,o.mixin=n.mixin,o.use=n.use,R.forEach(function(e){o[e]=n[e]}),i&&(o.options.components[i]=o),o.superOptions=n.options,o.extendOptions=e,o.sealedOptions=P({},o.options),r[a]=o,o}}function Tn(e){return e&&(e.Ctor.options.name||e.tag)}function Pn(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!p(e)&&e.test(t)}function Sn(e,t){var n=e.cache,a=e.keys,r=e._vnode;for(var i in n){var o=n[i];if(o){var s=Tn(o.componentOptions);s&&!t(s)&&In(n,i,a,r)}}}function In(e,t,n,a){var r=e[t];!r||a&&r.tag===a.tag||r.componentInstance.$destroy(),e[t]=null,h(n,t)}!function(e){e.prototype._init=function(e){var t=this;t._uid=$n++,t._isVue=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),a=t._parentVnode;n.parent=t.parent,n._parentVnode=a;var r=a.componentOptions;n.propsData=r.propsData,n._parentListeners=r.listeners,n._renderChildren=r.children,n._componentTag=r.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(t,e):t.$options=ze(On(t.constructor),e||{},t),t._renderProxy=t,t._self=t,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(t),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Xt(e,t)}(t),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,r=n&&n.context;e.$slots=gt(t._renderChildren,r),e.$scopedSlots=a,e._c=function(t,n,a,r){return Ht(e,t,n,a,r,!1)},e.$createElement=function(t,n,a,r){return Ht(e,t,n,a,r,!0)};var i=n&&n.data;Te(e,"$attrs",i&&i.attrs||a,null,!0),Te(e,"$listeners",t._parentListeners||a,null,!0)}(t),an(t,"beforeCreate"),function(e){var t=ft(e.$options.inject,e);t&&(Oe(!1),Object.keys(t).forEach(function(n){Te(e,n,t[n])}),Oe(!0))}(t),hn(t),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(t),an(t,"created"),t.$options.el&&t.$mount(t.$options.el)}}(An),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=Pe,e.prototype.$delete=Se,e.prototype.$watch=function(e,t,n){if(l(t))return Cn(this,e,t,n);(n=n||{}).user=!0;var a=new xn(this,e,t,n);if(n.immediate)try{t.call(this,a.value)}catch(e){qe(e,this,'callback for immediate watcher "'+a.expression+'"')}return function(){a.teardown()}}}(An),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var a=this;if(Array.isArray(e))for(var r=0,i=e.length;r<i;r++)a.$on(e[r],n);else(a._events[e]||(a._events[e]=[])).push(n),t.test(e)&&(a._hasHookEvent=!0);return a},e.prototype.$once=function(e,t){var n=this;function a(){n.$off(e,a),t.apply(n,arguments)}return a.fn=t,n.$on(e,a),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var a=0,r=e.length;a<r;a++)n.$off(e[a],t);return n}var i,o=n._events[e];if(!o)return n;if(!t)return n._events[e]=null,n;for(var s=o.length;s--;)if((i=o[s])===t||i.fn===t){o.splice(s,1);break}return n},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?T(n):n;for(var a=T(arguments,1),r='event handler for "'+e+'"',i=0,o=n.length;i<o;i++)Ve(n[i],t,a,t,r)}return t}}(An),function(e){e.prototype._update=function(e,t){var n=this,a=n.$el,r=n._vnode,i=en(n);n._vnode=e,n.$el=r?n.__patch__(r,e):n.__patch__(n.$el,e,t,!1),i(),a&&(a.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){an(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||h(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),an(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(An),function(e){jt(e.prototype),e.prototype.$nextTick=function(e){return at(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,a=n.render,r=n._parentVnode;r&&(t.$scopedSlots=xt(r.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=r;try{Vt=t,e=a.call(t._renderProxy,t.$createElement)}catch(n){qe(n,t,"render"),e=t._vnode}finally{Vt=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof me||(e=he()),e.parent=r,e}}(An);var jn=[String,RegExp,Array],Mn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:jn,exclude:jn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)In(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",function(t){Sn(e,function(e){return Pn(t,e)})}),this.$watch("exclude",function(t){Sn(e,function(e){return!Pn(t,e)})})},render:function(){var e=this.$slots.default,t=Kt(e),n=t&&t.componentOptions;if(n){var a=Tn(n),r=this.include,i=this.exclude;if(r&&(!a||!Pn(r,a))||i&&a&&Pn(i,a))return t;var o=this.cache,s=this.keys,c=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;o[c]?(t.componentInstance=o[c].componentInstance,h(s,c),s.push(c)):(o[c]=t,s.push(c),this.max&&s.length>parseInt(this.max)&&In(o,s[0],s,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return B}};Object.defineProperty(e,"config",t),e.util={warn:pe,extend:P,mergeOptions:ze,defineReactive:Te},e.set=Pe,e.delete=Se,e.nextTick=at,e.observable=function(e){return Ee(e),e},e.options=Object.create(null),R.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,P(e.options.components,Mn),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=T(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=ze(this.options,e),this}}(e),En(e),function(e){R.forEach(function(t){e[t]=function(e,n){return n?("component"===t&&l(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}})}(e)}(An),Object.defineProperty(An.prototype,"$isServer",{get:oe}),Object.defineProperty(An.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(An,"FunctionalRenderContext",{value:Mt}),An.version="2.6.10";var Dn=x("style,class"),Nn=x("input,textarea,option,select,progress"),Ln=function(e,t,n){return"value"===n&&Nn(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},zn=x("contenteditable,draggable,spellcheck"),Rn=x("events,caret,typing,plaintext-only"),Fn=function(e,t){return Vn(t)||"false"===t?"false":"contenteditable"===e&&Rn(t)?t:"true"},Bn=x("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Un="http://www.w3.org/1999/xlink",Hn=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},qn=function(e){return Hn(e)?e.slice(6,e.length):""},Vn=function(e){return null==e||!1===e};function Gn(e){for(var t=e.data,n=e,a=e;i(a.componentInstance);)(a=a.componentInstance._vnode)&&a.data&&(t=Jn(a.data,t));for(;i(n=n.parent);)n&&n.data&&(t=Jn(t,n.data));return function(e,t){if(i(e)||i(t))return Kn(e,Wn(t));return""}(t.staticClass,t.class)}function Jn(e,t){return{staticClass:Kn(e.staticClass,t.staticClass),class:i(e.class)?[e.class,t.class]:t.class}}function Kn(e,t){return e?t?e+" "+t:e:t||""}function Wn(e){return Array.isArray(e)?function(e){for(var t,n="",a=0,r=e.length;a<r;a++)i(t=Wn(e[a]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):c(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var Zn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Yn=x("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Xn=x("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Qn=function(e){return Yn(e)||Xn(e)};function ea(e){return Xn(e)?"svg":"math"===e?"math":void 0}var ta=Object.create(null);var na=x("text,number,password,search,email,tel,url");function aa(e){if("string"==typeof e){var t=document.querySelector(e);return t||document.createElement("div")}return e}var ra=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e?n:(t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(e,t){return document.createElementNS(Zn[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),ia={create:function(e,t){oa(t)},update:function(e,t){e.data.ref!==t.data.ref&&(oa(e,!0),oa(t))},destroy:function(e){oa(e,!0)}};function oa(e,t){var n=e.data.ref;if(i(n)){var a=e.context,r=e.componentInstance||e.elm,o=a.$refs;t?Array.isArray(o[n])?h(o[n],r):o[n]===r&&(o[n]=void 0):e.data.refInFor?Array.isArray(o[n])?o[n].indexOf(r)<0&&o[n].push(r):o[n]=[r]:o[n]=r}}var sa=new me("",{},[]),ca=["create","activate","update","remove","destroy"];function da(e,t){return e.key===t.key&&(e.tag===t.tag&&e.isComment===t.isComment&&i(e.data)===i(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,a=i(n=e.data)&&i(n=n.attrs)&&n.type,r=i(n=t.data)&&i(n=n.attrs)&&n.type;return a===r||na(a)&&na(r)}(e,t)||o(e.isAsyncPlaceholder)&&e.asyncFactory===t.asyncFactory&&r(t.asyncFactory.error))}function la(e,t,n){var a,r,o={};for(a=t;a<=n;++a)i(r=e[a].key)&&(o[r]=a);return o}var pa={create:ua,update:ua,destroy:function(e){ua(e,sa)}};function ua(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,a,r,i=e===sa,o=t===sa,s=ga(e.data.directives,e.context),c=ga(t.data.directives,t.context),d=[],l=[];for(n in c)a=s[n],r=c[n],a?(r.oldValue=a.value,r.oldArg=a.arg,xa(r,"update",t,e),r.def&&r.def.componentUpdated&&l.push(r)):(xa(r,"bind",t,e),r.def&&r.def.inserted&&d.push(r));if(d.length){var p=function(){for(var n=0;n<d.length;n++)xa(d[n],"inserted",t,e)};i?dt(t,"insert",p):p()}l.length&&dt(t,"postpatch",function(){for(var n=0;n<l.length;n++)xa(l[n],"componentUpdated",t,e)});if(!i)for(n in s)c[n]||xa(s[n],"unbind",e,e,o)}(e,t)}var fa=Object.create(null);function ga(e,t){var n,a,r=Object.create(null);if(!e)return r;for(n=0;n<e.length;n++)(a=e[n]).modifiers||(a.modifiers=fa),r[ya(a)]=a,a.def=Re(t.$options,"directives",a.name);return r}function ya(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function xa(e,t,n,a,r){var i=e.def&&e.def[t];if(i)try{i(n.elm,e,n,a,r)}catch(a){qe(a,n.context,"directive "+e.name+" "+t+" hook")}}var ma=[ia,pa];function ka(e,t){var n=t.componentOptions;if(!(i(n)&&!1===n.Ctor.options.inheritAttrs||r(e.data.attrs)&&r(t.data.attrs))){var a,o,s=t.elm,c=e.data.attrs||{},d=t.data.attrs||{};for(a in i(d.__ob__)&&(d=t.data.attrs=P({},d)),d)o=d[a],c[a]!==o&&ha(s,a,o);for(a in(X||ee)&&d.value!==c.value&&ha(s,"value",d.value),c)r(d[a])&&(Hn(a)?s.removeAttributeNS(Un,qn(a)):zn(a)||s.removeAttribute(a))}}function ha(e,t,n){e.tagName.indexOf("-")>-1?va(e,t,n):Bn(t)?Vn(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):zn(t)?e.setAttribute(t,Fn(t,n)):Hn(t)?Vn(n)?e.removeAttributeNS(Un,qn(t)):e.setAttributeNS(Un,t,n):va(e,t,n)}function va(e,t,n){if(Vn(n))e.removeAttribute(t);else{if(X&&!Q&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var a=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",a)};e.addEventListener("input",a),e.__ieph=!0}e.setAttribute(t,n)}}var wa={create:ka,update:ka};function ba(e,t){var n=t.elm,a=t.data,o=e.data;if(!(r(a.staticClass)&&r(a.class)&&(r(o)||r(o.staticClass)&&r(o.class)))){var s=Gn(t),c=n._transitionClasses;i(c)&&(s=Kn(s,Wn(c))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var _a,Ca,$a,Oa,Aa,Ea,Ta={create:ba,update:ba},Pa=/[\w).+\-_$\]]/;function Sa(e){var t,n,a,r,i,o=!1,s=!1,c=!1,d=!1,l=0,p=0,u=0,f=0;for(a=0;a<e.length;a++)if(n=t,t=e.charCodeAt(a),o)39===t&&92!==n&&(o=!1);else if(s)34===t&&92!==n&&(s=!1);else if(c)96===t&&92!==n&&(c=!1);else if(d)47===t&&92!==n&&(d=!1);else if(124!==t||124===e.charCodeAt(a+1)||124===e.charCodeAt(a-1)||l||p||u){switch(t){case 34:s=!0;break;case 39:o=!0;break;case 96:c=!0;break;case 40:u++;break;case 41:u--;break;case 91:p++;break;case 93:p--;break;case 123:l++;break;case 125:l--}if(47===t){for(var g=a-1,y=void 0;g>=0&&" "===(y=e.charAt(g));g--);y&&Pa.test(y)||(d=!0)}}else void 0===r?(f=a+1,r=e.slice(0,a).trim()):x();function x(){(i||(i=[])).push(e.slice(f,a).trim()),f=a+1}if(void 0===r?r=e.slice(0,a).trim():0!==f&&x(),i)for(a=0;a<i.length;a++)r=Ia(r,i[a]);return r}function Ia(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";var a=t.slice(0,n),r=t.slice(n+1);return'_f("'+a+'")('+e+(")"!==r?","+r:r)}function ja(e,t){console.error("[Vue compiler]: "+e)}function Ma(e,t){return e?e.map(function(e){return e[t]}).filter(function(e){return e}):[]}function Da(e,t,n,a,r){(e.props||(e.props=[])).push(qa({name:t,value:n,dynamic:r},a)),e.plain=!1}function Na(e,t,n,a,r){(r?e.dynamicAttrs||(e.dynamicAttrs=[]):e.attrs||(e.attrs=[])).push(qa({name:t,value:n,dynamic:r},a)),e.plain=!1}function La(e,t,n,a){e.attrsMap[t]=n,e.attrsList.push(qa({name:t,value:n},a))}function za(e,t,n,a,r,i,o,s){(e.directives||(e.directives=[])).push(qa({name:t,rawName:n,value:a,arg:r,isDynamicArg:i,modifiers:o},s)),e.plain=!1}function Ra(e,t,n){return n?"_p("+t+',"'+e+'")':e+t}function Fa(e,t,n,r,i,o,s,c){var d;(r=r||a).right?c?t="("+t+")==='click'?'contextmenu':("+t+")":"click"===t&&(t="contextmenu",delete r.right):r.middle&&(c?t="("+t+")==='click'?'mouseup':("+t+")":"click"===t&&(t="mouseup")),r.capture&&(delete r.capture,t=Ra("!",t,c)),r.once&&(delete r.once,t=Ra("~",t,c)),r.passive&&(delete r.passive,t=Ra("&",t,c)),r.native?(delete r.native,d=e.nativeEvents||(e.nativeEvents={})):d=e.events||(e.events={});var l=qa({value:n.trim(),dynamic:c},s);r!==a&&(l.modifiers=r);var p=d[t];Array.isArray(p)?i?p.unshift(l):p.push(l):d[t]=p?i?[l,p]:[p,l]:l,e.plain=!1}function Ba(e,t,n){var a=Ua(e,":"+t)||Ua(e,"v-bind:"+t);if(null!=a)return Sa(a);if(!1!==n){var r=Ua(e,t);if(null!=r)return JSON.stringify(r)}}function Ua(e,t,n){var a;if(null!=(a=e.attrsMap[t]))for(var r=e.attrsList,i=0,o=r.length;i<o;i++)if(r[i].name===t){r.splice(i,1);break}return n&&delete e.attrsMap[t],a}function Ha(e,t){for(var n=e.attrsList,a=0,r=n.length;a<r;a++){var i=n[a];if(t.test(i.name))return n.splice(a,1),i}}function qa(e,t){return t&&(null!=t.start&&(e.start=t.start),null!=t.end&&(e.end=t.end)),e}function Va(e,t,n){var a=n||{},r=a.number,i="$$v";a.trim&&(i="(typeof $$v === 'string'? $$v.trim(): $$v)"),r&&(i="_n("+i+")");var o=Ga(t,i);e.model={value:"("+t+")",expression:JSON.stringify(t),callback:"function ($$v) {"+o+"}"}}function Ga(e,t){var n=function(e){if(e=e.trim(),_a=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<_a-1)return(Oa=e.lastIndexOf("."))>-1?{exp:e.slice(0,Oa),key:'"'+e.slice(Oa+1)+'"'}:{exp:e,key:null};Ca=e,Oa=Aa=Ea=0;for(;!Ka();)Wa($a=Ja())?Ya($a):91===$a&&Za($a);return{exp:e.slice(0,Aa),key:e.slice(Aa+1,Ea)}}(e);return null===n.key?e+"="+t:"$set("+n.exp+", "+n.key+", "+t+")"}function Ja(){return Ca.charCodeAt(++Oa)}function Ka(){return Oa>=_a}function Wa(e){return 34===e||39===e}function Za(e){var t=1;for(Aa=Oa;!Ka();)if(Wa(e=Ja()))Ya(e);else if(91===e&&t++,93===e&&t--,0===t){Ea=Oa;break}}function Ya(e){for(var t=e;!Ka()&&(e=Ja())!==t;);}var Xa,Qa="__r",er="__c";function tr(e,t,n){var a=Xa;return function r(){var i=t.apply(null,arguments);null!==i&&rr(e,r,n,a)}}var nr=We&&!(ne&&Number(ne[1])<=53);function ar(e,t,n,a){if(nr){var r=pn,i=t;t=i._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=r||e.timeStamp<=0||e.target.ownerDocument!==document)return i.apply(this,arguments)}}Xa.addEventListener(e,t,re?{capture:n,passive:a}:n)}function rr(e,t,n,a){(a||Xa).removeEventListener(e,t._wrapper||t,n)}function ir(e,t){if(!r(e.data.on)||!r(t.data.on)){var n=t.data.on||{},a=e.data.on||{};Xa=t.elm,function(e){if(i(e[Qa])){var t=X?"change":"input";e[t]=[].concat(e[Qa],e[t]||[]),delete e[Qa]}i(e[er])&&(e.change=[].concat(e[er],e.change||[]),delete e[er])}(n),ct(n,a,ar,rr,tr,t.context),Xa=void 0}}var or,sr={create:ir,update:ir};function cr(e,t){if(!r(e.data.domProps)||!r(t.data.domProps)){var n,a,o=t.elm,s=e.data.domProps||{},c=t.data.domProps||{};for(n in i(c.__ob__)&&(c=t.data.domProps=P({},c)),s)n in c||(o[n]="");for(n in c){if(a=c[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),a===s[n])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===n&&"PROGRESS"!==o.tagName){o._value=a;var d=r(a)?"":String(a);dr(o,d)&&(o.value=d)}else if("innerHTML"===n&&Xn(o.tagName)&&r(o.innerHTML)){(or=or||document.createElement("div")).innerHTML="<svg>"+a+"</svg>";for(var l=or.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;l.firstChild;)o.appendChild(l.firstChild)}else if(a!==s[n])try{o[n]=a}catch(e){}}}}function dr(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,a=e._vModifiers;if(i(a)){if(a.number)return y(n)!==y(t);if(a.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var lr={create:cr,update:cr},pr=b(function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach(function(e){if(e){var a=e.split(n);a.length>1&&(t[a[0].trim()]=a[1].trim())}}),t});function ur(e){var t=fr(e.style);return e.staticStyle?P(e.staticStyle,t):t}function fr(e){return Array.isArray(e)?S(e):"string"==typeof e?pr(e):e}var gr,yr=/^--/,xr=/\s*!important$/,mr=function(e,t,n){if(yr.test(t))e.style.setProperty(t,n);else if(xr.test(n))e.style.setProperty(A(t),n.replace(xr,""),"important");else{var a=hr(t);if(Array.isArray(n))for(var r=0,i=n.length;r<i;r++)e.style[a]=n[r];else e.style[a]=n}},kr=["Webkit","Moz","ms"],hr=b(function(e){if(gr=gr||document.createElement("div").style,"filter"!==(e=C(e))&&e in gr)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<kr.length;n++){var a=kr[n]+t;if(a in gr)return a}});function vr(e,t){var n=t.data,a=e.data;if(!(r(n.staticStyle)&&r(n.style)&&r(a.staticStyle)&&r(a.style))){var o,s,c=t.elm,d=a.staticStyle,l=a.normalizedStyle||a.style||{},p=d||l,u=fr(t.data.style)||{};t.data.normalizedStyle=i(u.__ob__)?P({},u):u;var f=function(e,t){var n,a={};if(t)for(var r=e;r.componentInstance;)(r=r.componentInstance._vnode)&&r.data&&(n=ur(r.data))&&P(a,n);(n=ur(e.data))&&P(a,n);for(var i=e;i=i.parent;)i.data&&(n=ur(i.data))&&P(a,n);return a}(t,!0);for(s in p)r(f[s])&&mr(c,s,"");for(s in f)(o=f[s])!==p[s]&&mr(c,s,null==o?"":o)}}var wr={create:vr,update:vr},br=/\s+/;function _r(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(br).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function Cr(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(br).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",a=" "+t+" ";n.indexOf(a)>=0;)n=n.replace(a," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function $r(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&P(t,Or(e.name||"v")),P(t,e),t}return"string"==typeof e?Or(e):void 0}}var Or=b(function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}}),Ar=K&&!Q,Er="transition",Tr="animation",Pr="transition",Sr="transitionend",Ir="animation",jr="animationend";Ar&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Pr="WebkitTransition",Sr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ir="WebkitAnimation",jr="webkitAnimationEnd"));var Mr=K?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Dr(e){Mr(function(){Mr(e)})}function Nr(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),_r(e,t))}function Lr(e,t){e._transitionClasses&&h(e._transitionClasses,t),Cr(e,t)}function zr(e,t,n){var a=Fr(e,t),r=a.type,i=a.timeout,o=a.propCount;if(!r)return n();var s=r===Er?Sr:jr,c=0,d=function(){e.removeEventListener(s,l),n()},l=function(t){t.target===e&&++c>=o&&d()};setTimeout(function(){c<o&&d()},i+1),e.addEventListener(s,l)}var Rr=/\b(transform|all)(,|$)/;function Fr(e,t){var n,a=window.getComputedStyle(e),r=(a[Pr+"Delay"]||"").split(", "),i=(a[Pr+"Duration"]||"").split(", "),o=Br(r,i),s=(a[Ir+"Delay"]||"").split(", "),c=(a[Ir+"Duration"]||"").split(", "),d=Br(s,c),l=0,p=0;return t===Er?o>0&&(n=Er,l=o,p=i.length):t===Tr?d>0&&(n=Tr,l=d,p=c.length):p=(n=(l=Math.max(o,d))>0?o>d?Er:Tr:null)?n===Er?i.length:c.length:0,{type:n,timeout:l,propCount:p,hasTransform:n===Er&&Rr.test(a[Pr+"Property"])}}function Br(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map(function(t,n){return Ur(t)+Ur(e[n])}))}function Ur(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Hr(e,t){var n=e.elm;i(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var a=$r(e.data.transition);if(!r(a)&&!i(n._enterCb)&&1===n.nodeType){for(var o=a.css,s=a.type,d=a.enterClass,l=a.enterToClass,p=a.enterActiveClass,u=a.appearClass,f=a.appearToClass,g=a.appearActiveClass,x=a.beforeEnter,m=a.enter,k=a.afterEnter,h=a.enterCancelled,v=a.beforeAppear,w=a.appear,b=a.afterAppear,_=a.appearCancelled,C=a.duration,$=Qt,O=Qt.$vnode;O&&O.parent;)$=O.context,O=O.parent;var A=!$._isMounted||!e.isRootInsert;if(!A||w||""===w){var E=A&&u?u:d,T=A&&g?g:p,P=A&&f?f:l,S=A&&v||x,I=A&&"function"==typeof w?w:m,j=A&&b||k,M=A&&_||h,D=y(c(C)?C.enter:C);0;var N=!1!==o&&!Q,z=Gr(I),R=n._enterCb=L(function(){N&&(Lr(n,P),Lr(n,T)),R.cancelled?(N&&Lr(n,E),M&&M(n)):j&&j(n),n._enterCb=null});e.data.show||dt(e,"insert",function(){var t=n.parentNode,a=t&&t._pending&&t._pending[e.key];a&&a.tag===e.tag&&a.elm._leaveCb&&a.elm._leaveCb(),I&&I(n,R)}),S&&S(n),N&&(Nr(n,E),Nr(n,T),Dr(function(){Lr(n,E),R.cancelled||(Nr(n,P),z||(Vr(D)?setTimeout(R,D):zr(n,s,R)))})),e.data.show&&(t&&t(),I&&I(n,R)),N||z||R()}}}function qr(e,t){var n=e.elm;i(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var a=$r(e.data.transition);if(r(a)||1!==n.nodeType)return t();if(!i(n._leaveCb)){var o=a.css,s=a.type,d=a.leaveClass,l=a.leaveToClass,p=a.leaveActiveClass,u=a.beforeLeave,f=a.leave,g=a.afterLeave,x=a.leaveCancelled,m=a.delayLeave,k=a.duration,h=!1!==o&&!Q,v=Gr(f),w=y(c(k)?k.leave:k);0;var b=n._leaveCb=L(function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),h&&(Lr(n,l),Lr(n,p)),b.cancelled?(h&&Lr(n,d),x&&x(n)):(t(),g&&g(n)),n._leaveCb=null});m?m(_):_()}function _(){b.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),u&&u(n),h&&(Nr(n,d),Nr(n,p),Dr(function(){Lr(n,d),b.cancelled||(Nr(n,l),v||(Vr(w)?setTimeout(b,w):zr(n,s,b)))})),f&&f(n,b),h||v||b())}}function Vr(e){return"number"==typeof e&&!isNaN(e)}function Gr(e){if(r(e))return!1;var t=e.fns;return i(t)?Gr(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function Jr(e,t){!0!==t.data.show&&Hr(t)}var Kr=function(e){var t,n,a={},c=e.modules,d=e.nodeOps;for(t=0;t<ca.length;++t)for(a[ca[t]]=[],n=0;n<c.length;++n)i(c[n][ca[t]])&&a[ca[t]].push(c[n][ca[t]]);function l(e){var t=d.parentNode(e);i(t)&&d.removeChild(t,e)}function p(e,t,n,r,s,c,l){if(i(e.elm)&&i(c)&&(e=c[l]=we(e)),e.isRootInsert=!s,!function(e,t,n,r){var s=e.data;if(i(s)){var c=i(e.componentInstance)&&s.keepAlive;if(i(s=s.hook)&&i(s=s.init)&&s(e,!1),i(e.componentInstance))return u(e,t),f(n,e.elm,r),o(c)&&function(e,t,n,r){for(var o,s=e;s.componentInstance;)if(s=s.componentInstance._vnode,i(o=s.data)&&i(o=o.transition)){for(o=0;o<a.activate.length;++o)a.activate[o](sa,s);t.push(s);break}f(n,e.elm,r)}(e,t,n,r),!0}}(e,t,n,r)){var p=e.data,y=e.children,x=e.tag;i(x)?(e.elm=e.ns?d.createElementNS(e.ns,x):d.createElement(x,e),k(e),g(e,y,t),i(p)&&m(e,t),f(n,e.elm,r)):o(e.isComment)?(e.elm=d.createComment(e.text),f(n,e.elm,r)):(e.elm=d.createTextNode(e.text),f(n,e.elm,r))}}function u(e,t){i(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,y(e)?(m(e,t),k(e)):(oa(e),t.push(e))}function f(e,t,n){i(e)&&(i(n)?d.parentNode(n)===e&&d.insertBefore(e,t,n):d.appendChild(e,t))}function g(e,t,n){if(Array.isArray(t))for(var a=0;a<t.length;++a)p(t[a],n,e.elm,null,!0,t,a);else s(e.text)&&d.appendChild(e.elm,d.createTextNode(String(e.text)))}function y(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return i(e.tag)}function m(e,n){for(var r=0;r<a.create.length;++r)a.create[r](sa,e);i(t=e.data.hook)&&(i(t.create)&&t.create(sa,e),i(t.insert)&&n.push(e))}function k(e){var t;if(i(t=e.fnScopeId))d.setStyleScope(e.elm,t);else for(var n=e;n;)i(t=n.context)&&i(t=t.$options._scopeId)&&d.setStyleScope(e.elm,t),n=n.parent;i(t=Qt)&&t!==e.context&&t!==e.fnContext&&i(t=t.$options._scopeId)&&d.setStyleScope(e.elm,t)}function h(e,t,n,a,r,i){for(;a<=r;++a)p(n[a],i,e,t,!1,n,a)}function v(e){var t,n,r=e.data;if(i(r))for(i(t=r.hook)&&i(t=t.destroy)&&t(e),t=0;t<a.destroy.length;++t)a.destroy[t](e);if(i(t=e.children))for(n=0;n<e.children.length;++n)v(e.children[n])}function w(e,t,n,a){for(;n<=a;++n){var r=t[n];i(r)&&(i(r.tag)?(b(r),v(r)):l(r.elm))}}function b(e,t){if(i(t)||i(e.data)){var n,r=a.remove.length+1;for(i(t)?t.listeners+=r:t=function(e,t){function n(){0==--n.listeners&&l(e)}return n.listeners=t,n}(e.elm,r),i(n=e.componentInstance)&&i(n=n._vnode)&&i(n.data)&&b(n,t),n=0;n<a.remove.length;++n)a.remove[n](e,t);i(n=e.data.hook)&&i(n=n.remove)?n(e,t):t()}else l(e.elm)}function _(e,t,n,a){for(var r=n;r<a;r++){var o=t[r];if(i(o)&&da(e,o))return r}}function C(e,t,n,s,c,l){if(e!==t){i(t.elm)&&i(s)&&(t=s[c]=we(t));var u=t.elm=e.elm;if(o(e.isAsyncPlaceholder))i(t.asyncFactory.resolved)?A(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(o(t.isStatic)&&o(e.isStatic)&&t.key===e.key&&(o(t.isCloned)||o(t.isOnce)))t.componentInstance=e.componentInstance;else{var f,g=t.data;i(g)&&i(f=g.hook)&&i(f=f.prepatch)&&f(e,t);var x=e.children,m=t.children;if(i(g)&&y(t)){for(f=0;f<a.update.length;++f)a.update[f](e,t);i(f=g.hook)&&i(f=f.update)&&f(e,t)}r(t.text)?i(x)&&i(m)?x!==m&&function(e,t,n,a,o){for(var s,c,l,u=0,f=0,g=t.length-1,y=t[0],x=t[g],m=n.length-1,k=n[0],v=n[m],b=!o;u<=g&&f<=m;)r(y)?y=t[++u]:r(x)?x=t[--g]:da(y,k)?(C(y,k,a,n,f),y=t[++u],k=n[++f]):da(x,v)?(C(x,v,a,n,m),x=t[--g],v=n[--m]):da(y,v)?(C(y,v,a,n,m),b&&d.insertBefore(e,y.elm,d.nextSibling(x.elm)),y=t[++u],v=n[--m]):da(x,k)?(C(x,k,a,n,f),b&&d.insertBefore(e,x.elm,y.elm),x=t[--g],k=n[++f]):(r(s)&&(s=la(t,u,g)),r(c=i(k.key)?s[k.key]:_(k,t,u,g))?p(k,a,e,y.elm,!1,n,f):da(l=t[c],k)?(C(l,k,a,n,f),t[c]=void 0,b&&d.insertBefore(e,l.elm,y.elm)):p(k,a,e,y.elm,!1,n,f),k=n[++f]);u>g?h(e,r(n[m+1])?null:n[m+1].elm,n,f,m,a):f>m&&w(0,t,u,g)}(u,x,m,n,l):i(m)?(i(e.text)&&d.setTextContent(u,""),h(u,null,m,0,m.length-1,n)):i(x)?w(0,x,0,x.length-1):i(e.text)&&d.setTextContent(u,""):e.text!==t.text&&d.setTextContent(u,t.text),i(g)&&i(f=g.hook)&&i(f=f.postpatch)&&f(e,t)}}}function $(e,t,n){if(o(n)&&i(e.parent))e.parent.data.pendingInsert=t;else for(var a=0;a<t.length;++a)t[a].data.hook.insert(t[a])}var O=x("attrs,class,staticClass,staticStyle,key");function A(e,t,n,a){var r,s=t.tag,c=t.data,d=t.children;if(a=a||c&&c.pre,t.elm=e,o(t.isComment)&&i(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(i(c)&&(i(r=c.hook)&&i(r=r.init)&&r(t,!0),i(r=t.componentInstance)))return u(t,n),!0;if(i(s)){if(i(d))if(e.hasChildNodes())if(i(r=c)&&i(r=r.domProps)&&i(r=r.innerHTML)){if(r!==e.innerHTML)return!1}else{for(var l=!0,p=e.firstChild,f=0;f<d.length;f++){if(!p||!A(p,d[f],n,a)){l=!1;break}p=p.nextSibling}if(!l||p)return!1}else g(t,d,n);if(i(c)){var y=!1;for(var x in c)if(!O(x)){y=!0,m(t,n);break}!y&&c.class&&it(c.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,s){if(!r(t)){var c,l=!1,u=[];if(r(e))l=!0,p(t,u);else{var f=i(e.nodeType);if(!f&&da(e,t))C(e,t,u,null,null,s);else{if(f){if(1===e.nodeType&&e.hasAttribute(z)&&(e.removeAttribute(z),n=!0),o(n)&&A(e,t,u))return $(t,u,!0),e;c=e,e=new me(d.tagName(c).toLowerCase(),{},[],void 0,c)}var g=e.elm,x=d.parentNode(g);if(p(t,u,g._leaveCb?null:x,d.nextSibling(g)),i(t.parent))for(var m=t.parent,k=y(t);m;){for(var h=0;h<a.destroy.length;++h)a.destroy[h](m);if(m.elm=t.elm,k){for(var b=0;b<a.create.length;++b)a.create[b](sa,m);var _=m.data.hook.insert;if(_.merged)for(var O=1;O<_.fns.length;O++)_.fns[O]()}else oa(m);m=m.parent}i(x)?w(0,[e],0,0):i(e.tag)&&v(e)}}return $(t,u,l),t.elm}i(e)&&v(e)}}({nodeOps:ra,modules:[wa,Ta,sr,lr,wr,K?{create:Jr,activate:Jr,remove:function(e,t){!0!==e.data.show?qr(e,t):t()}}:{}].concat(ma)});Q&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&ni(e,"input")});var Wr={inserted:function(e,t,n,a){"select"===n.tag?(a.elm&&!a.elm._vOptions?dt(n,"postpatch",function(){Wr.componentUpdated(e,t,n)}):Zr(e,t,n.context),e._vOptions=[].map.call(e.options,Qr)):("textarea"===n.tag||na(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",ei),e.addEventListener("compositionend",ti),e.addEventListener("change",ti),Q&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){Zr(e,t,n.context);var a=e._vOptions,r=e._vOptions=[].map.call(e.options,Qr);if(r.some(function(e,t){return!D(e,a[t])}))(e.multiple?t.value.some(function(e){return Xr(e,r)}):t.value!==t.oldValue&&Xr(t.value,r))&&ni(e,"change")}}};function Zr(e,t,n){Yr(e,t,n),(X||ee)&&setTimeout(function(){Yr(e,t,n)},0)}function Yr(e,t,n){var a=t.value,r=e.multiple;if(!r||Array.isArray(a)){for(var i,o,s=0,c=e.options.length;s<c;s++)if(o=e.options[s],r)i=N(a,Qr(o))>-1,o.selected!==i&&(o.selected=i);else if(D(Qr(o),a))return void(e.selectedIndex!==s&&(e.selectedIndex=s));r||(e.selectedIndex=-1)}}function Xr(e,t){return t.every(function(t){return!D(t,e)})}function Qr(e){return"_value"in e?e._value:e.value}function ei(e){e.target.composing=!0}function ti(e){e.target.composing&&(e.target.composing=!1,ni(e.target,"input"))}function ni(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function ai(e){return!e.componentInstance||e.data&&e.data.transition?e:ai(e.componentInstance._vnode)}var ri={model:Wr,show:{bind:function(e,t,n){var a=t.value,r=(n=ai(n)).data&&n.data.transition,i=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;a&&r?(n.data.show=!0,Hr(n,function(){e.style.display=i})):e.style.display=a?i:"none"},update:function(e,t,n){var a=t.value;!a!=!t.oldValue&&((n=ai(n)).data&&n.data.transition?(n.data.show=!0,a?Hr(n,function(){e.style.display=e.__vOriginalDisplay}):qr(n,function(){e.style.display="none"})):e.style.display=a?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,a,r){r||(e.style.display=e.__vOriginalDisplay)}}},ii={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function oi(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?oi(Kt(t.children)):e}function si(e){var t={},n=e.$options;for(var a in n.propsData)t[a]=e[a];var r=n._parentListeners;for(var i in r)t[C(i)]=r[i];return t}function ci(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var di=function(e){return e.tag||Jt(e)},li=function(e){return"show"===e.name},pi={name:"transition",props:ii,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(di)).length){0;var a=this.mode;0;var r=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return r;var i=oi(r);if(!i)return r;if(this._leaving)return ci(e,r);var o="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?o+"comment":o+i.tag:s(i.key)?0===String(i.key).indexOf(o)?i.key:o+i.key:i.key;var c=(i.data||(i.data={})).transition=si(this),d=this._vnode,l=oi(d);if(i.data.directives&&i.data.directives.some(li)&&(i.data.show=!0),l&&l.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(i,l)&&!Jt(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var p=l.data.transition=P({},c);if("out-in"===a)return this._leaving=!0,dt(p,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()}),ci(e,r);if("in-out"===a){if(Jt(i))return d;var u,f=function(){u()};dt(c,"afterEnter",f),dt(c,"enterCancelled",f),dt(p,"delayLeave",function(e){u=e})}}return r}}},ui=P({tag:String,moveClass:String},ii);function fi(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function gi(e){e.data.newPos=e.elm.getBoundingClientRect()}function yi(e){var t=e.data.pos,n=e.data.newPos,a=t.left-n.left,r=t.top-n.top;if(a||r){e.data.moved=!0;var i=e.elm.style;i.transform=i.WebkitTransform="translate("+a+"px,"+r+"px)",i.transitionDuration="0s"}}delete ui.mode;var xi={Transition:pi,TransitionGroup:{props:ui,beforeMount:function(){var e=this,t=this._update;this._update=function(n,a){var r=en(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,r(),t.call(e,n,a)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),a=this.prevChildren=this.children,r=this.$slots.default||[],i=this.children=[],o=si(this),s=0;s<r.length;s++){var c=r[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=o;else;}if(a){for(var d=[],l=[],p=0;p<a.length;p++){var u=a[p];u.data.transition=o,u.data.pos=u.elm.getBoundingClientRect(),n[u.key]?d.push(u):l.push(u)}this.kept=e(t,null,d),this.removed=l}return e(t,null,i)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(fi),e.forEach(gi),e.forEach(yi),this._reflow=document.body.offsetHeight,e.forEach(function(e){if(e.data.moved){var n=e.elm,a=n.style;Nr(n,t),a.transform=a.WebkitTransform=a.transitionDuration="",n.addEventListener(Sr,n._moveCb=function e(a){a&&a.target!==n||a&&!/transform$/.test(a.propertyName)||(n.removeEventListener(Sr,e),n._moveCb=null,Lr(n,t))})}}))},methods:{hasMove:function(e,t){if(!Ar)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach(function(e){Cr(n,e)}),_r(n,t),n.style.display="none",this.$el.appendChild(n);var a=Fr(n);return this.$el.removeChild(n),this._hasMove=a.hasTransform}}}};An.config.mustUseProp=Ln,An.config.isReservedTag=Qn,An.config.isReservedAttr=Dn,An.config.getTagNamespace=ea,An.config.isUnknownElement=function(e){if(!K)return!0;if(Qn(e))return!1;if(e=e.toLowerCase(),null!=ta[e])return ta[e];var t=document.createElement(e);return e.indexOf("-")>-1?ta[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:ta[e]=/HTMLUnknownElement/.test(t.toString())},P(An.options.directives,ri),P(An.options.components,xi),An.prototype.__patch__=K?Kr:I,An.prototype.$mount=function(e,t){return function(e,t,n){var a;return e.$el=t,e.$options.render||(e.$options.render=he),an(e,"beforeMount"),a=function(){e._update(e._render(),n)},new xn(e,a,I,{before:function(){e._isMounted&&!e._isDestroyed&&an(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,an(e,"mounted")),e}(this,e=e&&K?aa(e):void 0,t)},K&&setTimeout(function(){B.devtools&&se&&se.emit("init",An)},0);var mi=/\{\{((?:.|\r?\n)+?)\}\}/g,ki=/[-.*+?^${}()|[\]\/\\]/g,hi=b(function(e){var t=e[0].replace(ki,"\\$&"),n=e[1].replace(ki,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")});var vi={staticKeys:["staticClass"],transformNode:function(e,t){t.warn;var n=Ua(e,"class");n&&(e.staticClass=JSON.stringify(n));var a=Ba(e,"class",!1);a&&(e.classBinding=a)},genData:function(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}};var wi,bi={staticKeys:["staticStyle"],transformNode:function(e,t){t.warn;var n=Ua(e,"style");n&&(e.staticStyle=JSON.stringify(pr(n)));var a=Ba(e,"style",!1);a&&(e.styleBinding=a)},genData:function(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}},_i=function(e){return(wi=wi||document.createElement("div")).innerHTML=e,wi.textContent},Ci=x("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),$i=x("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),Oi=x("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),Ai=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Ei=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Ti="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+U.source+"]*",Pi="((?:"+Ti+"\\:)?"+Ti+")",Si=new RegExp("^<"+Pi),Ii=/^\s*(\/?)>/,ji=new RegExp("^<\\/"+Pi+"[^>]*>"),Mi=/^<!DOCTYPE [^>]+>/i,Di=/^<!\--/,Ni=/^<!\[/,Li=x("script,style,textarea",!0),zi={},Ri={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},Fi=/&(?:lt|gt|quot|amp|#39);/g,Bi=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,Ui=x("pre,textarea",!0),Hi=function(e,t){return e&&Ui(e)&&"\n"===t[0]};function qi(e,t){var n=t?Bi:Fi;return e.replace(n,function(e){return Ri[e]})}var Vi,Gi,Ji,Ki,Wi,Zi,Yi,Xi,Qi=/^@|^v-on:/,eo=/^v-|^@|^:/,to=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,no=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,ao=/^\(|\)$/g,ro=/^\[.*\]$/,io=/:(.*)$/,oo=/^:|^\.|^v-bind:/,so=/\.[^.\]]+(?=[^\]]*$)/g,co=/^v-slot(:|$)|^#/,lo=/[\r\n]/,po=/\s+/g,uo=b(_i),fo="_empty_";function go(e,t,n){return{type:1,tag:e,attrsList:t,attrsMap:wo(t),rawAttrsMap:{},parent:n,children:[]}}function yo(e,t){Vi=t.warn||ja,Zi=t.isPreTag||j,Yi=t.mustUseProp||j,Xi=t.getTagNamespace||j;var n=t.isReservedTag||j;(function(e){return!!e.component||!n(e.tag)}),Ji=Ma(t.modules,"transformNode"),Ki=Ma(t.modules,"preTransformNode"),Wi=Ma(t.modules,"postTransformNode"),Gi=t.delimiters;var a,r,i=[],o=!1!==t.preserveWhitespace,s=t.whitespace,c=!1,d=!1;function l(e){if(p(e),c||e.processed||(e=xo(e,t)),i.length||e===a||a.if&&(e.elseif||e.else)&&ko(a,{exp:e.elseif,block:e}),r&&!e.forbidden)if(e.elseif||e.else)o=e,(s=function(e){var t=e.length;for(;t--;){if(1===e[t].type)return e[t];e.pop()}}(r.children))&&s.if&&ko(s,{exp:o.elseif,block:o});else{if(e.slotScope){var n=e.slotTarget||'"default"';(r.scopedSlots||(r.scopedSlots={}))[n]=e}r.children.push(e),e.parent=r}var o,s;e.children=e.children.filter(function(e){return!e.slotScope}),p(e),e.pre&&(c=!1),Zi(e.tag)&&(d=!1);for(var l=0;l<Wi.length;l++)Wi[l](e,t)}function p(e){if(!d)for(var t;(t=e.children[e.children.length-1])&&3===t.type&&" "===t.text;)e.children.pop()}return function(e,t){for(var n,a,r=[],i=t.expectHTML,o=t.isUnaryTag||j,s=t.canBeLeftOpenTag||j,c=0;e;){if(n=e,a&&Li(a)){var d=0,l=a.toLowerCase(),p=zi[l]||(zi[l]=new RegExp("([\\s\\S]*?)(</"+l+"[^>]*>)","i")),u=e.replace(p,function(e,n,a){return d=a.length,Li(l)||"noscript"===l||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),Hi(l,n)&&(n=n.slice(1)),t.chars&&t.chars(n),""});c+=e.length-u.length,e=u,O(l,c-d,c)}else{var f=e.indexOf("<");if(0===f){if(Di.test(e)){var g=e.indexOf("--\x3e");if(g>=0){t.shouldKeepComment&&t.comment(e.substring(4,g),c,c+g+3),_(g+3);continue}}if(Ni.test(e)){var y=e.indexOf("]>");if(y>=0){_(y+2);continue}}var x=e.match(Mi);if(x){_(x[0].length);continue}var m=e.match(ji);if(m){var k=c;_(m[0].length),O(m[1],k,c);continue}var h=C();if(h){$(h),Hi(h.tagName,e)&&_(1);continue}}var v=void 0,w=void 0,b=void 0;if(f>=0){for(w=e.slice(f);!(ji.test(w)||Si.test(w)||Di.test(w)||Ni.test(w)||(b=w.indexOf("<",1))<0);)f+=b,w=e.slice(f);v=e.substring(0,f)}f<0&&(v=e),v&&_(v.length),t.chars&&v&&t.chars(v,c-v.length,c)}if(e===n){t.chars&&t.chars(e);break}}function _(t){c+=t,e=e.substring(t)}function C(){var t=e.match(Si);if(t){var n,a,r={tagName:t[1],attrs:[],start:c};for(_(t[0].length);!(n=e.match(Ii))&&(a=e.match(Ei)||e.match(Ai));)a.start=c,_(a[0].length),a.end=c,r.attrs.push(a);if(n)return r.unarySlash=n[1],_(n[0].length),r.end=c,r}}function $(e){var n=e.tagName,c=e.unarySlash;i&&("p"===a&&Oi(n)&&O(a),s(n)&&a===n&&O(n));for(var d=o(n)||!!c,l=e.attrs.length,p=new Array(l),u=0;u<l;u++){var f=e.attrs[u],g=f[3]||f[4]||f[5]||"",y="a"===n&&"href"===f[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;p[u]={name:f[1],value:qi(g,y)}}d||(r.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:p,start:e.start,end:e.end}),a=n),t.start&&t.start(n,p,d,e.start,e.end)}function O(e,n,i){var o,s;if(null==n&&(n=c),null==i&&(i=c),e)for(s=e.toLowerCase(),o=r.length-1;o>=0&&r[o].lowerCasedTag!==s;o--);else o=0;if(o>=0){for(var d=r.length-1;d>=o;d--)t.end&&t.end(r[d].tag,n,i);r.length=o,a=o&&r[o-1].tag}else"br"===s?t.start&&t.start(e,[],!0,n,i):"p"===s&&(t.start&&t.start(e,[],!1,n,i),t.end&&t.end(e,n,i))}O()}(e,{warn:Vi,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,outputSourceRange:t.outputSourceRange,start:function(e,n,o,s,p){var u=r&&r.ns||Xi(e);X&&"svg"===u&&(n=function(e){for(var t=[],n=0;n<e.length;n++){var a=e[n];bo.test(a.name)||(a.name=a.name.replace(_o,""),t.push(a))}return t}(n));var f,g=go(e,n,r);u&&(g.ns=u),"style"!==(f=g).tag&&("script"!==f.tag||f.attrsMap.type&&"text/javascript"!==f.attrsMap.type)||oe()||(g.forbidden=!0);for(var y=0;y<Ki.length;y++)g=Ki[y](g,t)||g;c||(!function(e){null!=Ua(e,"v-pre")&&(e.pre=!0)}(g),g.pre&&(c=!0)),Zi(g.tag)&&(d=!0),c?function(e){var t=e.attrsList,n=t.length;if(n)for(var a=e.attrs=new Array(n),r=0;r<n;r++)a[r]={name:t[r].name,value:JSON.stringify(t[r].value)},null!=t[r].start&&(a[r].start=t[r].start,a[r].end=t[r].end);else e.pre||(e.plain=!0)}(g):g.processed||(mo(g),function(e){var t=Ua(e,"v-if");if(t)e.if=t,ko(e,{exp:t,block:e});else{null!=Ua(e,"v-else")&&(e.else=!0);var n=Ua(e,"v-else-if");n&&(e.elseif=n)}}(g),function(e){null!=Ua(e,"v-once")&&(e.once=!0)}(g)),a||(a=g),o?l(g):(r=g,i.push(g))},end:function(e,t,n){var a=i[i.length-1];i.length-=1,r=i[i.length-1],l(a)},chars:function(e,t,n){if(r&&(!X||"textarea"!==r.tag||r.attrsMap.placeholder!==e)){var a,i,l,p=r.children;if(e=d||e.trim()?"script"===(a=r).tag||"style"===a.tag?e:uo(e):p.length?s?"condense"===s&&lo.test(e)?"":" ":o?" ":"":"")d||"condense"!==s||(e=e.replace(po," ")),!c&&" "!==e&&(i=function(e,t){var n=t?hi(t):mi;if(n.test(e)){for(var a,r,i,o=[],s=[],c=n.lastIndex=0;a=n.exec(e);){(r=a.index)>c&&(s.push(i=e.slice(c,r)),o.push(JSON.stringify(i)));var d=Sa(a[1].trim());o.push("_s("+d+")"),s.push({"@binding":d}),c=r+a[0].length}return c<e.length&&(s.push(i=e.slice(c)),o.push(JSON.stringify(i))),{expression:o.join("+"),tokens:s}}}(e,Gi))?l={type:2,expression:i.expression,tokens:i.tokens,text:e}:" "===e&&p.length&&" "===p[p.length-1].text||(l={type:3,text:e}),l&&p.push(l)}},comment:function(e,t,n){if(r){var a={type:3,text:e,isComment:!0};0,r.children.push(a)}}}),a}function xo(e,t){var n;!function(e){var t=Ba(e,"key");if(t){e.key=t}}(e),e.plain=!e.key&&!e.scopedSlots&&!e.attrsList.length,function(e){var t=Ba(e,"ref");t&&(e.ref=t,e.refInFor=function(e){var t=e;for(;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}(e))}(e),function(e){var t;"template"===e.tag?(t=Ua(e,"scope"),e.slotScope=t||Ua(e,"slot-scope")):(t=Ua(e,"slot-scope"))&&(e.slotScope=t);var n=Ba(e,"slot");n&&(e.slotTarget='""'===n?'"default"':n,e.slotTargetDynamic=!(!e.attrsMap[":slot"]&&!e.attrsMap["v-bind:slot"]),"template"===e.tag||e.slotScope||Na(e,"slot",n,function(e,t){return e.rawAttrsMap[":"+t]||e.rawAttrsMap["v-bind:"+t]||e.rawAttrsMap[t]}(e,"slot")));if("template"===e.tag){var a=Ha(e,co);if(a){0;var r=ho(a),i=r.name,o=r.dynamic;e.slotTarget=i,e.slotTargetDynamic=o,e.slotScope=a.value||fo}}else{var s=Ha(e,co);if(s){0;var c=e.scopedSlots||(e.scopedSlots={}),d=ho(s),l=d.name,p=d.dynamic,u=c[l]=go("template",[],e);u.slotTarget=l,u.slotTargetDynamic=p,u.children=e.children.filter(function(e){if(!e.slotScope)return e.parent=u,!0}),u.slotScope=s.value||fo,e.children=[],e.plain=!1}}}(e),"slot"===(n=e).tag&&(n.slotName=Ba(n,"name")),function(e){var t;(t=Ba(e,"is"))&&(e.component=t);null!=Ua(e,"inline-template")&&(e.inlineTemplate=!0)}(e);for(var a=0;a<Ji.length;a++)e=Ji[a](e,t)||e;return function(e){var t,n,a,r,i,o,s,c,d=e.attrsList;for(t=0,n=d.length;t<n;t++){if(a=r=d[t].name,i=d[t].value,eo.test(a))if(e.hasBindings=!0,(o=vo(a.replace(eo,"")))&&(a=a.replace(so,"")),oo.test(a))a=a.replace(oo,""),i=Sa(i),(c=ro.test(a))&&(a=a.slice(1,-1)),o&&(o.prop&&!c&&"innerHtml"===(a=C(a))&&(a="innerHTML"),o.camel&&!c&&(a=C(a)),o.sync&&(s=Ga(i,"$event"),c?Fa(e,'"update:"+('+a+")",s,null,!1,0,d[t],!0):(Fa(e,"update:"+C(a),s,null,!1,0,d[t]),A(a)!==C(a)&&Fa(e,"update:"+A(a),s,null,!1,0,d[t])))),o&&o.prop||!e.component&&Yi(e.tag,e.attrsMap.type,a)?Da(e,a,i,d[t],c):Na(e,a,i,d[t],c);else if(Qi.test(a))a=a.replace(Qi,""),(c=ro.test(a))&&(a=a.slice(1,-1)),Fa(e,a,i,o,!1,0,d[t],c);else{var l=(a=a.replace(eo,"")).match(io),p=l&&l[1];c=!1,p&&(a=a.slice(0,-(p.length+1)),ro.test(p)&&(p=p.slice(1,-1),c=!0)),za(e,a,r,i,p,c,o,d[t])}else Na(e,a,JSON.stringify(i),d[t]),!e.component&&"muted"===a&&Yi(e.tag,e.attrsMap.type,a)&&Da(e,a,"true",d[t])}}(e),e}function mo(e){var t;if(t=Ua(e,"v-for")){var n=function(e){var t=e.match(to);if(!t)return;var n={};n.for=t[2].trim();var a=t[1].trim().replace(ao,""),r=a.match(no);r?(n.alias=a.replace(no,"").trim(),n.iterator1=r[1].trim(),r[2]&&(n.iterator2=r[2].trim())):n.alias=a;return n}(t);n&&P(e,n)}}function ko(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function ho(e){var t=e.name.replace(co,"");return t||"#"!==e.name[0]&&(t="default"),ro.test(t)?{name:t.slice(1,-1),dynamic:!0}:{name:'"'+t+'"',dynamic:!1}}function vo(e){var t=e.match(so);if(t){var n={};return t.forEach(function(e){n[e.slice(1)]=!0}),n}}function wo(e){for(var t={},n=0,a=e.length;n<a;n++)t[e[n].name]=e[n].value;return t}var bo=/^xmlns:NS\d+/,_o=/^NS\d+:/;function Co(e){return go(e.tag,e.attrsList.slice(),e.parent)}var $o=[vi,bi,{preTransformNode:function(e,t){if("input"===e.tag){var n,a=e.attrsMap;if(!a["v-model"])return;if((a[":type"]||a["v-bind:type"])&&(n=Ba(e,"type")),a.type||n||!a["v-bind"]||(n="("+a["v-bind"]+").type"),n){var r=Ua(e,"v-if",!0),i=r?"&&("+r+")":"",o=null!=Ua(e,"v-else",!0),s=Ua(e,"v-else-if",!0),c=Co(e);mo(c),La(c,"type","checkbox"),xo(c,t),c.processed=!0,c.if="("+n+")==='checkbox'"+i,ko(c,{exp:c.if,block:c});var d=Co(e);Ua(d,"v-for",!0),La(d,"type","radio"),xo(d,t),ko(c,{exp:"("+n+")==='radio'"+i,block:d});var l=Co(e);return Ua(l,"v-for",!0),La(l,":type",n),xo(l,t),ko(c,{exp:r,block:l}),o?c.else=!0:s&&(c.elseif=s),c}}}}];var Oo,Ao,Eo={expectHTML:!0,modules:$o,directives:{model:function(e,t,n){n;var a=t.value,r=t.modifiers,i=e.tag,o=e.attrsMap.type;if(e.component)return Va(e,a,r),!1;if("select"===i)!function(e,t,n){var a='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";a=a+" "+Ga(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),Fa(e,"change",a,null,!0)}(e,a,r);else if("input"===i&&"checkbox"===o)!function(e,t,n){var a=n&&n.number,r=Ba(e,"value")||"null",i=Ba(e,"true-value")||"true",o=Ba(e,"false-value")||"false";Da(e,"checked","Array.isArray("+t+")?_i("+t+","+r+")>-1"+("true"===i?":("+t+")":":_q("+t+","+i+")")),Fa(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+i+"):("+o+");if(Array.isArray($$a)){var $$v="+(a?"_n("+r+")":r)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+Ga(t,"$$a.concat([$$v])")+")}else{$$i>-1&&("+Ga(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+Ga(t,"$$c")+"}",null,!0)}(e,a,r);else if("input"===i&&"radio"===o)!function(e,t,n){var a=n&&n.number,r=Ba(e,"value")||"null";Da(e,"checked","_q("+t+","+(r=a?"_n("+r+")":r)+")"),Fa(e,"change",Ga(t,r),null,!0)}(e,a,r);else if("input"===i||"textarea"===i)!function(e,t,n){var a=e.attrsMap.type,r=n||{},i=r.lazy,o=r.number,s=r.trim,c=!i&&"range"!==a,d=i?"change":"range"===a?Qa:"input",l="$event.target.value";s&&(l="$event.target.value.trim()"),o&&(l="_n("+l+")");var p=Ga(t,l);c&&(p="if($event.target.composing)return;"+p),Da(e,"value","("+t+")"),Fa(e,d,p,null,!0),(s||o)&&Fa(e,"blur","$forceUpdate()")}(e,a,r);else if(!B.isReservedTag(i))return Va(e,a,r),!1;return!0},text:function(e,t){t.value&&Da(e,"textContent","_s("+t.value+")",t)},html:function(e,t){t.value&&Da(e,"innerHTML","_s("+t.value+")",t)}},isPreTag:function(e){return"pre"===e},isUnaryTag:Ci,mustUseProp:Ln,canBeLeftOpenTag:$i,isReservedTag:Qn,getTagNamespace:ea,staticKeys:function(e){return e.reduce(function(e,t){return e.concat(t.staticKeys||[])},[]).join(",")}($o)},To=b(function(e){return x("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(e?","+e:""))});function Po(e,t){e&&(Oo=To(t.staticKeys||""),Ao=t.isReservedTag||j,function e(t){t.static=function(e){if(2===e.type)return!1;if(3===e.type)return!0;return!(!e.pre&&(e.hasBindings||e.if||e.for||m(e.tag)||!Ao(e.tag)||function(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}(e)||!Object.keys(e).every(Oo)))}(t);if(1===t.type){if(!Ao(t.tag)&&"slot"!==t.tag&&null==t.attrsMap["inline-template"])return;for(var n=0,a=t.children.length;n<a;n++){var r=t.children[n];e(r),r.static||(t.static=!1)}if(t.ifConditions)for(var i=1,o=t.ifConditions.length;i<o;i++){var s=t.ifConditions[i].block;e(s),s.static||(t.static=!1)}}}(e),function e(t,n){if(1===t.type){if((t.static||t.once)&&(t.staticInFor=n),t.static&&t.children.length&&(1!==t.children.length||3!==t.children[0].type))return void(t.staticRoot=!0);if(t.staticRoot=!1,t.children)for(var a=0,r=t.children.length;a<r;a++)e(t.children[a],n||!!t.for);if(t.ifConditions)for(var i=1,o=t.ifConditions.length;i<o;i++)e(t.ifConditions[i].block,n)}}(e,!1))}var So=/^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/,Io=/\([^)]*?\);*$/,jo=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,Mo={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Do={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},No=function(e){return"if("+e+")return null;"},Lo={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:No("$event.target !== $event.currentTarget"),ctrl:No("!$event.ctrlKey"),shift:No("!$event.shiftKey"),alt:No("!$event.altKey"),meta:No("!$event.metaKey"),left:No("'button' in $event && $event.button !== 0"),middle:No("'button' in $event && $event.button !== 1"),right:No("'button' in $event && $event.button !== 2")};function zo(e,t){var n=t?"nativeOn:":"on:",a="",r="";for(var i in e){var o=Ro(e[i]);e[i]&&e[i].dynamic?r+=i+","+o+",":a+='"'+i+'":'+o+","}return a="{"+a.slice(0,-1)+"}",r?n+"_d("+a+",["+r.slice(0,-1)+"])":n+a}function Ro(e){if(!e)return"function(){}";if(Array.isArray(e))return"["+e.map(function(e){return Ro(e)}).join(",")+"]";var t=jo.test(e.value),n=So.test(e.value),a=jo.test(e.value.replace(Io,""));if(e.modifiers){var r="",i="",o=[];for(var s in e.modifiers)if(Lo[s])i+=Lo[s],Mo[s]&&o.push(s);else if("exact"===s){var c=e.modifiers;i+=No(["ctrl","shift","alt","meta"].filter(function(e){return!c[e]}).map(function(e){return"$event."+e+"Key"}).join("||"))}else o.push(s);return o.length&&(r+=function(e){return"if(!$event.type.indexOf('key')&&"+e.map(Fo).join("&&")+")return null;"}(o)),i&&(r+=i),"function($event){"+r+(t?"return "+e.value+"($event)":n?"return ("+e.value+")($event)":a?"return "+e.value:e.value)+"}"}return t||n?e.value:"function($event){"+(a?"return "+e.value:e.value)+"}"}function Fo(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=Mo[e],a=Do[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(a)+")"}var Bo={on:function(e,t){e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}},bind:function(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}},cloak:I},Uo=function(e){this.options=e,this.warn=e.warn||ja,this.transforms=Ma(e.modules,"transformCode"),this.dataGenFns=Ma(e.modules,"genData"),this.directives=P(P({},Bo),e.directives);var t=e.isReservedTag||j;this.maybeComponent=function(e){return!!e.component||!t(e.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function Ho(e,t){var n=new Uo(t);return{render:"with(this){return "+(e?qo(e,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function qo(e,t){if(e.parent&&(e.pre=e.pre||e.parent.pre),e.staticRoot&&!e.staticProcessed)return Vo(e,t);if(e.once&&!e.onceProcessed)return Go(e,t);if(e.for&&!e.forProcessed)return Ko(e,t);if(e.if&&!e.ifProcessed)return Jo(e,t);if("template"!==e.tag||e.slotTarget||t.pre){if("slot"===e.tag)return function(e,t){var n=e.slotName||'"default"',a=Xo(e,t),r="_t("+n+(a?","+a:""),i=e.attrs||e.dynamicAttrs?ts((e.attrs||[]).concat(e.dynamicAttrs||[]).map(function(e){return{name:C(e.name),value:e.value,dynamic:e.dynamic}})):null,o=e.attrsMap["v-bind"];!i&&!o||a||(r+=",null");i&&(r+=","+i);o&&(r+=(i?"":",null")+","+o);return r+")"}(e,t);var n;if(e.component)n=function(e,t,n){var a=t.inlineTemplate?null:Xo(t,n,!0);return"_c("+e+","+Wo(t,n)+(a?","+a:"")+")"}(e.component,e,t);else{var a;(!e.plain||e.pre&&t.maybeComponent(e))&&(a=Wo(e,t));var r=e.inlineTemplate?null:Xo(e,t,!0);n="_c('"+e.tag+"'"+(a?","+a:"")+(r?","+r:"")+")"}for(var i=0;i<t.transforms.length;i++)n=t.transforms[i](e,n);return n}return Xo(e,t)||"void 0"}function Vo(e,t){e.staticProcessed=!0;var n=t.pre;return e.pre&&(t.pre=e.pre),t.staticRenderFns.push("with(this){return "+qo(e,t)+"}"),t.pre=n,"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function Go(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return Jo(e,t);if(e.staticInFor){for(var n="",a=e.parent;a;){if(a.for){n=a.key;break}a=a.parent}return n?"_o("+qo(e,t)+","+t.onceId+++","+n+")":qo(e,t)}return Vo(e,t)}function Jo(e,t,n,a){return e.ifProcessed=!0,function e(t,n,a,r){if(!t.length)return r||"_e()";var i=t.shift();return i.exp?"("+i.exp+")?"+o(i.block)+":"+e(t,n,a,r):""+o(i.block);function o(e){return a?a(e,n):e.once?Go(e,n):qo(e,n)}}(e.ifConditions.slice(),t,n,a)}function Ko(e,t,n,a){var r=e.for,i=e.alias,o=e.iterator1?","+e.iterator1:"",s=e.iterator2?","+e.iterator2:"";return e.forProcessed=!0,(a||"_l")+"(("+r+"),function("+i+o+s+"){return "+(n||qo)(e,t)+"})"}function Wo(e,t){var n="{",a=function(e,t){var n=e.directives;if(!n)return;var a,r,i,o,s="directives:[",c=!1;for(a=0,r=n.length;a<r;a++){i=n[a],o=!0;var d=t.directives[i.name];d&&(o=!!d(e,i,t.warn)),o&&(c=!0,s+='{name:"'+i.name+'",rawName:"'+i.rawName+'"'+(i.value?",value:("+i.value+"),expression:"+JSON.stringify(i.value):"")+(i.arg?",arg:"+(i.isDynamicArg?i.arg:'"'+i.arg+'"'):"")+(i.modifiers?",modifiers:"+JSON.stringify(i.modifiers):"")+"},")}if(c)return s.slice(0,-1)+"]"}(e,t);a&&(n+=a+","),e.key&&(n+="key:"+e.key+","),e.ref&&(n+="ref:"+e.ref+","),e.refInFor&&(n+="refInFor:true,"),e.pre&&(n+="pre:true,"),e.component&&(n+='tag:"'+e.tag+'",');for(var r=0;r<t.dataGenFns.length;r++)n+=t.dataGenFns[r](e);if(e.attrs&&(n+="attrs:"+ts(e.attrs)+","),e.props&&(n+="domProps:"+ts(e.props)+","),e.events&&(n+=zo(e.events,!1)+","),e.nativeEvents&&(n+=zo(e.nativeEvents,!0)+","),e.slotTarget&&!e.slotScope&&(n+="slot:"+e.slotTarget+","),e.scopedSlots&&(n+=function(e,t,n){var a=e.for||Object.keys(t).some(function(e){var n=t[e];return n.slotTargetDynamic||n.if||n.for||Zo(n)}),r=!!e.if;if(!a)for(var i=e.parent;i;){if(i.slotScope&&i.slotScope!==fo||i.for){a=!0;break}i.if&&(r=!0),i=i.parent}var o=Object.keys(t).map(function(e){return Yo(t[e],n)}).join(",");return"scopedSlots:_u(["+o+"]"+(a?",null,true":"")+(!a&&r?",null,false,"+function(e){var t=5381,n=e.length;for(;n;)t=33*t^e.charCodeAt(--n);return t>>>0}(o):"")+")"}(e,e.scopedSlots,t)+","),e.model&&(n+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var i=function(e,t){var n=e.children[0];0;if(n&&1===n.type){var a=Ho(n,t.options);return"inlineTemplate:{render:function(){"+a.render+"},staticRenderFns:["+a.staticRenderFns.map(function(e){return"function(){"+e+"}"}).join(",")+"]}"}}(e,t);i&&(n+=i+",")}return n=n.replace(/,$/,"")+"}",e.dynamicAttrs&&(n="_b("+n+',"'+e.tag+'",'+ts(e.dynamicAttrs)+")"),e.wrapData&&(n=e.wrapData(n)),e.wrapListeners&&(n=e.wrapListeners(n)),n}function Zo(e){return 1===e.type&&("slot"===e.tag||e.children.some(Zo))}function Yo(e,t){var n=e.attrsMap["slot-scope"];if(e.if&&!e.ifProcessed&&!n)return Jo(e,t,Yo,"null");if(e.for&&!e.forProcessed)return Ko(e,t,Yo);var a=e.slotScope===fo?"":String(e.slotScope),r="function("+a+"){return "+("template"===e.tag?e.if&&n?"("+e.if+")?"+(Xo(e,t)||"undefined")+":undefined":Xo(e,t)||"undefined":qo(e,t))+"}",i=a?"":",proxy:true";return"{key:"+(e.slotTarget||'"default"')+",fn:"+r+i+"}"}function Xo(e,t,n,a,r){var i=e.children;if(i.length){var o=i[0];if(1===i.length&&o.for&&"template"!==o.tag&&"slot"!==o.tag){var s=n?t.maybeComponent(o)?",1":",0":"";return""+(a||qo)(o,t)+s}var c=n?function(e,t){for(var n=0,a=0;a<e.length;a++){var r=e[a];if(1===r.type){if(Qo(r)||r.ifConditions&&r.ifConditions.some(function(e){return Qo(e.block)})){n=2;break}(t(r)||r.ifConditions&&r.ifConditions.some(function(e){return t(e.block)}))&&(n=1)}}return n}(i,t.maybeComponent):0,d=r||es;return"["+i.map(function(e){return d(e,t)}).join(",")+"]"+(c?","+c:"")}}function Qo(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function es(e,t){return 1===e.type?qo(e,t):3===e.type&&e.isComment?function(e){return"_e("+JSON.stringify(e.text)+")"}(e):function(e){return"_v("+(2===e.type?e.expression:ns(JSON.stringify(e.text)))+")"}(e)}function ts(e){for(var t="",n="",a=0;a<e.length;a++){var r=e[a],i=ns(r.value);r.dynamic?n+=r.name+","+i+",":t+='"'+r.name+'":'+i+","}return t="{"+t.slice(0,-1)+"}",n?"_d("+t+",["+n.slice(0,-1)+"])":t}function ns(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)");function as(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),I}}function rs(e){var t=Object.create(null);return function(n,a,r){(a=P({},a)).warn;delete a.warn;var i=a.delimiters?String(a.delimiters)+n:n;if(t[i])return t[i];var o=e(n,a);var s={},c=[];return s.render=as(o.render,c),s.staticRenderFns=o.staticRenderFns.map(function(e){return as(e,c)}),t[i]=s}}var is,os,ss=(is=function(e,t){var n=yo(e.trim(),t);!1!==t.optimize&&Po(n,t);var a=Ho(n,t);return{ast:n,render:a.render,staticRenderFns:a.staticRenderFns}},function(e){function t(t,n){var a=Object.create(e),r=[],i=[];if(n)for(var o in n.modules&&(a.modules=(e.modules||[]).concat(n.modules)),n.directives&&(a.directives=P(Object.create(e.directives||null),n.directives)),n)"modules"!==o&&"directives"!==o&&(a[o]=n[o]);a.warn=function(e,t,n){(n?i:r).push(e)};var s=is(t.trim(),a);return s.errors=r,s.tips=i,s}return{compile:t,compileToFunctions:rs(t)}})(Eo),cs=(ss.compile,ss.compileToFunctions);function ds(e){return(os=os||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',os.innerHTML.indexOf("&#10;")>0}var ls=!!K&&ds(!1),ps=!!K&&ds(!0),us=b(function(e){var t=aa(e);return t&&t.innerHTML}),fs=An.prototype.$mount;An.prototype.$mount=function(e,t){if((e=e&&aa(e))===document.body||e===document.documentElement)return this;var n=this.$options;if(!n.render){var a=n.template;if(a)if("string"==typeof a)"#"===a.charAt(0)&&(a=us(a));else{if(!a.nodeType)return this;a=a.innerHTML}else e&&(a=function(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}(e));if(a){0;var r=cs(a,{outputSourceRange:!1,shouldDecodeNewlines:ls,shouldDecodeNewlinesForHref:ps,delimiters:n.delimiters,comments:n.comments},this),i=r.render,o=r.staticRenderFns;n.render=i,n.staticRenderFns=o}}return fs.call(this,e,t)},An.compile=cs,t.a=An}).call(this,n(1),n(2).setImmediate)},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(e){var a=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(r.call(setTimeout,a,arguments),clearTimeout)},t.setInterval=function(){return new i(r.call(setInterval,a,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(a,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(3),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var a,r,i,o,s,c=1,d={},l=!1,p=e.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(e);u=u&&u.setTimeout?u:e,"[object process]"==={}.toString.call(e.process)?a=function(e){t.nextTick(function(){g(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){g(e.data)},a=function(e){i.port2.postMessage(e)}):p&&"onreadystatechange"in p.createElement("script")?(r=p.documentElement,a=function(e){var t=p.createElement("script");t.onreadystatechange=function(){g(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):a=function(e){setTimeout(g,0,e)}:(o="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(o)&&g(+t.data.slice(o.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),a=function(t){e.postMessage(o+t,"*")}),u.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return d[c]=r,a(c),c++},u.clearImmediate=f}function f(e){delete d[e]}function g(e){if(l)setTimeout(g,0,e);else{var t=d[e];if(t){l=!0;try{!function(e){var t=e.callback,a=e.args;switch(a.length){case 0:t();break;case 1:t(a[0]);break;case 2:t(a[0],a[1]);break;case 3:t(a[0],a[1],a[2]);break;default:t.apply(n,a)}}(t)}finally{f(e),l=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(1),n(4))},function(e,t){var n,a,r=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{a="function"==typeof clearTimeout?clearTimeout:o}catch(e){a=o}}();var c,d=[],l=!1,p=-1;function u(){l&&c&&(l=!1,c.length?d=c.concat(d):p=-1,d.length&&f())}function f(){if(!l){var e=s(u);l=!0;for(var t=d.length;t;){for(c=d,d=[];++p<t;)c&&c[p].run();p=-1,t=d.length}c=null,l=!1,function(e){if(a===clearTimeout)return clearTimeout(e);if((a===o||!a)&&clearTimeout)return a=clearTimeout,clearTimeout(e);try{a(e)}catch(t){try{return a.call(null,e)}catch(t){return a.call(this,e)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function y(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];d.push(new g(e,t)),1!==d.length||l||s(f)},g.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=y,r.addListener=y,r.once=y,r.off=y,r.removeListener=y,r.removeAllListeners=y,r.emit=y,r.prependListener=y,r.prependOnceListener=y,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){var a=n(6);"string"==typeof a&&(a=[[e.i,a,""]]);n(8)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){(e.exports=n(7)()).push([e.i,"html,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n  text-decoration: none;\n}\na:visited {\n  color: inherit;\n}\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Ubuntu, \"Helvetica Neue\", Helvetica, Arial, \"PingFang SC\", \"Microsoft YaHei UI\", \"Microsoft YaHei\", \"Source Han Sans CN\", sans-serif;\n  /* user-select: none; */\n}\nlabel {\n  cursor: pointer;\n}\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\nbody {\n  line-height: 1;\n}\nol,\nul {\n  list-style: none;\n}\nblockquote,\nq {\n  quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: \"\";\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n*,\n:after,\n:before {\n  box-sizing: border-box;\n}\na {\n  color: #000000;\n  cursor: pointer;\n}\nimg {\n  -webkit-user-drag: none;\n}\nbody {\n  font-size: 14px;\n}\n::-webkit-scrollbar {\n  width: 3px;\n  height: 3px;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 3px;\n  background-color: #c3c3c3;\n}\n::-webkit-scrollbar-track {\n  background-color: transparent;\n}\n.ui-selectable {\n  user-select: text;\n}\n.ui-desc {\n  color: #888888;\n}\n.ui-button {\n  position: relative;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  padding: 6px 25px 4px;\n  vertical-align: middle;\n  font-size: 12px;\n  line-height: 1;\n  border-radius: 3px;\n  outline: 0;\n  border: 0;\n  white-space: nowrap;\n  cursor: pointer;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5), 0 1px 1px 0 rgba(0, 0, 0, 0.01);\n}\n.ui-button[disabled] {\n  opacity: 0.3;\n  cursor: not-allowed;\n}\n.ui-button:before {\n  content: \"\";\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n  transition: background-color ease 0.2s;\n}\n.ui-button-default {\n  color: #000;\n  background: linear-gradient(to bottom, #fcfcfc, #f5f5f5);\n}\n.ui-button-default:not([disabled]):hover:before {\n  background-color: rgba(0, 0, 0, 0.06);\n}\n.ui-button-default:not([disabled]):active:before {\n  background-color: rgba(0, 0, 0, 0.2);\n}\n.ui-button-mini {\n  padding: 4px 10px;\n  font-size: 10px;\n}\n.ui-button-primary {\n  color: #fff;\n  background: linear-gradient(to bottom, #00c777, #00ba70);\n}\n.ui-button-primary:not([disabled]):hover:before {\n  background-color: rgba(0, 0, 0, 0.06);\n}\n.ui-button-primary:not([disabled]):active:before {\n  background-color: rgba(0, 0, 0, 0.2);\n}\n.ui-button-warn {\n  color: #d94e4e;\n  background: linear-gradient(to bottom, #fcfcfc, #f5f5f5);\n}\n.ui-button-warn:hover:before {\n  background-color: rgba(0, 0, 0, 0.06);\n}\n.ui-button-warn:active:before {\n  background-color: rgba(0, 0, 0, 0.2);\n}\nbody.dark .ui-button-default {\n  background: linear-gradient(to bottom, #7b7b7b, #737373);\n  color: rgba(255, 255, 255, 0.8);\n}\nhtml,\nbody {\n  height: 100%;\n}\nbody {\n  line-height: 1.6;\n  color: #000;\n  font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', '\\5FAE\\8F6F\\96C5\\9ED1', Arial, sans-serif;\n  font-size: 13px;\n}\nbody {\n  --primary-color: #07c160;\n  --global-text-color: #222;\n  --global-font-size: 13px;\n  --global-link-text-color: #10aeff;\n  --text-warn-color: #d94e4e;\n  --background-color: #fff;\n}\nbody.dark {\n  --primary-color: #07c160;\n  --global-text-color: #fff;\n  --text-warn-color: #d94e4e;\n  --background-color: #1e1e1e;\n}\na {\n  color: var(--global-link-text-color);\n}\nbody {\n  color: var(--global-text-color);\n}\n.audit {\n  padding: 35px;\n}\n.audit-title {\n  font-weight: normal;\n  font-size: 17px;\n}\n.audit-desc {\n  font-size: 13px;\n  margin-top: 12px;\n  margin-bottom: 24px;\n}\n.device-info-item {\n  display: flex;\n}\n.device-info-key {\n  width: 8em;\n  margin-right: 1em;\n  color: #7f7f7f;\n}\n.device-info-value {\n  flex: 1;\n}\n.device-info-tips {\n  color: #7f7f7f;\n}\n.audit-result-desc {\n  font-size: 13px;\n  margin-top: 6px;\n  color: #7f7f7f;\n}\n.audit-result-desc > span {\n  margin-right: 28px;\n}\n.audit-action-area {\n  margin-top: 35px;\n}\n.audit-result {\n  padding: 35px;\n}\n.audit-result-summary {\n  display: flex;\n}\n.audit-result-summary–primary {\n  flex: 1;\n}\n.audit-icon-dot-red,\n.audit-icon-dot-yellow,\n.audit-icon-dot-green {\n  display: inline-block;\n  vertical-align: middle;\n  width: 4px;\n  height: 4px;\n  border-radius: 50%;\n}\n.audit-icon-dot-red {\n  background-color: #c14b4b;\n}\n.audit-icon-dot-yellow {\n  background-color: #c59b12;\n}\n.audit-icon-dot-green {\n  background-color: #179955;\n}\n.audit-icon-color-remark {\n  color: #7f7f7f;\n  font-size: 11px;\n}\n.audit-icon-color-remark + .audit-icon-color-remark {\n  margin-left: 10px;\n}\n.audit-result-summary-extra {\n  text-align: right;\n}\n.audit-result-summary-extra > p:first-child {\n  margin-bottom: 9px;\n}\n.audit-result-summary-extra a {\n  color: #10aeff;\n}\n.audit-result-score {\n  display: flex;\n  padding: 50px 0;\n  user-select: none;\n}\n.audit-score-item {\n  flex: 1;\n}\n.audit-score-item-icon {\n  text-align: center;\n  position: relative;\n  font-size: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.audit-score-item-icon-circle {\n  cx: 7;\n  cy: 7;\n  r: 6;\n  fill: none;\n  stroke-width: 1;\n  stroke: #ffc300;\n  stroke-linecap: round;\n  transition: stroke-dashoffset 1s ease-in-out;\n}\n.audit-score-item-icon-circle-bg {\n  cx: 7;\n  cy: 7;\n  r: 6;\n  fill: none;\n  stroke-width: 1;\n  stroke: #d3d3d3;\n}\n.audit-score-item-icon-yellow {\n  color: #ffc300;\n}\n.audit-score-item-icon-yellow .audit-score-item-icon-circle {\n  stroke: #ffc300;\n}\n.audit-score-item-icon-green {\n  color: #07c160;\n}\n.audit-score-item-icon-green .audit-score-item-icon-circle {\n  stroke: #07c160;\n}\n.audit-score-item-icon-red {\n  color: #fa5151;\n}\n.audit-score-item-icon-red .audit-score-item-icon-circle {\n  stroke: #fa5151;\n}\n.audit-score-value {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 22px;\n}\n.audit-score-item-desc {\n  text-align: center;\n  margin-top: 24px;\n  font-size: 13px;\n}\n.audit-result-group + .audit-result-group {\n  margin-top: 48px;\n}\n.audit-result-group-title {\n  font-size: 15px;\n  position: relative;\n  padding-left: 10px;\n}\n.audit-result-group-title::before {\n  content: \"\";\n  position: absolute;\n  left: 0;\n  top: 4px;\n  bottom: 4px;\n  width: 2px;\n}\n.audit-result-group-title-green::before {\n  background-color: #07c160;\n}\n.audit-result-group-title-yellow::before {\n  background-color: #ffc300;\n}\n.audit-result-group-title-red::before {\n  background-color: #fa5151;\n}\n.audit-result-group-score {\n  font-size: 15px;\n  margin-left: 5px;\n}\n.audit-result-group-desc {\n  color: #7f7f7f;\n}\n.audit-result-items + .audit-result-items {\n  margin-top: 20px;\n}\ndetails summary::-webkit-details-marker {\n  display: none;\n}\ndetails [class^=\"ui-icon-arrow\"] {\n  margin-left: 5px;\n}\ndetails[open] > summary > [class^=\"ui-icon-arrow\"],\ndetails[open] > summary > p > [class^=\"ui-icon-arrow\"] {\n  transform-origin: 50% 50%;\n  transform: rotate(180deg);\n}\ndetails > summary {\n  outline: 0;\n}\n.audit-result-table {\n  width: 100%;\n  font-size: 13px;\n  table-layout: fixed;\n}\n.audit-result-table thead th {\n  padding: 9px 0;\n  text-align: right;\n  border-bottom: 1px solid #dadada;\n}\n.audit-result-table thead th:first-child {\n  text-align: left;\n}\n.audit-result-table tbody td {\n  padding: 9px 0;\n  text-align: right;\n  border-bottom: 1px solid #dadada;\n}\n.audit-result-table tbody td:first-child {\n  text-align: left;\n}\n.audit-result-table tbody td p {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n.audit-result-table a {\n  color: #10aeff;\n}\n.audit-result-item-summary {\n  display: flex;\n  padding: 15px 0;\n  border-bottom: 1px solid #dadada;\n  outline: 0;\n  align-items: center;\n  color: #7f7f77;\n}\n.audit-result-item-summary [class^=\"ui-icon\"] {\n  background-color: #7f7f7f;\n}\n.audit-result-item-summary-content {\n  flex: 1;\n  font-size: 13px;\n  padding-left: 10px;\n}\n.audit-result-item-content {\n  font-size: 13px;\n  flex: 1;\n}\n.audit-result-item {\n  display: flex;\n  padding: 15px 0;\n  margin-left: 20px;\n  border-bottom: 1px solid #dadada;\n  outline: 0;\n}\n.audit-result-item-detail {\n  margin-left: 25px;\n  padding: 10px 0;\n  color: #7f7f7f;\n}\n.audit-result-item-ext {\n  font-size: 11px;\n  color: #fa5151;\n}\nbody.dark .audit-result-item-summary,\nbody.dark .audit-result-item {\n  border-color: #3a3a3a;\n}\nbody.dark .audit-result-table thead th {\n  border-color: #3a3a3a;\n}\nbody.dark .audit-result-table tbody td {\n  border-color: #3a3a3a;\n}\nbody.dark [class^=\"ui-icon-arrow\"] {\n  background-color: #ccc;\n}\nbody.dark .audit-score-item-icon-circle-bg {\n  stroke: #3e3e3e;\n}\n.ui-icon-arrow-up-o {\n  display: inline-block;\n  vertical-align: middle;\n  width: 16px;\n  height: 8px;\n  -webkit-mask: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='11' height='7' viewBox='0 0 11 7'%3E  %3Cdefs%3E    %3ClinearGradient id='384e65d3-3eba-457c-b069-e5afe8f816fe-c' x1='50%25' x2='50%25' y1='0%25' y2='100%25'%3E      %3Cstop offset='0%25' stop-color='%23FCFCFC'/%3E      %3Cstop offset='100%25' stop-color='%23F1F1F1'/%3E    %3C/linearGradient%3E    %3Cpath id='384e65d3-3eba-457c-b069-e5afe8f816fe-b' d='M5.058 8.287l-.707.707L.5 5.14a.664.664 0 0 1 0-.942L4.35.347l.707.707L1.442 4.67l3.616 3.617z'/%3E    %3Cfilter id='384e65d3-3eba-457c-b069-e5afe8f816fe-a' width='184.1%25' height='146.3%25' x='-42.1%25' y='-11.6%25' filterUnits='objectBoundingBox'%3E      %3CfeOffset dy='1' in='SourceAlpha' result='shadowOffsetOuter1'/%3E      %3CfeGaussianBlur in='shadowOffsetOuter1' result='shadowBlurOuter1' stdDeviation='.5'/%3E      %3CfeColorMatrix in='shadowBlurOuter1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.0612828351 0'/%3E    %3C/filter%3E    %3Cfilter id='384e65d3-3eba-457c-b069-e5afe8f816fe-d' width='163.1%25' height='134.7%25' x='-31.5%25' y='-5.8%25' filterUnits='objectBoundingBox'%3E      %3CfeGaussianBlur in='SourceAlpha' result='shadowBlurInner1' stdDeviation='.5'/%3E      %3CfeOffset in='shadowBlurInner1' result='shadowOffsetInner1'/%3E      %3CfeComposite in='shadowOffsetInner1' in2='SourceAlpha' k2='-1' k3='1' operator='arithmetic' result='shadowInnerInner1'/%3E      %3CfeColorMatrix in='shadowInnerInner1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.5 0'/%3E    %3C/filter%3E  %3C/defs%3E  %3Cg fill='none' fill-rule='evenodd' opacity='.5' transform='matrix(0 1 1 0 .326 .306)'%3E    %3Cuse fill='%23000' filter='url(%23384e65d3-3eba-457c-b069-e5afe8f816fe-a)' xlink:href='%23384e65d3-3eba-457c-b069-e5afe8f816fe-b'/%3E    %3Cuse fill='url(%23384e65d3-3eba-457c-b069-e5afe8f816fe-c)' xlink:href='%23384e65d3-3eba-457c-b069-e5afe8f816fe-b'/%3E    %3Cuse fill='%23000' filter='url(%23384e65d3-3eba-457c-b069-e5afe8f816fe-d)' xlink:href='%23384e65d3-3eba-457c-b069-e5afe8f816fe-b'/%3E  %3C/g%3E%3C/svg%3E\") no-repeat 50% 50%;\n          mask: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='11' height='7' viewBox='0 0 11 7'%3E  %3Cdefs%3E    %3ClinearGradient id='384e65d3-3eba-457c-b069-e5afe8f816fe-c' x1='50%25' x2='50%25' y1='0%25' y2='100%25'%3E      %3Cstop offset='0%25' stop-color='%23FCFCFC'/%3E      %3Cstop offset='100%25' stop-color='%23F1F1F1'/%3E    %3C/linearGradient%3E    %3Cpath id='384e65d3-3eba-457c-b069-e5afe8f816fe-b' d='M5.058 8.287l-.707.707L.5 5.14a.664.664 0 0 1 0-.942L4.35.347l.707.707L1.442 4.67l3.616 3.617z'/%3E    %3Cfilter id='384e65d3-3eba-457c-b069-e5afe8f816fe-a' width='184.1%25' height='146.3%25' x='-42.1%25' y='-11.6%25' filterUnits='objectBoundingBox'%3E      %3CfeOffset dy='1' in='SourceAlpha' result='shadowOffsetOuter1'/%3E      %3CfeGaussianBlur in='shadowOffsetOuter1' result='shadowBlurOuter1' stdDeviation='.5'/%3E      %3CfeColorMatrix in='shadowBlurOuter1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.0612828351 0'/%3E    %3C/filter%3E    %3Cfilter id='384e65d3-3eba-457c-b069-e5afe8f816fe-d' width='163.1%25' height='134.7%25' x='-31.5%25' y='-5.8%25' filterUnits='objectBoundingBox'%3E      %3CfeGaussianBlur in='SourceAlpha' result='shadowBlurInner1' stdDeviation='.5'/%3E      %3CfeOffset in='shadowBlurInner1' result='shadowOffsetInner1'/%3E      %3CfeComposite in='shadowOffsetInner1' in2='SourceAlpha' k2='-1' k3='1' operator='arithmetic' result='shadowInnerInner1'/%3E      %3CfeColorMatrix in='shadowInnerInner1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.5 0'/%3E    %3C/filter%3E  %3C/defs%3E  %3Cg fill='none' fill-rule='evenodd' opacity='.5' transform='matrix(0 1 1 0 .326 .306)'%3E    %3Cuse fill='%23000' filter='url(%23384e65d3-3eba-457c-b069-e5afe8f816fe-a)' xlink:href='%23384e65d3-3eba-457c-b069-e5afe8f816fe-b'/%3E    %3Cuse fill='url(%23384e65d3-3eba-457c-b069-e5afe8f816fe-c)' xlink:href='%23384e65d3-3eba-457c-b069-e5afe8f816fe-b'/%3E    %3Cuse fill='%23000' filter='url(%23384e65d3-3eba-457c-b069-e5afe8f816fe-d)' xlink:href='%23384e65d3-3eba-457c-b069-e5afe8f816fe-b'/%3E  %3C/g%3E%3C/svg%3E\") no-repeat 50% 50%;\n  -webkit-mask-size: cover;\n          mask-size: cover;\n  background-color: currentColor;\n}\n.ui-icon-arrow-down-o {\n  display: inline-block;\n  vertical-align: middle;\n  width: 16px;\n  height: 8px;\n  -webkit-mask: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='11' height='7' viewBox='0 0 11 7'%3E  %3Cdefs%3E    %3ClinearGradient id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-c' x1='50%25' x2='50%25' y1='0%25' y2='100%25'%3E      %3Cstop offset='0%25' stop-color='%23FCFCFC'/%3E      %3Cstop offset='100%25' stop-color='%23F1F1F1'/%3E    %3C/linearGradient%3E    %3Cpath id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b' d='M5.058 8.287l-.707.707L.5 5.14a.664.664 0 0 1 0-.942L4.35.347l.707.707L1.442 4.67l3.616 3.617z'/%3E    %3Cfilter id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-a' width='184.1%25' height='146.3%25' x='-42.1%25' y='-11.6%25' filterUnits='objectBoundingBox'%3E      %3CfeOffset dy='1' in='SourceAlpha' result='shadowOffsetOuter1'/%3E      %3CfeGaussianBlur in='shadowOffsetOuter1' result='shadowBlurOuter1' stdDeviation='.5'/%3E      %3CfeColorMatrix in='shadowBlurOuter1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.0612828351 0'/%3E    %3C/filter%3E    %3Cfilter id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-d' width='163.1%25' height='134.7%25' x='-31.5%25' y='-5.8%25' filterUnits='objectBoundingBox'%3E      %3CfeGaussianBlur in='SourceAlpha' result='shadowBlurInner1' stdDeviation='.5'/%3E      %3CfeOffset in='shadowBlurInner1' result='shadowOffsetInner1'/%3E      %3CfeComposite in='shadowOffsetInner1' in2='SourceAlpha' k2='-1' k3='1' operator='arithmetic' result='shadowInnerInner1'/%3E      %3CfeColorMatrix in='shadowInnerInner1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.5 0'/%3E    %3C/filter%3E  %3C/defs%3E  %3Cg fill='none' fill-rule='evenodd' opacity='.5' transform='rotate(-90 3.51 3.184)'%3E    %3Cuse fill='%23000' filter='url(%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-a)' xlink:href='%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b'/%3E    %3Cuse fill='url(%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-c)' xlink:href='%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b'/%3E    %3Cuse fill='%23000' filter='url(%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-d)' xlink:href='%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b'/%3E  %3C/g%3E%3C/svg%3E\") no-repeat 50% 50%;\n          mask: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='11' height='7' viewBox='0 0 11 7'%3E  %3Cdefs%3E    %3ClinearGradient id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-c' x1='50%25' x2='50%25' y1='0%25' y2='100%25'%3E      %3Cstop offset='0%25' stop-color='%23FCFCFC'/%3E      %3Cstop offset='100%25' stop-color='%23F1F1F1'/%3E    %3C/linearGradient%3E    %3Cpath id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b' d='M5.058 8.287l-.707.707L.5 5.14a.664.664 0 0 1 0-.942L4.35.347l.707.707L1.442 4.67l3.616 3.617z'/%3E    %3Cfilter id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-a' width='184.1%25' height='146.3%25' x='-42.1%25' y='-11.6%25' filterUnits='objectBoundingBox'%3E      %3CfeOffset dy='1' in='SourceAlpha' result='shadowOffsetOuter1'/%3E      %3CfeGaussianBlur in='shadowOffsetOuter1' result='shadowBlurOuter1' stdDeviation='.5'/%3E      %3CfeColorMatrix in='shadowBlurOuter1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.0612828351 0'/%3E    %3C/filter%3E    %3Cfilter id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-d' width='163.1%25' height='134.7%25' x='-31.5%25' y='-5.8%25' filterUnits='objectBoundingBox'%3E      %3CfeGaussianBlur in='SourceAlpha' result='shadowBlurInner1' stdDeviation='.5'/%3E      %3CfeOffset in='shadowBlurInner1' result='shadowOffsetInner1'/%3E      %3CfeComposite in='shadowOffsetInner1' in2='SourceAlpha' k2='-1' k3='1' operator='arithmetic' result='shadowInnerInner1'/%3E      %3CfeColorMatrix in='shadowInnerInner1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.5 0'/%3E    %3C/filter%3E  %3C/defs%3E  %3Cg fill='none' fill-rule='evenodd' opacity='.5' transform='rotate(-90 3.51 3.184)'%3E    %3Cuse fill='%23000' filter='url(%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-a)' xlink:href='%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b'/%3E    %3Cuse fill='url(%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-c)' xlink:href='%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b'/%3E    %3Cuse fill='%23000' filter='url(%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-d)' xlink:href='%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b'/%3E  %3C/g%3E%3C/svg%3E\") no-repeat 50% 50%;\n  -webkit-mask-size: cover;\n          mask-size: cover;\n  background-color: currentColor;\n}\n",""])},function(e,t){e.exports=function(){var e=[];return e.toString=function(){for(var e=[],t=0;t<this.length;t++){var n=this[t];n[2]?e.push("@media "+n[2]+"{"+n[1]+"}"):e.push(n[1])}return e.join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var a={},r=0;r<this.length;r++){var i=this[r][0];"number"==typeof i&&(a[i]=!0)}for(r=0;r<t.length;r++){var o=t[r];"number"==typeof o[0]&&a[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="("+o[2]+") and ("+n+")"),e.push(o))}},e}},function(e,t){var n={},a=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}},r=a(function(){return/msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase())}),i=a(function(){return document.head||document.getElementsByTagName("head")[0]}),o=null,s=0,c=[];function d(e,t){for(var a=0;a<e.length;a++){var r=e[a],i=n[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(g(r.parts[o],t))}else{var s=[];for(o=0;o<r.parts.length;o++)s.push(g(r.parts[o],t));n[r.id]={id:r.id,refs:1,parts:s}}}}function l(e){for(var t=[],n={},a=0;a<e.length;a++){var r=e[a],i=r[0],o={css:r[1],media:r[2],sourceMap:r[3]};n[i]?n[i].parts.push(o):t.push(n[i]={id:i,parts:[o]})}return t}function p(e,t){var n=i(),a=c[c.length-1];if("top"===e.insertAt)a?a.nextSibling?n.insertBefore(t,a.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else{if("bottom"!==e.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(t)}}function u(e){e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function f(e){var t=document.createElement("style");return t.type="text/css",p(e,t),t}function g(e,t){var n,a,r;if(t.singleton){var i=s++;n=o||(o=f(t)),a=m.bind(null,n,i,!1),r=m.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return t.rel="stylesheet",p(e,t),t}(t),a=function(e,t){var n=t.css,a=t.sourceMap;a&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var r=new Blob([n],{type:"text/css"}),i=e.href;e.href=URL.createObjectURL(r),i&&URL.revokeObjectURL(i)}.bind(null,n),r=function(){u(n),n.href&&URL.revokeObjectURL(n.href)}):(n=f(t),a=function(e,t){var n=t.css,a=t.media;a&&e.setAttribute("media",a);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){u(n)});return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");void 0===(t=t||{}).singleton&&(t.singleton=r()),void 0===t.insertAt&&(t.insertAt="bottom");var a=l(e);return d(a,t),function(e){for(var r=[],i=0;i<a.length;i++){var o=a[i];(s=n[o.id]).refs--,r.push(s)}e&&d(l(e),t);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete n[s.id]}}}};var y,x=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function m(e,t,n,a){var r=n?"":a.css;if(e.styleSheet)e.styleSheet.cssText=x(t,r);else{var i=document.createTextNode(r),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(i,o[t]):e.appendChild(i)}}},function(e,t,n){"use strict";n.r(t);var a=n(0),r=a.a.component("report-viewer",{template:'<div>\n  <div class="audit-result-hd">\n    <div class="audit-result-summary">\n      <div class="audit-result-summary–primary">\n        <h3 class="audit-title">体验评分</h3>\n        <p class="audit-result-desc">\n          <span>设备类型：{{envInfo.deviceName}}</span>\n          <span>网络类型：{{envInfo.networkType}}</span>\n          <span>基础库版本：{{envInfo.libVersion}}</span>\n        </p>\n      </div>\n      <div class="audit-result-summary-extra">\n        <p><a @click="reset">清空体验评分</a></p>\n        <div>\n          <span class="audit-icon-color-remark">\n            <i class="audit-icon-dot-red"></i>\n            <span>0 - 59</span>\n          </span>\n          <span class="audit-icon-color-remark">\n            <i class="audit-icon-dot-yellow"></i>\n            <span>60 - 89</span>\n          </span>\n          <span class="audit-icon-color-remark">\n            <i class="audit-icon-dot-green"></i>\n            <span>90 - 100</span>\n          </span>\n        </div>\n      </div>\n    </div>\n    <div class="audit-result-score">\n      <div class="audit-score-item">\n        <div :class="[\'audit-score-item-icon\', \'audit-score-item-icon-\' + getScoreColor(auditsReport.result.score)]">\n          <svg xmlns="http://www.w3.org/2000/svg" width="64px" height="64px" viewBox="0 0 14 14">\n            <circle class="audit-score-item-icon-circle-bg"></circle>\n            <circle class="audit-score-item-icon-circle" cx="7" cy="7" r="6" fill="none" stroke-width="1"\n              :style="getStrokeStyle(auditsReport.result.score || 0, 37.7)" transform="rotate(-90 7 7)"></circle>\n          </svg>\n          <span class="audit-score-value">{{auditsReport.result.score}}</span>\n        </div>\n        <div class="audit-score-item-desc">总分</div>\n      </div>\n      <div v-for="category in auditsReport.result.categories" :key="category.type" class="audit-score-item">\n        <div :class="[\'audit-score-item-icon\', \'audit-score-item-icon-\' + getScoreColor(category.score.num)]">\n          <svg xmlns="http://www.w3.org/2000/svg" width="64px" height="64px" viewBox="0 0 14 14">\n            <circle class="audit-score-item-icon-circle-bg"></circle>\n            <circle class="audit-score-item-icon-circle" cx="7" cy="7" r="6" fill="none" stroke-width="1" stroke="#11E299"\n              :style="getStrokeStyle(category.score.num || 0, 37.7)" transform="rotate(-90 7 7)"></circle>\n          </svg>\n          <span class="audit-score-value">{{category.score.num}}</span>\n        </div>\n        <div class="audit-score-item-desc">{{category.text}}</div>\n      </div>\n    </div>\n  </div>\n  <div class="audit-result-bd">\n    <div v-for="category in auditsReport.result.categories" :key="category.type" class="audit-result-group">\n      <div class="audit-result-group-hd">\n        <h3 :class="[\'audit-result-group-title\', \'audit-result-group-title-\' + getScoreColor(category.score.num)]">{{category.text}} <span\n            class="audit-result-group-score">{{category.score.num}}</span></h3>\n        <p class="audit-result-group-desc">{{category.description}}</p>\n      </div>\n      <div class="audit-result-group-bd">\n        <details v-if="getCategoryTasks(category.type, \'failed\').length" class="audit-result-items" open>\n          <summary class="audit-result-item-summary">\n            <p class="audit-result-item-summary-content">没通过</p>\n            <span>{{getCategoryTasks(category.type, \'failed\').length}} 项&nbsp;</span>\n            <i class="ui-icon-arrow-down-o"></i>\n          </summary>\n          <div>\n            <details open v-for="(item,index) in getCategoryTasks(category.type, \'failed\')" v-if="ignoreTasks.indexOf(item.meta.id) == -1" :key="item.meta.id">\n              <summary class="audit-result-item">\n                <p class="audit-result-item-content">{{index + 1}} {{item.meta.failedTitle}} <a v-if="item.showIgnore" href="javascript:;" @click.prevent="ignoreTask(item.meta.id)">忽略</a></p>\n                <p class="audit-result-item-ext"><span v-if="item.failedSummary">{{item.failedSummary}}</span><i\n                    class="ui-icon-arrow-down-o"></i></p>\n              </summary>\n              <details class="audit-result-item-detail">\n                <summary>{{item.meta.description}}&nbsp;<a v-if="item.meta.document" href="javascript:;"\n                    @click="open(item.meta.document)">了解更多</a><i\n                    class="ui-icon-arrow-down-o"></i></summary>\n                <div>\n                  <table class="audit-result-table">\n                    <thead>\n                      <th v-for="head in item.headings" :key="head.key">{{head.text}}</th>\n                    </thead>\n                    <tbody>\n                      <tr v-for="detail in item.details">\n                        <td v-for="head in item.headings" :key="head.key">\n                          <p v-if="head.type == \'url\'"><a href="javascript:;" :title="detail[head.key]">{{detail[head.key]}}</a></p>\n                          <p v-else-if="head.type == \'stack\'" v-for="stack in detail[head.key]">at {{stack.func}} (<a href="javascript:;"\n                              :title="[stack.file, stack.line, stack.column].join(\':\')"\n                              @click="openEditor(stack.file, stack.line, stack.column)">{{[stack.file, stack.line, stack.column].join(\':\')}}</a>)</p>\n                          <p :title="detail[head.key]" v-else>{{detail[head.key]}}</p>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </details>\n            </details>\n          </div>\n        </details>\n        <details v-if="getCategoryTasks(category.type, \'passed\') && getCategoryTasks(category.type, \'passed\').length" class="audit-result-items">\n          <summary class="audit-result-item-summary">\n            <p class="audit-result-item-summary-content">已通过</p>\n            <span>{{getCategoryTasks(category.type, \'passed\').length}} 项&nbsp;</span>\n            <i class="ui-icon-arrow-down-o"></i>\n          </summary>\n          <div>\n            <details v-for="(item, idx) in getCategoryTasks(category.type, \'passed\')">\n              <summary class="audit-result-item">\n                <p class="audit-result-item-content">{{idx + 1}} {{item.meta.passedTitle}}</p>\n                <p class="audit-result-item-ext"> <i class="ui-icon-arrow-down-o"></i>\n                </p>\n              </summary>\n              <div class="audit-result-item-detail">\n                <p>{{item.meta.description}}&nbsp;<a v-if="item.meta.document" href="javascript:;" @click="open(item.meta.document)">了解更多</a></p>\n              </div>\n            </details>\n          </div>\n        </details>\n      </div>\n    </div>\n    <div v-if="auditsReport.result.notApplicable && auditsReport.result.notApplicable.length">\n      <details class="audit-result-items">\n        <summary class="audit-result-item-summary">\n          <p class="audit-result-item-summary-content">不适用当前小程序</p>\n          <span>{{auditsReport.result.notApplicable.length}} 项&nbsp;</span>\n          <i class="ui-icon-arrow-down-o"></i>\n        </summary>\n        <div>\n          <details v-for="(item, idx) in auditsReport.result.notApplicable">\n            <summary class="audit-result-item">\n              <p class="audit-result-item-content">{{idx + 1}} {{item.meta.passedTitle}}</p>\n              <p class="audit-result-item-ext"> <i class="ui-icon-arrow-down-o"></i>\n              </p>\n            </summary>\n            <div class="audit-result-item-detail">\n              <p>{{item.meta.description}}&nbsp;<a v-if="item.meta.document" href="javascript:;" @click="open(item.meta.document)">了解更多</a></p>\n            </div>\n          </details>\n        </div>\n      </details>\n    </div>\n    <div v-if="ignoreTasksList && ignoreTasksList.length">\n        <details class="audit-result-items">\n          <summary class="audit-result-item-summary">\n            <p class="audit-result-item-summary-content">已忽略的规则</p>\n            <span>{{ignoreTasksList.length}} 项&nbsp;</span>\n            <i class="ui-icon-arrow-down-o"></i>\n          </summary>\n          <div>\n            <details v-for="(item, idx) in ignoreTasksList" :key="item.meta.id">\n              <summary class="audit-result-item">\n                <p class="audit-result-item-content">{{idx + 1}} {{item.meta.passedTitle}} <a href="javascript:;" @click.prevent="resetIgnoreTask(item.meta.id)">重置</a></p>\n                <p class="audit-result-item-ext"> <i class="ui-icon-arrow-down-o"></i>\n                </p>\n              </summary>\n              <div class="audit-result-item-detail">\n                <p>{{item.meta.description}}&nbsp;<a v-if="item.meta.document" href="javascript:;" @click="open(item.meta.document)">了解更多</a></p>\n              </div>\n            </details>\n          </div>\n        </details>\n      </div>\n  </div>\n</div>',props:["envInfo","auditsReport"],data:()=>({ignoreTasks:[]}),mounted(){try{const e=localStorage.getItem("ignore_tasks");this.ignoreTasks=e?JSON.parse(e):[]}catch(e){this.ignoreTasks=[]}},computed:{ignoreTasksList(){return this.auditsReport.result.tasks.filter(e=>-1!=this.ignoreTasks.indexOf(e.meta.id))}},methods:{getCategoryTasks(e,t){return this.auditsReport.result.tasks.filter(n=>"not-applicable"!=n.scoreDisplayMode&&(e==n.scoringCategory&&(!(this.ignoreTasks.indexOf(n.meta.id)>-1)&&("failed"==t?0==n.score:100==n.score))))},getStrokeStyle(e,t){const n=t*e/100;return{strokeDasharray:n+","+(t-n)}},openEditor(e,t,n){window.openEditor&&window.openEditor(e,t,n)},getStackText(e){let t=60-e.func.length,n=new RegExp("^(.{"+(e.file.length-t)+"})");return`${e.file.replace(n,"...")}:${e.line}:${e.column}`},getScoreColor:e=>e>=90?"green":e>=60?"yellow":"red",ignoreTask(e){-1==this.ignoreTasks.indexOf(e)&&(this.ignoreTasks.push(e),localStorage.setItem("ignore_tasks",JSON.stringify(this.ignoreTasks)))},resetIgnoreTask(e){this.ignoreTasks.indexOf(e)>-1&&(this.ignoreTasks.splice(this.ignoreTasks.indexOf(e),1),localStorage.setItem("ignore_tasks",JSON.stringify(this.ignoreTasks)))},open(e,t){window.open(e,"_blank")},reset(){this.$emit("reset")}}});n(5);const i={score_num:52,extra1:"stop",confidence:60,version:"0.0.38",results:[{id:"js-exception",headings:[{key:"msg",text:"错误信息"},{key:"page",text:"页面"}],details:[{row:[{key:"msg",text:"TypeError: Cannot read property 'route' of undefined"},{key:"page",text:"pages/home/dashboard/index"}]}],score:0,scoreDisplayMode:"numeric",weight:3},{id:"image-no-cache",headings:[{key:"url",text:"URL"},{key:"page",text:"页面"}],details:[],score:100,scoreDisplayMode:"numeric",weight:4},{id:"large-image",headings:[{key:"url",text:"URL"},{key:"size",text:"大小"},{key:"rect",text:"实际宽高"},{key:"display",text:"显示宽高"},{key:"page",text:"页面"}],details:[],score:100,scoreDisplayMode:"numeric",weight:4},{id:"request-fail",headings:[{key:"url",text:"URL"},{key:"statusCode",text:"状态码"},{key:"page",text:"页面"}],details:[{row:[{key:"url",text:"https://img.yzcdn.cn/vant/vant-icon-839a51.woff2"},{key:"statusCode",text:"net::ERR_CONNECTION_TIMED_OUT"},{key:"page",text:""}]},{row:[{key:"url",text:"https://img.yzcdn.cn/public_files/2018/01/24/94944a6494616cc0781d3b168017299e.png"},{key:"statusCode",text:"net::ERR_CONNECTION_TIMED_OUT"},{key:"page",text:""}]}],score:0,scoreDisplayMode:"numeric",weight:3},{id:"request-long-time",headings:[{key:"url",text:"URL"},{key:"time",text:"耗时"},{key:"page",text:"页面"}],details:[{row:[{key:"url",text:"https://img.yzcdn.cn/public_files/2018/01/24/94944a6494616cc0781d3b168017299e.png"},{key:"time",text:"17580.00"},{key:"page",text:""}]},{row:[{key:"url",text:"https://img.yzcdn.cn/vant/vant-icon-839a51.woff2"},{key:"time",text:"9756.00"},{key:"page",text:""}]},{row:[{key:"url",text:"https://img.yzcdn.cn/public_files/2018/01/24/94944a6494616cc0781d3b168017299e.png"},{key:"time",text:"8612.00"},{key:"page",text:""}]},{row:[{key:"url",text:"https://img.yzcdn.cn/vant/vant-icon-839a51.woff"},{key:"time",text:"1413.00"},{key:"page",text:""}]}],score:0,scoreDisplayMode:"numeric",weight:7},{id:"too-much-image-request",headings:[{key:"count",text:"数量（每秒）",style:"min-width: 30px;"},{key:"url",text:"URL"},{key:"page",text:"页面"}],details:[],score:100,scoreDisplayMode:"numeric",weight:4},{id:"too-much-request",headings:[{key:"count",text:"数量（每秒）",style:"min-width: 30px;"},{key:"url",text:"URL"},{key:"page",text:"页面"}],details:[],score:100,scoreDisplayMode:"numeric",weight:4},{id:"set-data-large",headings:[{key:"size",text:"数据大小",type:"none"},{key:"vars",text:"变量名"},{key:"position",text:"调用组件"},{key:"page",text:"页面"}],details:[],score:100,scoreDisplayMode:"numeric",weight:6},{id:"set-data-freq",headings:[{key:"times",text:"每秒调用次数",type:"none"},{key:"page",text:"页面"}],details:[],score:100,scoreDisplayMode:"numeric",weight:7},{id:"set-data-no-binding",headings:[{key:"name",text:"变量名"},{key:"page",text:"页面"}],details:[{row:[{key:"name",text:"classNames"},{key:"position",text:"vant-weapp/dist/transition/index"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"isHomePage"},{key:"position",text:"Page"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"openHideStore"},{key:"position",text:"Page"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"soldOutRecommend"},{key:"position",text:"Page"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"startIndex"},{key:"position",text:"components/showcase-container/index"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"featureComponentsAllLoaded"},{key:"position",text:"components/showcase-container/index"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"featureId"},{key:"position",text:"Page"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"templateId"},{key:"position",text:"Page"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"isNeedFixed"},{key:"position",text:"components/showcase/captain-components/goods-search/index"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"isFixed"},{key:"position",text:"components/showcase/captain-components/goods-search/index"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"isNeedFixedScroll"},{key:"position",text:"components/showcase/captain-components/goods-search/index"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"subEntry"},{key:"position",text:"components/showcase/image/index"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"teamLogo"},{key:"position",text:"components/showcase/image/index"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"teamName"},{key:"position",text:"components/showcase/image/index"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"slideHeight"},{key:"position",text:"components/showcase/captain-components/image/index"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"page"},{key:"position",text:"components/showcase/ump-seckill/index"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"loadingMore"},{key:"position",text:"components/showcase/goods/index"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"checkinId"},{key:"position",text:"components/sign-popup/index"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"isPullDownRefresh"},{key:"position",text:"components/showcase/goods/index"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"name",text:"classNames"},{key:"position",text:"vant-weapp/dist/transition/index"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"isTabPage"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"openHideStore"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"soldOutRecommend"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.item_id"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.kdt_id"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.supplier_kdt_id"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.alias"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.title"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.price"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.origin"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.wait_to_sold"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.is_display"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.is_virtual"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.picture"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.sold_status"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.hide_shopcart"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.presale"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.sell_point"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.is_installment"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.group_ids"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.biz_mark_code"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.quota"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.quota_used"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.is_yz_guarantee"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.guarantee_show_style_type"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.purchase_limit"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"brief.fx_trade_mode"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"startIndex"},{key:"position",text:"components/showcase-container/index"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"featureComponentsAllLoaded"},{key:"position",text:"components/showcase-container/index"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"activityAlias"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"name",text:"classNames"},{key:"position",text:"vant-weapp/dist/transition/index"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"isTabPage"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"goodsDetail"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"originData"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"openHideStore"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"soldOutRecommend"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"goodsDetail.showcaseComponents"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.item_id"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.kdt_id"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.supplier_kdt_id"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.alias"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.title"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.price"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.origin"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.wait_to_sold"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.is_display"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.is_virtual"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.picture"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.sold_status"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.hide_shopcart"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.presale"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.sell_point"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.is_installment"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.biz_mark_code"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.quota"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"brief.quota_used"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"originData.activity"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"originData.sku"},{key:"position",text:"Page"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"startIndex"},{key:"position",text:"components/showcase-container/index"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"featureComponentsAllLoaded"},{key:"position",text:"components/showcase-container/index"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"loadingMore"},{key:"position",text:"components/showcase/goods/index"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"page"},{key:"position",text:"components/showcase/goods/index"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"subEntry"},{key:"position",text:"components/showcase/image/index"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"teamLogo"},{key:"position",text:"components/showcase/image/index"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"teamName"},{key:"position",text:"components/showcase/image/index"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"slideHeight"},{key:"position",text:"components/showcase/captain-components/image/index"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"name",text:"classNames"},{key:"position",text:"vant-weapp/dist/popup/index"},{key:"page",text:"pages/goods/cart/index"}]},{row:[{key:"name",text:"openHideStore"},{key:"position",text:"Page"},{key:"page",text:"pages/goods/cart/index"}]},{row:[{key:"name",text:"soldOutRecommend"},{key:"position",text:"Page"},{key:"page",text:"pages/goods/cart/index"}]},{row:[{key:"name",text:"loadingMore"},{key:"position",text:"components/showcase/goods/index"},{key:"page",text:"pages/goods/cart/index"}]},{row:[{key:"name",text:"page"},{key:"position",text:"components/showcase/goods/index"},{key:"page",text:"pages/goods/cart/index"}]},{row:[{key:"name",text:"classNames"},{key:"position",text:"vant-weapp/dist/transition/index"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"startIndex"},{key:"position",text:"components/showcase-container/index"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"featureComponentsAllLoaded"},{key:"position",text:"components/showcase-container/index"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"openHideStore"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"soldOutRecommend"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"page"},{key:"position",text:"components/showcase/ump-seckill/index"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"user.avatar"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"user.level"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"user.salesman"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"user.grouponFounder"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalConfig.type"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalConfig.title"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalConfig.is_global_setting"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalData.isV2Balance"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalData.isCheckin"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalData.supportSignInfo"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalData.balanceData"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalData.userCenterConfigV2"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalData.userCenterComponents"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalData.isYZEdu"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalData.kdt_id"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalData.shopInfo"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalData.components"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalData.feature_components"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalData.showcase_type"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalData.user"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"globalData.plugins"},{key:"position",text:"Page"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"loadingMore"},{key:"position",text:"components/showcase/goods/index"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"subEntry"},{key:"position",text:"components/showcase/image/index"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"teamLogo"},{key:"position",text:"components/showcase/image/index"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"teamName"},{key:"position",text:"components/showcase/image/index"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"slideHeight"},{key:"position",text:"components/showcase/captain-components/image/index"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"name",text:"classNames"},{key:"position",text:"vant-weapp/dist/popup/index"},{key:"page",text:"packages/ump/sign-in/index"}]},{row:[{key:"name",text:"startIndex"},{key:"position",text:"components/showcase-container/index"},{key:"page",text:"packages/ump/sign-in/index"}]},{row:[{key:"name",text:"featureComponentsAllLoaded"},{key:"position",text:"components/showcase-container/index"},{key:"page",text:"packages/ump/sign-in/index"}]},{row:[{key:"name",text:"isTabPage"},{key:"position",text:"Page"},{key:"page",text:"packages/ump/sign-in/index"}]},{row:[{key:"name",text:"openHideStore"},{key:"position",text:"Page"},{key:"page",text:"packages/ump/sign-in/index"}]},{row:[{key:"name",text:"soldOutRecommend"},{key:"position",text:"Page"},{key:"page",text:"packages/ump/sign-in/index"}]},{row:[{key:"name",text:"dailyRewards"},{key:"position",text:"Page"},{key:"page",text:"packages/ump/sign-in/index"}]},{row:[{key:"name",text:"shareTitle"},{key:"position",text:"Page"},{key:"page",text:"packages/ump/sign-in/index"}]},{row:[{key:"name",text:"isTabPage"},{key:"position",text:"Page"},{key:"page",text:"packages/card/all/index"}]},{row:[{key:"name",text:"openHideStore"},{key:"position",text:"Page"},{key:"page",text:"packages/card/all/index"}]},{row:[{key:"name",text:"soldOutRecommend"},{key:"position",text:"Page"},{key:"page",text:"packages/card/all/index"}]},{row:[{key:"name",text:"classNames"},{key:"position",text:"vant-weapp/dist/transition/index"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"isTabPage"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"openHideStore"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"soldOutRecommend"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"isWhitelist"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.assets_info"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.created_at"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.is_member"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.kdt_id"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.member_created_at"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.mobile"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.name"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.origin_kdt_id"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.profile"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_assets_info"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_created_at"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_is_buyer"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_is_member"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_kdt_id"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_member_created_at"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_mobile"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_name"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_origin_kdt_id"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_profile"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_source_id"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_source_type"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_src"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_src_channel"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_src_way"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_trade_info"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_updated_at"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_yz_mall_fans_id"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.set_yz_uid"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.source_id"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.source_type"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.src"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.trade_info"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.updated_at"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.yz_mall_fans_id"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"customer.yz_uid"},{key:"position",text:"Page"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"name",text:"isTabPage"},{key:"position",text:"Page"},{key:"page",text:"packages/user/coupon/list/index"}]},{row:[{key:"name",text:"openHideStore"},{key:"position",text:"Page"},{key:"page",text:"packages/user/coupon/list/index"}]},{row:[{key:"name",text:"soldOutRecommend"},{key:"position",text:"Page"},{key:"page",text:"packages/user/coupon/list/index"}]},{row:[{key:"name",text:"classNames"},{key:"position",text:"vant-weapp/dist/transition/index"},{key:"page",text:"packages/trade/order/list/index"}]},{row:[{key:"name",text:"isTabPage"},{key:"position",text:"Page"},{key:"page",text:"packages/trade/order/list/index"}]},{row:[{key:"name",text:"openHideStore"},{key:"position",text:"Page"},{key:"page",text:"packages/trade/order/list/index"}]},{row:[{key:"name",text:"soldOutRecommend"},{key:"position",text:"Page"},{key:"page",text:"packages/trade/order/list/index"}]},{row:[{key:"name",text:"loadingMore"},{key:"position",text:"components/showcase/goods/index"},{key:"page",text:"packages/trade/order/list/index"}]},{row:[{key:"name",text:"page"},{key:"position",text:"components/showcase/goods/index"},{key:"page",text:"packages/trade/order/list/index"}]},{row:[{key:"name",text:"isTabPage"},{key:"position",text:"Page"},{key:"page",text:"packages/order/address-list/index"}]},{row:[{key:"name",text:"openHideStore"},{key:"position",text:"Page"},{key:"page",text:"packages/order/address-list/index"}]},{row:[{key:"name",text:"soldOutRecommend"},{key:"position",text:"Page"},{key:"page",text:"packages/order/address-list/index"}]}],score:0,scoreDisplayMode:"numeric",weight:3},{id:"small-response-area",headings:[{key:"area",text:"响应区域"},{key:"comp",text:"监听的组件"},{key:"page",text:"页面"}],details:[{row:[{key:"area",text:"宽: 96, 高: 15"},{key:"comp",text:"wx-text.copyright-index--copyright-text"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"area",text:"宽: 12, 高: 12"},{key:"comp",text:"wx-view..van-icon vant-weapp-dist-icon-index--van-icon van-icon-chat-o vant-weapp-dist-icon-index--van-icon-chat-o"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"area",text:"宽: 20, 高: 10"},{key:"comp",text:"wx-view.goods-info-index--share-text"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"area",text:"宽: 96, 高: 15"},{key:"comp",text:"wx-text.copyright-index--copyright-text"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"area",text:"宽: 48.734375, 高: 18"},{key:"comp",text:"wx-view.intro-index--content"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"area",text:"宽: 5.78125, 高: 8"},{key:"comp",text:"wx-view..van-icon vant-weapp-dist-icon-index--van-icon van-icon-arrow vant-weapp-dist-icon-index--van-icon-arrow"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"area",text:"宽: 16, 高: 24"},{key:"comp",text:"wx-view.dist-cell-index--van-cell__right-icon.van-icon vant-weapp-dist-icon-index--van-icon van-icon-arrow vant-weapp-dist-icon-index--van-icon-arrow"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"area",text:"宽: 12, 高: 12"},{key:"comp",text:"wx-view..van-icon vant-weapp-dist-icon-index--van-icon van-icon-passed vant-weapp-dist-icon-index--van-icon-passed"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"area",text:"宽: 96, 高: 15"},{key:"comp",text:"wx-text.copyright-index--copyright-text"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"area",text:"宽: 20, 高: 10"},{key:"comp",text:"wx-view.goods-info-index--share-text"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"area",text:"宽: 11.5625, 高: 24"},{key:"comp",text:"wx-view.dist-cell-index--van-cell__right-icon.van-icon vant-weapp-dist-icon-index--van-icon van-icon-arrow vant-weapp-dist-icon-index--van-icon-arrow"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"area",text:"宽: 50.953125, 高: 18"},{key:"comp",text:"wx-view.intro-index--content"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"area",text:"宽: 8, 高: 8"},{key:"comp",text:"wx-view..van-icon vant-weapp-dist-icon-index--van-icon van-icon-arrow vant-weapp-dist-icon-index--van-icon-arrow"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"area",text:"宽: 16, 高: 24"},{key:"comp",text:"wx-view.dist-cell-index--van-cell__right-icon.van-icon vant-weapp-dist-icon-index--van-icon van-icon-arrow vant-weapp-dist-icon-index--van-icon-arrow"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"area",text:"宽: 12, 高: 12"},{key:"comp",text:"wx-view..van-icon vant-weapp-dist-icon-index--van-icon van-icon-passed vant-weapp-dist-icon-index--van-icon-passed"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"area",text:"宽: 96, 高: 15"},{key:"comp",text:"wx-text.copyright-index--copyright-text"},{key:"page",text:"pages/goods/cart/index"}]},{row:[{key:"area",text:"宽: 13, 高: 54"},{key:"comp",text:"common/components/form-view/index.header-index--checkbox"},{key:"page",text:"pages/goods/cart/index"}]},{row:[{key:"area",text:"宽: 13, 高: 18"},{key:"comp",text:"wx-view.header-index--icon--unchecked.van-icon icon-index--van-icon van-icon-circle icon-index--van-icon-circle"},{key:"page",text:"pages/goods/cart/index"}]},{row:[{key:"area",text:"宽: 13, 高: 18"},{key:"comp",text:"wx-view.item-index--icon--unchecked.van-icon icon-index--van-icon van-icon-circle icon-index--van-icon-circle"},{key:"page",text:"pages/goods/cart/index"}]},{row:[{key:"area",text:"宽: 13, 高: 18"},{key:"comp",text:"wx-view.submit-block-index--icon--unchecked.van-icon icon-index--van-icon van-icon-circle icon-index--van-icon-circle"},{key:"page",text:"pages/goods/cart/index"}]},{row:[{key:"area",text:"宽: 14, 高: 14"},{key:"comp",text:"wx-view.recommend-goods-index--arrow.van-icon icon-index--van-icon van-icon-arrow icon-index--van-icon-arrow"},{key:"page",text:"pages/goods/cart/index"}]},{row:[{key:"area",text:"宽: 8.671875, 高: 12"},{key:"comp",text:"wx-view..van-icon vant-weapp-dist-icon-index--van-icon van-icon-chat-o vant-weapp-dist-icon-index--van-icon-chat-o"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"area",text:"宽: 96, 高: 15"},{key:"comp",text:"wx-text.copyright-index--copyright-text"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"area",text:"宽: 11.5625, 高: 16"},{key:"comp",text:"wx-view.cell-index--van-cell__right-icon.van-icon vant-weapp-dist-icon-index--van-icon van-icon-arrow vant-weapp-dist-icon-index--van-icon-arrow"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"area",text:"宽: 96, 高: 15"},{key:"comp",text:"wx-text.copyright-index--copyright-text"},{key:"page",text:"packages/ump/sign-in/index"}]},{row:[{key:"area",text:"宽: 7.234375, 高: 10"},{key:"comp",text:"wx-view..van-icon icon-index--van-icon van-icon-arrow icon-index--van-icon-arrow"},{key:"page",text:"packages/card/all/index"}]},{row:[{key:"area",text:"宽: 11.5625, 高: 16"},{key:"comp",text:"wx-view..van-icon icon-index--van-icon van-icon-credit-pay icon-index--van-icon-credit-pay"},{key:"page",text:"packages/card/all/index"}]},{row:[{key:"area",text:"宽: 96, 高: 15"},{key:"comp",text:"wx-text.copyright-index--copyright-text"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"area",text:"宽: 8.671875, 高: 12"},{key:"comp",text:"wx-view.recommend-goods-index--arrow.van-icon icon-index--van-icon van-icon-arrow icon-index--van-icon-arrow"},{key:"page",text:"packages/trade/order/list/index"}]},{row:[{key:"area",text:"宽: 12, 高: 12"},{key:"comp",text:"wx-view.recommend-goods-index--arrow.van-icon icon-index--van-icon van-icon-arrow icon-index--van-icon-arrow"},{key:"page",text:"packages/trade/order/list/index"}]},{row:[{key:"area",text:"宽: 96, 高: 15"},{key:"comp",text:"wx-text.copyright-index--copyright-text"},{key:"page",text:"packages/order/address-list/index"}]},{row:[{key:"area",text:"宽: 11.5625, 高: 24"},{key:"comp",text:"wx-view.cell-index--van-cell__right-icon.van-icon icon-index--van-icon van-icon-arrow icon-index--van-icon-arrow"},{key:"page",text:"packages/order/address-list/index"}]}],score:0,scoreDisplayMode:"numeric",weight:3},{id:"render-long-time",headings:[{key:"cost",text:"耗时"},{key:"type",text:"类型"},{key:"page",text:"页面"}],details:[],score:100,scoreDisplayMode:"numeric",weight:7},{id:"execute-long-time",headings:[{key:"method",text:"方法名"},{key:"cost",text:"耗时"},{key:"page",text:"页面"}],details:[],score:100,scoreDisplayMode:"numeric",weight:6},{id:"timer-no-recycle",headings:[{key:"name",text:"定时器"},{key:"page",text:"页面"}],details:[],score:100,scoreDisplayMode:"not-applicable",weight:0},{id:"request-body-cache",headings:[{key:"url",text:"URL"},{key:"page",text:"页面"}],details:[{row:[{key:"url",text:"https://tj.youzan.com/v3/weapp/log"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"url",text:"https://tj.youzan.com/v3/weapp/log"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscump/targeted-marketing/visit-gift/fetch.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc&channel=2"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscshop/weappp/shop_business_hour.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"url",text:"https://open.youzan.com/api/oauthentry/youzan.salesman.wap.account/1.0.0/get?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscshop/uic/acl_auth/scene_auth.json?kdt_id=42815442&app_id=wx1c03433853a74963&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscuser/membercenter/pointsName.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscshop/trade/cart/count.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"url",text:"https://tj.youzan.com/v3/weapp/log"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscshop/showcase/floating_nav.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc&from=weapp&page_type=8"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"url",text:"https://open.youzan.com/api/oauthentry/youzan.pay.cert.teamcertification/1.0.0/get?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"url",text:"https://open.youzan.com/api/oauthentry/youzan.salesman.wap.share/1.0.0/get?alias=1i91p4l68&goodsId=476523476&type=NORMAL&app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscshop/uic/acl_auth/scene_auth.json?kdt_id=42815442&app_id=wx1c03433853a74963&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscuser/membercenter/pointsName.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscshop/trade/cart/count.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"url",text:"https://open.youzan.com/api/oauthentry/youzan.pay.cert.teamcertification/1.0.0/get?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscshop/ump/salesman/inviter.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscump/checkin/show_checkin_page.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"url",text:"https://tj.youzan.com/v3/weapp/log"},{key:"page",text:"pages/goods/cart/index"}]},{row:[{key:"url",text:"https://open.youzan.com/api/oauthentry/wsc.weapp.formid/1.0.0/add?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc&weapp_type=custom&form_id=the%20formId%20is%20a%20mock%20one"},{key:"page",text:"pages/goods/cart/index"}]},{row:[{key:"url",text:"https://tj.youzan.com/v3/weapp/log"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"url",text:"https://open.youzan.com/api/oauthentry/youzan.salesman.wap.account/1.0.0/get?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"url",text:"https://open.youzan.com/api/oauthentry/kdt.trade.buyer.count/1.0.2/get?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"url",text:"https://tj.youzan.com/v3/weapp/log"},{key:"page",text:"packages/ump/sign-in/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscuser/membercenter/pointsName.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/ump/sign-in/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscuser/membercenter/groupCenterInfo.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"url",text:"https://open.youzan.com/api/oauthentry/kdt.trade.cart/1.0.0/count?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscshop/uic/acl_auth/scene_auth.json?kdt_id=42815442&app_id=wx1c03433853a74963&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"url",text:"https://open.youzan.com/api/oauthentry/kdt.trade.buyer.count/1.0.2/get?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"pages/common/webview-page/index"}]},{row:[{key:"url",text:"https://tj.youzan.com/v3/weapp/log"},{key:"page",text:"pages/common/webview-page/index"}]},{row:[{key:"url",text:"https://open.youzan.com/api/oauthentry/kdt.trade.buyer.count/1.0.2/get?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/card/all/index"}]},{row:[{key:"url",text:"https://tj.youzan.com/v3/weapp/log"},{key:"page",text:"packages/card/all/index"}]},{row:[{key:"url",text:"https://tj.youzan.com/v3/weapp/log"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscuser/scrm/api/benefitcard/isInMigrationWhitelist.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"url",text:"https://uic.youzan.com/sso/wx/updateUserInfo"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscscrm/scrm/membercard/list.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"url",text:"https://tj.youzan.com/v3/weapp/log"},{key:"page",text:"packages/user/coupon/list/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wscuser/membercenter/pointsName.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/trade/order/list/index"}]},{row:[{key:"url",text:"https://tj.youzan.com/v3/weapp/log"},{key:"page",text:"packages/trade/order/list/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wsctrade/recommend-goods.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/trade/order/list/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wsctrade/order/list.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/trade/order/list/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wsctrade/order/list.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc&page=2&type=send&page_id=1&page_size=20&page_type=single"},{key:"page",text:"packages/trade/order/list/index"}]},{row:[{key:"url",text:"https://open.youzan.com/api/oauthentry/kdt.trade.buyer.count/1.0.2/get?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc"},{key:"page",text:"packages/trade/order/list/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wsctrade/order/list.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc&page=2&type=tosend&page_id=1&page_size=20&page_type=single"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wsctrade/order/list.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc&page=1&type=send&page_id=1&page_size=20&page_type=single"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"url",text:"https://h5.youzan.com/wsctrade/order/list.json?app_id=wx1c03433853a74963&kdt_id=42815442&access_token=13503fbe96463720b120718a1808a4cc&page=2&type=send&page_id=1&page_size=20&page_type=single"},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"url",text:"https://tj.youzan.com/v3/weapp/log"},{key:"page",text:"packages/ump/presents/index"}]},{row:[{key:"url",text:"https://tj.youzan.com/v3/weapp/log"},{key:"page",text:"packages/order/address-list/index"}]}],score:0,scoreDisplayMode:"not-accurate",weight:1},{id:"color-contrast",headings:[{key:"area",text:"显示区域"},{key:"text",text:"文字"},{key:"bgColor",text:"背景颜色"},{key:"page",text:"页面"}],details:[{row:[{key:"area",text:'<view  bindtap="handleRootTap" class="page-container-index--page-container page-container-index--page-container--fixed-bottom " style="background-color: #f9f9f9"  role="" aria-label="">'},{key:"text",text:"秒杀、距结束仅剩、3"},{key:"bgColor",text:'<div style="background-color:249,249,249; width:inherit; height:20px; border: 1px solid black; text-align: center;"></div>'},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"area",text:'<view  class="user-info-index--bind__container"  role="" aria-label="">'},{key:"text",text:"登录"},{key:"bgColor",text:'<div style="background-color:255,255,255; width:inherit; height:20px; border: 1px solid black; text-align: center;"></div>'},{key:"page",text:"pages/usercenter/dashboard/index"}]}],score:0,scoreDisplayMode:"not-accurate",weight:3},{id:"ele-active-state",headings:[{key:"selector",text:"选择器"},{key:"file",text:"文件"},{key:"page",text:"页面"}],details:[],score:100,scoreDisplayMode:"numeric",weight:8},{id:"use-https",headings:[{key:"url",text:"URL"},{key:"page",text:"页面"}],details:[],score:100,scoreDisplayMode:"numeric",weight:1},{id:"deprecated-api",headings:[{key:"api",text:"组件/API"},{key:"page",text:"页面"}],details:[],score:100,scoreDisplayMode:"numeric",weight:1},{id:"image-ratio",headings:[{key:"img",text:"图片地址"},{key:"display",text:"显示宽高"},{key:"actual",text:"原图宽高"},{key:"page",text:"页面"}],details:[{row:[{key:"img",text:"https://img.yzcdn.cn/wsc/sign/arrow-right-new.png"},{key:"display",text:"4 x 8"},{key:"actual",text:"12 x 16"},{key:"page",text:"packages/ump/sign-in/index"}]},{row:[{key:"img",text:"https://img.yzcdn.cn/wsc/sign/arrow-left-new.png"},{key:"display",text:"4 x 8"},{key:"actual",text:"12 x 16"},{key:"page",text:"packages/ump/sign-in/index"}]}],score:0,scoreDisplayMode:"numeric",weight:4},{id:"dom-size",headings:[{key:"count",text:"节点总数"},{key:"depth",text:"节点深度"},{key:"maxChildren",text:"最大子节点数"},{key:"page",text:"页面"}],details:[{row:[{key:"depth",text:61},{key:"count",text:445},{key:"maxChildren",text:16},{key:"page",text:"pages/home/dashboard/index"}]},{row:[{key:"depth",text:34},{key:"count",text:258},{key:"maxChildren",text:30},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"depth",text:35},{key:"count",text:272},{key:"maxChildren",text:35},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"depth",text:46},{key:"count",text:243},{key:"maxChildren",text:10},{key:"page",text:"pages/goods/cart/index"}]},{row:[{key:"depth",text:40},{key:"count",text:210},{key:"maxChildren",text:6},{key:"page",text:"pages/usercenter/dashboard/index"}]},{row:[{key:"depth",text:46},{key:"count",text:260},{key:"maxChildren",text:11},{key:"page",text:"packages/trade/order/list/index"}]}],score:0,scoreDisplayMode:"numeric",weight:5},{id:"overflow-scroll",headings:[{key:"selector",text:"选择器"},{key:"file",text:"文件"},{key:"page",text:"页面"}],details:[{row:[{key:"selector",text:".tab-index--van-tab__pane"},{key:"file",text:"/vant-weapp/dist/tab/index.wxss"},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"selector",text:".tab-index--van-tab__pane"},{key:"file",text:"/vant-weapp/dist/tab/index.wxss"},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"selector",text:".tab-index--van-tab__pane"},{key:"file",text:"/vant-weapp/dist/tab/index.wxss"},{key:"page",text:"packages/trade/order/list/index"}]}],score:0,scoreDisplayMode:"numeric",weight:10},{id:"first-meaningful-time",headings:[{key:"page",text:"页面"},{key:"time",text:"首屏时间"}],details:[{row:[{key:"time",text:7821},{key:"page",text:"pages/home/dashboard/index"},{key:"_style",text:"color: red;"}]},{row:[{key:"time",text:0},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"time",text:0},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"time",text:3860},{key:"page",text:"pages/goods/cart/index"}]},{row:[{key:"time",text:8646},{key:"page",text:"pages/home/dashboard/index"},{key:"_style",text:"color: red;"}]},{row:[{key:"time",text:5540},{key:"page",text:"pages/usercenter/dashboard/index"},{key:"_style",text:"color: red;"}]},{row:[{key:"time",text:0},{key:"page",text:"packages/ump/sign-in/index"}]},{row:[{key:"time",text:1502},{key:"page",text:"packages/card/all/index"}]},{row:[{key:"time",text:1174},{key:"page",text:"packages/card/list/index"}]},{row:[{key:"time",text:3993},{key:"page",text:"packages/trade/order/list/index"}]},{row:[{key:"time",text:5354},{key:"page",text:"packages/trade/order/list/index"},{key:"_style",text:"color: red;"}]},{row:[{key:"time",text:5491},{key:"page",text:"packages/trade/order/list/index"},{key:"_style",text:"color: red;"}]}],score:0,scoreDisplayMode:"numeric",weight:5},{id:"iphonex-compatibility",headings:[{key:"component",text:"组件"},{key:"id",text:"id"},{key:"className",text:"className"},{key:"page",text:"页面"}],details:[{row:[{key:"component",text:"button"},{key:"id",text:""},{key:"className",text:"form-view-index--button "},{key:"componentId",text:180},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"component",text:"view"},{key:"id",text:""},{key:"className",text:"share-goods-index--action-sheet__cancel"},{key:"componentId",text:195},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"component",text:"view"},{key:"id",text:""},{key:"className",text:"zan-popup__mask"},{key:"componentId",text:198},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"component",text:"button"},{key:"id",text:""},{key:"className",text:"zan-btn zan-btn--warn zan-btn--large theme-vice-bg-color"},{key:"componentId",text:375},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"component",text:"button"},{key:"id",text:""},{key:"className",text:"zan-btn zan-btn--warn zan-btn--large theme-vice-bg-color"},{key:"componentId",text:384},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"component",text:"button"},{key:"id",text:""},{key:"className",text:"form-view-index--button "},{key:"componentId",text:151},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"component",text:"button"},{key:"id",text:""},{key:"className",text:"goods-popup-index--order-preference__btn"},{key:"componentId",text:144},{key:"page",text:"packages/goods/seckill/index"}]},{row:[{key:"component",text:"button"},{key:"id",text:""},{key:"className",text:"form-view-index--button "},{key:"componentId",text:168},{key:"page",text:"packages/goods/detail/index"}]},{row:[{key:"component",text:"button"},{key:"id",text:""},{key:"className",text:"form-view-index--button "},{key:"componentId",text:176},{key:"page",text:"packages/goods/detail/index"}]}],score:0,scoreDisplayMode:"numeric",weight:1}]};new a.a({el:"#main",template:document.getElementById("main_template"),components:{"report-viewer":r},data:()=>({resultInfo:i}),methods:{}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,