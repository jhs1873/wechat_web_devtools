!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=59)}([function(e,t,n){const i=new(0,n(20).EventEmitter);i.setMaxListeners(100),e.exports=i},function(e,t,n){const i=n(0),r=new WeakMap,o=new WeakMap,a=new WeakMap,s=new WeakMap,c=new WeakMap;class l{constructor(e){a.set(this,"passed"),s.set(this,e.meta.passedTitle),r.set(this,e),o.set(this,[]);const t=e.scoreDisplayMode||l.SCORING_MODES.NUMERIC,n=e.scoringCategory||l.SCORING_CATEGORY.PERFORMANCE;c.set(this,t),this.scoreDisplayMode=t,this.scoringCategory=n}static get SCORING_MODES(){return{NUMERIC:"numeric",NOT_APPLICABLE:"not-applicable",NOT_ACCURATE:"not-accurate"}}static get SCORING_CATEGORY(){return{PERFORMANCE:"performance",ACCESSIBILITY:"accessibility",BEST_PRACTICE:"best-practice"}}set status(e){a.set(this,e)}get failedItems(){return o.get(this).slice()}addItem(e){this.addFailedItem(e,null,!1)}addDescItem(e){o.get(this)[0]=e}addFailedItem(e,t,n=!0){const i=r.get(this),c=o.get(this);let l;for(t?"string"==typeof t&&(t=[t]):t=i.headings.map(e=>e.key),l=0;l<c.length;l++){let n=c[l],i=!1;for(let r=0;r<t.length;r++){let o=t[r];if("object"==typeof e[o]){if(JSON.stringify(e[o])!==JSON.stringify(n[o])){i=!0;break}}else if(e[o]!==n[o]){i=!0;break}}if(!i)break}l===c.length&&(n&&(a.set(this,"failed"),s.set(this,i.meta.failedTitle)),c.push(e))}addFailedItems(e){e.forEach(e=>{this.addFailedItem(e)})}removeFailedItem(e,t){const n=r.get(this),i=o.get(this);for(let n=0;n<i.length;n++){if(i[n][e]===t){i.splice(n,1);break}}0===i.length&&(a.set(this,"passed"),s.set(this,n.meta.passedTitle))}clearFailedItems(){const e=r.get(this);o.set(this,[]),a.set(this,"passed"),s.set(this,e.meta.passedTitle),this.scoreDisplayMode=c.get(this)}generateAuditResult(){let e={meta:r.get(this).meta,weight:r.get(this).weight,scoreDisplayMode:this.scoreDisplayMode,scoringCategory:this.scoringCategory,status:a.get(this),title:s.get(this),headings:r.get(this).headings,details:o.get(this).slice()},t=r.get(this).failedSummaryGen;return"failed"==a.get(this)&&t&&(e.failedSummary=t.call(this)),e}emitFinished(){const e=r.get(this);i.emit("audit-finished",{taskName:e.meta.id})}}e.exports=l},function(e,t,n){e.exports.$=function(e,t){return"string"==typeof t&&(t=document.querySelector(t)),(t||document).querySelector(e)},e.exports.$$=function(e){return document.querySelectorAll(e)},e.exports.show=function(e){"string"==typeof e&&(e=document.querySelector(e)),e.style.display=""},e.exports.hide=function(e){"string"==typeof e&&(e=document.querySelector(e)),e.style.display="none"},e.exports.sprintf=function(e,t){for(let n=0;n<t.length;n++)e=e.replace(/%s/,t[n]);return e},e.exports.reportBehavior=function(e){this.log("reportBehavior",e),pluginMessager.invoke("REPORT",JSON.stringify(e))},e.exports.log=function(){0},e.exports.formatSize=function(e){const t=["B","K","M","G"];let n;for(;(n=t.shift())&&e>1024;)e/=1024;return("B"===n?e:e.toFixed(2))+n},e.exports.hash=function(e){let t=5381,n=e.length;for(;n;)t=33*t^e.charCodeAt(--n);return t>>>0},e.exports.byteCount=function(e){return encodeURI(e).split(/%..|./).length-1},e.exports.unique=function(e){const t=[];for(let n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t},e.exports.getType=function(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()},e.exports.compareVersion=function(e,t){e=e.split("."),t=t.split(".");const n=Math.max(e.length,t.length);for(;e.length<n;)e.push("0");for(;t.length<n;)t.push("0");for(let i=0;i<n;i++){const n=parseInt(e[i]),r=parseInt(t[i]);if(n>r)return 1;if(n<r)return-1}return 0},e.exports.isRequestNotForAudit=function(e){const t=[/^data\:/,/^https:\/\/servicewechat.com\/wxa-qbase\/qbasecheckresult/,/^https?:\/\/[^\/]*\.tcb\.qcloud\.la\//,/^https?:\/\/wxsnsdythumb\.wxs\.qq\.com\//,/^https?:\/\/mmbiz\.qpic\.cn\//,/^https?:\/\/wx\.qlogo\.cn\//,/^https?:\/\/[^\/]*\.qq\.com\//,/^https?:\/\/[^\/]*\.gtimg\.com\//,/^https?:\/\/[^\/]*\.myapp\.com\//,/^http:\/\/127.0.0.1:/,/^chrome-extension:\/\//,/^https?:\/\/servicewechat\.com\//,/\/audits\/assert\//,/\/wxacrawler\//,/^https?:\/\/[^\/]*\.weixinbridge\.com\//];for(let n=0;n<t.length;n++)if(e.match(t[n]))return!0;return!1};const i=function(e){return e.filter(e=>!/^(__dev__|__asdebug__|__pageframe__|appservice\?)|audits\/assert\/inject|WAService.js|WAWebview.js|wxacrawler\/public/.test(e.file))};e.exports.parseStackStrings=function(e,t=!0){let n=e.split("\n"),r=/at\s+([\S]+)\s+\((\S+)\)/,o=n.map(e=>{let t=e.match(r);if(t&&t[1]&&t[2]){let e=t[2].replace(/^\s*/,"").replace(/http:\/\/127\.0\.0\.1:\d+\/(:?(:?appservice|wxacrawler\/\d+\/program\/\w+)?\/)?/,""),[n,i,r]=e.split(":");if(3==e.split(":").length)return{func:t[1].replace(/^Audit_(setTimeout|setInterval)_?.*$/,"$1"),file:n,line:+i,column:+r}}return null}).filter(e=>!!e);return t&&(o=i(o)),o},e.exports.getCallStack=function(e=!0){let n=t.parseStackStrings((new Error).stack);return e&&(n=i(n)),n},e.exports.onGenerateFuncReady=function(e){window.__generateFunc__?setTimeout(e):document.addEventListener("generateFuncReady",e)},e.exports.status="running"},function(e,t,n){const i=n(19);i.init({id:187,url:"https://badjs.weixinbridge.com/badjs",globalError:!!window.isAuditsTabEnv,extend:{version:"0.0.48"}}),i.reportCustomError=function(e){try{throw new Error(`[custom] ${e}`)}catch(e){i.report(e)}},e.exports=i},function(e,t,n){"use strict";(function(e,n){
/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
var i=Object.freeze({});function r(e){return null==e}function o(e){return null!=e}function a(e){return!0===e}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function c(e){return null!==e&&"object"==typeof e}var l=Object.prototype.toString;function u(e){return"[object Object]"===l.call(e)}function d(e){return"[object RegExp]"===l.call(e)}function f(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function p(e){return o(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function m(e){return null==e?"":Array.isArray(e)||u(e)&&e.toString===l?JSON.stringify(e,null,2):String(e)}function h(e){var t=parseFloat(e);return isNaN(t)?e:t}function v(e,t){for(var n=Object.create(null),i=e.split(","),r=0;r<i.length;r++)n[i[r]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var g=v("slot,component",!0),y=v("key,ref,slot,slot-scope,is");function b(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var w=Object.prototype.hasOwnProperty;function x(e,t){return w.call(e,t)}function _(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var C=/-(\w)/g,k=_(function(e){return e.replace(C,function(e,t){return t?t.toUpperCase():""})}),E=_(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),O=/\B([A-Z])/g,T=_(function(e){return e.replace(O,"-$1").toLowerCase()});var S=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var i=arguments.length;return i?i>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function A(e,t){t=t||0;for(var n=e.length-t,i=new Array(n);n--;)i[n]=e[n+t];return i}function I(e,t){for(var n in t)e[n]=t[n];return e}function R(e){for(var t={},n=0;n<e.length;n++)e[n]&&I(t,e[n]);return t}function $(e,t,n){}var N=function(e,t,n){return!1},F=function(e){return e};function L(e,t){if(e===t)return!0;var n=c(e),i=c(t);if(!n||!i)return!n&&!i&&String(e)===String(t);try{var r=Array.isArray(e),o=Array.isArray(t);if(r&&o)return e.length===t.length&&e.every(function(e,n){return L(e,t[n])});if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(r||o)return!1;var a=Object.keys(e),s=Object.keys(t);return a.length===s.length&&a.every(function(n){return L(e[n],t[n])})}catch(e){return!1}}function M(e,t){for(var n=0;n<e.length;n++)if(L(e[n],t))return n;return-1}function P(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var D="data-server-rendered",j=["component","directive","filter"],G=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],B={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:N,isReservedAttr:N,isUnknownElement:N,getTagNamespace:$,parsePlatformTagName:F,mustUseProp:N,async:!0,_lifecycleHooks:G},U=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function q(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function H(e,t,n,i){Object.defineProperty(e,t,{value:n,enumerable:!!i,writable:!0,configurable:!0})}var z=new RegExp("[^"+U.source+".$_\\d]");var Y,J="__proto__"in{},V="undefined"!=typeof window,W="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,K=W&&WXEnvironment.platform.toLowerCase(),X=V&&window.navigator.userAgent.toLowerCase(),Z=X&&/msie|trident/.test(X),Q=X&&X.indexOf("msie 9.0")>0,ee=X&&X.indexOf("edge/")>0,te=(X&&X.indexOf("android"),X&&/iphone|ipad|ipod|ios/.test(X)||"ios"===K),ne=(X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X),X&&X.match(/firefox\/(\d+)/)),ie={}.watch,re=!1;if(V)try{var oe={};Object.defineProperty(oe,"passive",{get:function(){re=!0}}),window.addEventListener("test-passive",null,oe)}catch(e){}var ae=function(){return void 0===Y&&(Y=!V&&!W&&void 0!==e&&(e.process&&"server"===e.process.env.VUE_ENV)),Y},se=V&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ce(e){return"function"==typeof e&&/native code/.test(e.toString())}var le,ue="undefined"!=typeof Symbol&&ce(Symbol)&&"undefined"!=typeof Reflect&&ce(Reflect.ownKeys);le="undefined"!=typeof Set&&ce(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var de=$,fe=0,pe=function(){this.id=fe++,this.subs=[]};pe.prototype.addSub=function(e){this.subs.push(e)},pe.prototype.removeSub=function(e){b(this.subs,e)},pe.prototype.depend=function(){pe.target&&pe.target.addDep(this)},pe.prototype.notify=function(){var e=this.subs.slice();for(var t=0,n=e.length;t<n;t++)e[t].update()},pe.target=null;var me=[];function he(e){me.push(e),pe.target=e}function ve(){me.pop(),pe.target=me[me.length-1]}var ge=function(e,t,n,i,r,o,a,s){this.tag=e,this.data=t,this.children=n,this.text=i,this.elm=r,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},ye={child:{configurable:!0}};ye.child.get=function(){return this.componentInstance},Object.defineProperties(ge.prototype,ye);var be=function(e){void 0===e&&(e="");var t=new ge;return t.text=e,t.isComment=!0,t};function we(e){return new ge(void 0,void 0,void 0,String(e))}function xe(e){var t=new ge(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var _e=Array.prototype,Ce=Object.create(_e);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=_e[e];H(Ce,e,function(){for(var n=[],i=arguments.length;i--;)n[i]=arguments[i];var r,o=t.apply(this,n),a=this.__ob__;switch(e){case"push":case"unshift":r=n;break;case"splice":r=n.slice(2)}return r&&a.observeArray(r),a.dep.notify(),o})});var ke=Object.getOwnPropertyNames(Ce),Ee=!0;function Oe(e){Ee=e}var Te=function(e){this.value=e,this.dep=new pe,this.vmCount=0,H(e,"__ob__",this),Array.isArray(e)?(J?function(e,t){e.__proto__=t}(e,Ce):function(e,t,n){for(var i=0,r=n.length;i<r;i++){var o=n[i];H(e,o,t[o])}}(e,Ce,ke),this.observeArray(e)):this.walk(e)};function Se(e,t){var n;if(c(e)&&!(e instanceof ge))return x(e,"__ob__")&&e.__ob__ instanceof Te?n=e.__ob__:Ee&&!ae()&&(Array.isArray(e)||u(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Te(e)),t&&n&&n.vmCount++,n}function Ae(e,t,n,i,r){var o=new pe,a=Object.getOwnPropertyDescriptor(e,t);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=e[t]);var l=!r&&Se(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):n;return pe.target&&(o.depend(),l&&(l.dep.depend(),Array.isArray(t)&&function e(t){for(var n=void 0,i=0,r=t.length;i<r;i++)(n=t[i])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&e(n)}(t))),t},set:function(t){var i=s?s.call(e):n;t===i||t!=t&&i!=i||s&&!c||(c?c.call(e,t):n=t,l=!r&&Se(t),o.notify())}})}}function Ie(e,t,n){if(Array.isArray(e)&&f(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var i=e.__ob__;return e._isVue||i&&i.vmCount?n:i?(Ae(i.value,t,n),i.dep.notify(),n):(e[t]=n,n)}function Re(e,t){if(Array.isArray(e)&&f(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount||x(e,t)&&(delete e[t],n&&n.dep.notify())}}Te.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Ae(e,t[n])},Te.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Se(e[t])};var $e=B.optionMergeStrategies;function Ne(e,t){if(!t)return e;for(var n,i,r,o=ue?Reflect.ownKeys(t):Object.keys(t),a=0;a<o.length;a++)"__ob__"!==(n=o[a])&&(i=e[n],r=t[n],x(e,n)?i!==r&&u(i)&&u(r)&&Ne(i,r):Ie(e,n,r));return e}function Fe(e,t,n){return n?function(){var i="function"==typeof t?t.call(n,n):t,r="function"==typeof e?e.call(n,n):e;return i?Ne(i,r):r}:t?e?function(){return Ne("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function Le(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function Me(e,t,n,i){var r=Object.create(e||null);return t?I(r,t):r}$e.data=function(e,t,n){return n?Fe(e,t,n):t&&"function"!=typeof t?e:Fe(e,t)},G.forEach(function(e){$e[e]=Le}),j.forEach(function(e){$e[e+"s"]=Me}),$e.watch=function(e,t,n,i){if(e===ie&&(e=void 0),t===ie&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var r={};for(var o in I(r,e),t){var a=r[o],s=t[o];a&&!Array.isArray(a)&&(a=[a]),r[o]=a?a.concat(s):Array.isArray(s)?s:[s]}return r},$e.props=$e.methods=$e.inject=$e.computed=function(e,t,n,i){if(!e)return t;var r=Object.create(null);return I(r,e),t&&I(r,t),r},$e.provide=Fe;var Pe=function(e,t){return void 0===t?e:t};function De(e,t,n){if("function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var i,r,o={};if(Array.isArray(n))for(i=n.length;i--;)"string"==typeof(r=n[i])&&(o[k(r)]={type:null});else if(u(n))for(var a in n)r=n[a],o[k(a)]=u(r)?r:{type:r};e.props=o}}(t),function(e,t){var n=e.inject;if(n){var i=e.inject={};if(Array.isArray(n))for(var r=0;r<n.length;r++)i[n[r]]={from:n[r]};else if(u(n))for(var o in n){var a=n[o];i[o]=u(a)?I({from:o},a):{from:a}}}}(t),function(e){var t=e.directives;if(t)for(var n in t){var i=t[n];"function"==typeof i&&(t[n]={bind:i,update:i})}}(t),!t._base&&(t.extends&&(e=De(e,t.extends,n)),t.mixins))for(var i=0,r=t.mixins.length;i<r;i++)e=De(e,t.mixins[i],n);var o,a={};for(o in e)s(o);for(o in t)x(e,o)||s(o);function s(i){var r=$e[i]||Pe;a[i]=r(e[i],t[i],n,i)}return a}function je(e,t,n,i){if("string"==typeof n){var r=e[t];if(x(r,n))return r[n];var o=k(n);if(x(r,o))return r[o];var a=E(o);return x(r,a)?r[a]:r[n]||r[o]||r[a]}}function Ge(e,t,n,i){var r=t[e],o=!x(n,e),a=n[e],s=qe(Boolean,r.type);if(s>-1)if(o&&!x(r,"default"))a=!1;else if(""===a||a===T(e)){var c=qe(String,r.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=function(e,t,n){if(!x(t,"default"))return;var i=t.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return"function"==typeof i&&"Function"!==Be(t.type)?i.call(e):i}(i,r,e);var l=Ee;Oe(!0),Se(a),Oe(l)}return a}function Be(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function Ue(e,t){return Be(e)===Be(t)}function qe(e,t){if(!Array.isArray(t))return Ue(t,e)?0:-1;for(var n=0,i=t.length;n<i;n++)if(Ue(t[n],e))return n;return-1}function He(e,t,n){he();try{if(t)for(var i=t;i=i.$parent;){var r=i.$options.errorCaptured;if(r)for(var o=0;o<r.length;o++)try{if(!1===r[o].call(i,e,t,n))return}catch(e){Ye(e,i,"errorCaptured hook")}}Ye(e,t,n)}finally{ve()}}function ze(e,t,n,i,r){var o;try{(o=n?e.apply(t,n):e.call(t))&&!o._isVue&&p(o)&&!o._handled&&(o.catch(function(e){return He(e,i,r+" (Promise/async)")}),o._handled=!0)}catch(e){He(e,i,r)}return o}function Ye(e,t,n){if(B.errorHandler)try{return B.errorHandler.call(null,e,t,n)}catch(t){t!==e&&Je(t,null,"config.errorHandler")}Je(e,t,n)}function Je(e,t,n){if(!V&&!W||"undefined"==typeof console)throw e;console.error(e)}var Ve,We=!1,Ke=[],Xe=!1;function Ze(){Xe=!1;var e=Ke.slice(0);Ke.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&ce(Promise)){var Qe=Promise.resolve();Ve=function(){Qe.then(Ze),te&&setTimeout($)},We=!0}else if(Z||"undefined"==typeof MutationObserver||!ce(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Ve=void 0!==n&&ce(n)?function(){n(Ze)}:function(){setTimeout(Ze,0)};else{var et=1,tt=new MutationObserver(Ze),nt=document.createTextNode(String(et));tt.observe(nt,{characterData:!0}),Ve=function(){et=(et+1)%2,nt.data=String(et)},We=!0}function it(e,t){var n;if(Ke.push(function(){if(e)try{e.call(t)}catch(e){He(e,t,"nextTick")}else n&&n(t)}),Xe||(Xe=!0,Ve()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){n=e})}var rt=new le;function ot(e){!function e(t,n){var i,r;var o=Array.isArray(t);if(!o&&!c(t)||Object.isFrozen(t)||t instanceof ge)return;if(t.__ob__){var a=t.__ob__.dep.id;if(n.has(a))return;n.add(a)}if(o)for(i=t.length;i--;)e(t[i],n);else for(r=Object.keys(t),i=r.length;i--;)e(t[r[i]],n)}(e,rt),rt.clear()}var at=_(function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),i="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=i?e.slice(1):e,once:n,capture:i,passive:t}});function st(e,t){function n(){var e=arguments,i=n.fns;if(!Array.isArray(i))return ze(i,null,arguments,t,"v-on handler");for(var r=i.slice(),o=0;o<r.length;o++)ze(r[o],null,e,t,"v-on handler")}return n.fns=e,n}function ct(e,t,n,i,o,s){var c,l,u,d;for(c in e)l=e[c],u=t[c],d=at(c),r(l)||(r(u)?(r(l.fns)&&(l=e[c]=st(l,s)),a(d.once)&&(l=e[c]=o(d.name,l,d.capture)),n(d.name,l,d.capture,d.passive,d.params)):l!==u&&(u.fns=l,e[c]=u));for(c in t)r(e[c])&&i((d=at(c)).name,t[c],d.capture)}function lt(e,t,n){var i;e instanceof ge&&(e=e.data.hook||(e.data.hook={}));var s=e[t];function c(){n.apply(this,arguments),b(i.fns,c)}r(s)?i=st([c]):o(s.fns)&&a(s.merged)?(i=s).fns.push(c):i=st([s,c]),i.merged=!0,e[t]=i}function ut(e,t,n,i,r){if(o(t)){if(x(t,n))return e[n]=t[n],r||delete t[n],!0;if(x(t,i))return e[n]=t[i],r||delete t[i],!0}return!1}function dt(e){return s(e)?[we(e)]:Array.isArray(e)?function e(t,n){var i=[];var c,l,u,d;for(c=0;c<t.length;c++)r(l=t[c])||"boolean"==typeof l||(u=i.length-1,d=i[u],Array.isArray(l)?l.length>0&&(ft((l=e(l,(n||"")+"_"+c))[0])&&ft(d)&&(i[u]=we(d.text+l[0].text),l.shift()),i.push.apply(i,l)):s(l)?ft(d)?i[u]=we(d.text+l):""!==l&&i.push(we(l)):ft(l)&&ft(d)?i[u]=we(d.text+l.text):(a(t._isVList)&&o(l.tag)&&r(l.key)&&o(n)&&(l.key="__vlist"+n+"_"+c+"__"),i.push(l)));return i}(e):void 0}function ft(e){return o(e)&&o(e.text)&&!1===e.isComment}function pt(e,t){if(e){for(var n=Object.create(null),i=ue?Reflect.ownKeys(e):Object.keys(e),r=0;r<i.length;r++){var o=i[r];if("__ob__"!==o){for(var a=e[o].from,s=t;s;){if(s._provided&&x(s._provided,a)){n[o]=s._provided[a];break}s=s.$parent}if(!s)if("default"in e[o]){var c=e[o].default;n[o]="function"==typeof c?c.call(t):c}else 0}}return n}}function mt(e,t){if(!e||!e.length)return{};for(var n={},i=0,r=e.length;i<r;i++){var o=e[i],a=o.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,o.context!==t&&o.fnContext!==t||!a||null==a.slot)(n.default||(n.default=[])).push(o);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===o.tag?c.push.apply(c,o.children||[]):c.push(o)}}for(var l in n)n[l].every(ht)&&delete n[l];return n}function ht(e){return e.isComment&&!e.asyncFactory||" "===e.text}function vt(e,t,n){var r,o=Object.keys(t).length>0,a=e?!!e.$stable:!o,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(a&&n&&n!==i&&s===n.$key&&!o&&!n.$hasNormal)return n;for(var c in r={},e)e[c]&&"$"!==c[0]&&(r[c]=gt(t,c,e[c]))}else r={};for(var l in t)l in r||(r[l]=yt(t,l));return e&&Object.isExtensible(e)&&(e._normalized=r),H(r,"$stable",a),H(r,"$key",s),H(r,"$hasNormal",o),r}function gt(e,t,n){var i=function(){var e=arguments.length?n.apply(null,arguments):n({});return(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:dt(e))&&(0===e.length||1===e.length&&e[0].isComment)?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:i,enumerable:!0,configurable:!0}),i}function yt(e,t){return function(){return e[t]}}function bt(e,t){var n,i,r,a,s;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),i=0,r=e.length;i<r;i++)n[i]=t(e[i],i);else if("number"==typeof e)for(n=new Array(e),i=0;i<e;i++)n[i]=t(i+1,i);else if(c(e))if(ue&&e[Symbol.iterator]){n=[];for(var l=e[Symbol.iterator](),u=l.next();!u.done;)n.push(t(u.value,n.length)),u=l.next()}else for(a=Object.keys(e),n=new Array(a.length),i=0,r=a.length;i<r;i++)s=a[i],n[i]=t(e[s],s,i);return o(n)||(n=[]),n._isVList=!0,n}function wt(e,t,n,i){var r,o=this.$scopedSlots[e];o?(n=n||{},i&&(n=I(I({},i),n)),r=o(n)||t):r=this.$slots[e]||t;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},r):r}function xt(e){return je(this.$options,"filters",e)||F}function _t(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function Ct(e,t,n,i,r){var o=B.keyCodes[t]||n;return r&&i&&!B.keyCodes[t]?_t(r,i):o?_t(o,e):i?T(i)!==t:void 0}function kt(e,t,n,i,r){if(n)if(c(n)){var o;Array.isArray(n)&&(n=R(n));var a=function(a){if("class"===a||"style"===a||y(a))o=e;else{var s=e.attrs&&e.attrs.type;o=i||B.mustUseProp(t,s,a)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var c=k(a),l=T(a);c in o||l in o||(o[a]=n[a],r&&((e.on||(e.on={}))["update:"+a]=function(e){n[a]=e}))};for(var s in n)a(s)}else;return e}function Et(e,t){var n=this._staticTrees||(this._staticTrees=[]),i=n[e];return i&&!t?i:(Tt(i=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),i)}function Ot(e,t,n){return Tt(e,"__once__"+t+(n?"_"+n:""),!0),e}function Tt(e,t,n){if(Array.isArray(e))for(var i=0;i<e.length;i++)e[i]&&"string"!=typeof e[i]&&St(e[i],t+"_"+i,n);else St(e,t,n)}function St(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function At(e,t){if(t)if(u(t)){var n=e.on=e.on?I({},e.on):{};for(var i in t){var r=n[i],o=t[i];n[i]=r?[].concat(r,o):o}}else;return e}function It(e,t,n,i){t=t||{$stable:!n};for(var r=0;r<e.length;r++){var o=e[r];Array.isArray(o)?It(o,t,n):o&&(o.proxy&&(o.fn.proxy=!0),t[o.key]=o.fn)}return i&&(t.$key=i),t}function Rt(e,t){for(var n=0;n<t.length;n+=2){var i=t[n];"string"==typeof i&&i&&(e[t[n]]=t[n+1])}return e}function $t(e,t){return"string"==typeof e?t+e:e}function Nt(e){e._o=Ot,e._n=h,e._s=m,e._l=bt,e._t=wt,e._q=L,e._i=M,e._m=Et,e._f=xt,e._k=Ct,e._b=kt,e._v=we,e._e=be,e._u=It,e._g=At,e._d=Rt,e._p=$t}function Ft(e,t,n,r,o){var s,c=this,l=o.options;x(r,"_uid")?(s=Object.create(r))._original=r:(s=r,r=r._original);var u=a(l._compiled),d=!u;this.data=e,this.props=t,this.children=n,this.parent=r,this.listeners=e.on||i,this.injections=pt(l.inject,r),this.slots=function(){return c.$slots||vt(e.scopedSlots,c.$slots=mt(n,r)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return vt(e.scopedSlots,this.slots())}}),u&&(this.$options=l,this.$slots=this.slots(),this.$scopedSlots=vt(e.scopedSlots,this.$slots)),l._scopeId?this._c=function(e,t,n,i){var o=qt(s,e,t,n,i,d);return o&&!Array.isArray(o)&&(o.fnScopeId=l._scopeId,o.fnContext=r),o}:this._c=function(e,t,n,i){return qt(s,e,t,n,i,d)}}function Lt(e,t,n,i,r){var o=xe(e);return o.fnContext=n,o.fnOptions=i,t.slot&&((o.data||(o.data={})).slot=t.slot),o}function Mt(e,t){for(var n in t)e[k(n)]=t[n]}Nt(Ft.prototype);var Pt={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;Pt.prepatch(n,n)}else{(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},i=e.data.inlineTemplate;o(i)&&(n.render=i.render,n.staticRenderFns=i.staticRenderFns);return new e.componentOptions.Ctor(n)}(e,Qt)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,r,o){0;var a=r.data.scopedSlots,s=e.$scopedSlots,c=!!(a&&!a.$stable||s!==i&&!s.$stable||a&&e.$scopedSlots.$key!==a.$key),l=!!(o||e.$options._renderChildren||c);e.$options._parentVnode=r,e.$vnode=r,e._vnode&&(e._vnode.parent=r);if(e.$options._renderChildren=o,e.$attrs=r.data.attrs||i,e.$listeners=n||i,t&&e.$options.props){Oe(!1);for(var u=e._props,d=e.$options._propKeys||[],f=0;f<d.length;f++){var p=d[f],m=e.$options.props;u[p]=Ge(p,m,t,e)}Oe(!0),e.$options.propsData=t}n=n||i;var h=e.$options._parentListeners;e.$options._parentListeners=n,Zt(e,n,h),l&&(e.$slots=mt(o,r.context),e.$forceUpdate());0}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,i=e.componentInstance;i._isMounted||(i._isMounted=!0,rn(i,"mounted")),e.data.keepAlive&&(n._isMounted?((t=i)._inactive=!1,an.push(t)):nn(i,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,n){if(n&&(t._directInactive=!0,tn(t)))return;if(!t._inactive){t._inactive=!0;for(var i=0;i<t.$children.length;i++)e(t.$children[i]);rn(t,"deactivated")}}(t,!0):t.$destroy())}},Dt=Object.keys(Pt);function jt(e,t,n,s,l){if(!r(e)){var u=n.$options._base;if(c(e)&&(e=u.extend(e)),"function"==typeof e){var d;if(r(e.cid)&&void 0===(e=function(e,t){if(a(e.error)&&o(e.errorComp))return e.errorComp;if(o(e.resolved))return e.resolved;var n=zt;n&&o(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n);if(a(e.loading)&&o(e.loadingComp))return e.loadingComp;if(n&&!o(e.owners)){var i=e.owners=[n],s=!0,l=null,u=null;n.$on("hook:destroyed",function(){return b(i,n)});var d=function(e){for(var t=0,n=i.length;t<n;t++)i[t].$forceUpdate();e&&(i.length=0,null!==l&&(clearTimeout(l),l=null),null!==u&&(clearTimeout(u),u=null))},f=P(function(n){e.resolved=Yt(n,t),s?i.length=0:d(!0)}),m=P(function(t){o(e.errorComp)&&(e.error=!0,d(!0))}),h=e(f,m);return c(h)&&(p(h)?r(e.resolved)&&h.then(f,m):p(h.component)&&(h.component.then(f,m),o(h.error)&&(e.errorComp=Yt(h.error,t)),o(h.loading)&&(e.loadingComp=Yt(h.loading,t),0===h.delay?e.loading=!0:l=setTimeout(function(){l=null,r(e.resolved)&&r(e.error)&&(e.loading=!0,d(!1))},h.delay||200)),o(h.timeout)&&(u=setTimeout(function(){u=null,r(e.resolved)&&m(null)},h.timeout)))),s=!1,e.loading?e.loadingComp:e.resolved}}(d=e,u)))return function(e,t,n,i,r){var o=be();return o.asyncFactory=e,o.asyncMeta={data:t,context:n,children:i,tag:r},o}(d,t,n,s,l);t=t||{},On(e),o(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",i=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var r=t.on||(t.on={}),a=r[i],s=t.model.callback;o(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(r[i]=[s].concat(a)):r[i]=s}(e.options,t);var f=function(e,t,n){var i=t.options.props;if(!r(i)){var a={},s=e.attrs,c=e.props;if(o(s)||o(c))for(var l in i){var u=T(l);ut(a,c,l,u,!0)||ut(a,s,l,u,!1)}return a}}(t,e);if(a(e.options.functional))return function(e,t,n,r,a){var s=e.options,c={},l=s.props;if(o(l))for(var u in l)c[u]=Ge(u,l,t||i);else o(n.attrs)&&Mt(c,n.attrs),o(n.props)&&Mt(c,n.props);var d=new Ft(n,c,a,r,e),f=s.render.call(null,d._c,d);if(f instanceof ge)return Lt(f,n,d.parent,s);if(Array.isArray(f)){for(var p=dt(f)||[],m=new Array(p.length),h=0;h<p.length;h++)m[h]=Lt(p[h],n,d.parent,s);return m}}(e,f,t,n,s);var m=t.on;if(t.on=t.nativeOn,a(e.options.abstract)){var h=t.slot;t={},h&&(t.slot=h)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<Dt.length;n++){var i=Dt[n],r=t[i],o=Pt[i];r===o||r&&r._merged||(t[i]=r?Gt(o,r):o)}}(t);var v=e.options.name||l;return new ge("vue-component-"+e.cid+(v?"-"+v:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:f,listeners:m,tag:l,children:s},d)}}}function Gt(e,t){var n=function(n,i){e(n,i),t(n,i)};return n._merged=!0,n}var Bt=1,Ut=2;function qt(e,t,n,i,l,u){return(Array.isArray(n)||s(n))&&(l=i,i=n,n=void 0),a(u)&&(l=Ut),function(e,t,n,i,s){if(o(n)&&o(n.__ob__))return be();o(n)&&o(n.is)&&(t=n.is);if(!t)return be();0;Array.isArray(i)&&"function"==typeof i[0]&&((n=n||{}).scopedSlots={default:i[0]},i.length=0);s===Ut?i=dt(i):s===Bt&&(i=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(i));var l,u;if("string"==typeof t){var d;u=e.$vnode&&e.$vnode.ns||B.getTagNamespace(t),l=B.isReservedTag(t)?new ge(B.parsePlatformTagName(t),n,i,void 0,void 0,e):n&&n.pre||!o(d=je(e.$options,"components",t))?new ge(t,n,i,void 0,void 0,e):jt(d,n,e,i,t)}else l=jt(t,n,e,i);return Array.isArray(l)?l:o(l)?(o(u)&&function e(t,n,i){t.ns=n;"foreignObject"===t.tag&&(n=void 0,i=!0);if(o(t.children))for(var s=0,c=t.children.length;s<c;s++){var l=t.children[s];o(l.tag)&&(r(l.ns)||a(i)&&"svg"!==l.tag)&&e(l,n,i)}}(l,u),o(n)&&function(e){c(e.style)&&ot(e.style);c(e.class)&&ot(e.class)}(n),l):be()}(e,t,n,i,l)}var Ht,zt=null;function Yt(e,t){return(e.__esModule||ue&&"Module"===e[Symbol.toStringTag])&&(e=e.default),c(e)?t.extend(e):e}function Jt(e){return e.isComment&&e.asyncFactory}function Vt(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(o(n)&&(o(n.componentOptions)||Jt(n)))return n}}function Wt(e,t){Ht.$on(e,t)}function Kt(e,t){Ht.$off(e,t)}function Xt(e,t){var n=Ht;return function i(){var r=t.apply(null,arguments);null!==r&&n.$off(e,i)}}function Zt(e,t,n){Ht=e,ct(t,n||{},Wt,Kt,Xt,e),Ht=void 0}var Qt=null;function en(e){var t=Qt;return Qt=e,function(){Qt=t}}function tn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function nn(e,t){if(t){if(e._directInactive=!1,tn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)nn(e.$children[n]);rn(e,"activated")}}function rn(e,t){he();var n=e.$options[t],i=t+" hook";if(n)for(var r=0,o=n.length;r<o;r++)ze(n[r],e,null,e,i);e._hasHookEvent&&e.$emit("hook:"+t),ve()}var on=[],an=[],sn={},cn=!1,ln=!1,un=0;var dn=0,fn=Date.now;if(V&&!Z){var pn=window.performance;pn&&"function"==typeof pn.now&&fn()>document.createEvent("Event").timeStamp&&(fn=function(){return pn.now()})}function mn(){var e,t;for(dn=fn(),ln=!0,on.sort(function(e,t){return e.id-t.id}),un=0;un<on.length;un++)(e=on[un]).before&&e.before(),t=e.id,sn[t]=null,e.run();var n=an.slice(),i=on.slice();un=on.length=an.length=0,sn={},cn=ln=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,nn(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],i=n.vm;i._watcher===n&&i._isMounted&&!i._isDestroyed&&rn(i,"updated")}}(i),se&&B.devtools&&se.emit("flush")}var hn=0,vn=function(e,t,n,i,r){this.vm=e,r&&(e._watcher=this),e._watchers.push(this),i?(this.deep=!!i.deep,this.user=!!i.user,this.lazy=!!i.lazy,this.sync=!!i.sync,this.before=i.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++hn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new le,this.newDepIds=new le,this.expression="","function"==typeof t?this.getter=t:(this.getter=function(e){if(!z.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=$)),this.value=this.lazy?void 0:this.get()};vn.prototype.get=function(){var e;he(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;He(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ot(e),ve(),this.cleanupDeps()}return e},vn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},vn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},vn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==sn[t]){if(sn[t]=!0,ln){for(var n=on.length-1;n>un&&on[n].id>e.id;)n--;on.splice(n+1,0,e)}else on.push(e);cn||(cn=!0,it(mn))}}(this)},vn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||c(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){He(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},vn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},vn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},vn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||b(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var gn={enumerable:!0,configurable:!0,get:$,set:$};function yn(e,t,n){gn.get=function(){return this[t][n]},gn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,gn)}function bn(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},i=e._props={},r=e.$options._propKeys=[];e.$parent&&Oe(!1);var o=function(o){r.push(o);var a=Ge(o,t,n,e);Ae(i,o,a),o in e||yn(e,"_props",o)};for(var a in t)o(a);Oe(!0)}(e,t.props),t.methods&&function(e,t){e.$options.props;for(var n in t)e[n]="function"!=typeof t[n]?$:S(t[n],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;u(t=e._data="function"==typeof t?function(e,t){he();try{return e.call(t,t)}catch(e){return He(e,t,"data()"),{}}finally{ve()}}(t,e):t||{})||(t={});var n=Object.keys(t),i=e.$options.props,r=(e.$options.methods,n.length);for(;r--;){var o=n[r];0,i&&x(i,o)||q(o)||yn(e,"_data",o)}Se(t,!0)}(e):Se(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),i=ae();for(var r in t){var o=t[r],a="function"==typeof o?o:o.get;0,i||(n[r]=new vn(e,a||$,$,wn)),r in e||xn(e,r,o)}}(e,t.computed),t.watch&&t.watch!==ie&&function(e,t){for(var n in t){var i=t[n];if(Array.isArray(i))for(var r=0;r<i.length;r++)kn(e,n,i[r]);else kn(e,n,i)}}(e,t.watch)}var wn={lazy:!0};function xn(e,t,n){var i=!ae();"function"==typeof n?(gn.get=i?_n(t):Cn(n),gn.set=$):(gn.get=n.get?i&&!1!==n.cache?_n(t):Cn(n.get):$,gn.set=n.set||$),Object.defineProperty(e,t,gn)}function _n(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),pe.target&&t.depend(),t.value}}function Cn(e){return function(){return e.call(this,this)}}function kn(e,t,n,i){return u(n)&&(i=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,i)}var En=0;function On(e){var t=e.options;if(e.super){var n=On(e.super);if(n!==e.superOptions){e.superOptions=n;var i=function(e){var t,n=e.options,i=e.sealedOptions;for(var r in n)n[r]!==i[r]&&(t||(t={}),t[r]=n[r]);return t}(e);i&&I(e.extendOptions,i),(t=e.options=De(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function Tn(e){this._init(e)}function Sn(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,i=n.cid,r=e._Ctor||(e._Ctor={});if(r[i])return r[i];var o=e.name||n.options.name;var a=function(e){this._init(e)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=t++,a.options=De(n.options,e),a.super=n,a.options.props&&function(e){var t=e.options.props;for(var n in t)yn(e.prototype,"_props",n)}(a),a.options.computed&&function(e){var t=e.options.computed;for(var n in t)xn(e.prototype,n,t[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,j.forEach(function(e){a[e]=n[e]}),o&&(a.options.components[o]=a),a.superOptions=n.options,a.extendOptions=e,a.sealedOptions=I({},a.options),r[i]=a,a}}function An(e){return e&&(e.Ctor.options.name||e.tag)}function In(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!d(e)&&e.test(t)}function Rn(e,t){var n=e.cache,i=e.keys,r=e._vnode;for(var o in n){var a=n[o];if(a){var s=An(a.componentOptions);s&&!t(s)&&$n(n,o,i,r)}}}function $n(e,t,n,i){var r=e[t];!r||i&&r.tag===i.tag||r.componentInstance.$destroy(),e[t]=null,b(n,t)}!function(e){e.prototype._init=function(e){var t=this;t._uid=En++,t._isVue=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),i=t._parentVnode;n.parent=t.parent,n._parentVnode=i;var r=i.componentOptions;n.propsData=r.propsData,n._parentListeners=r.listeners,n._renderChildren=r.children,n._componentTag=r.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(t,e):t.$options=De(On(t.constructor),e||{},t),t._renderProxy=t,t._self=t,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(t),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Zt(e,t)}(t),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,r=n&&n.context;e.$slots=mt(t._renderChildren,r),e.$scopedSlots=i,e._c=function(t,n,i,r){return qt(e,t,n,i,r,!1)},e.$createElement=function(t,n,i,r){return qt(e,t,n,i,r,!0)};var o=n&&n.data;Ae(e,"$attrs",o&&o.attrs||i,null,!0),Ae(e,"$listeners",t._parentListeners||i,null,!0)}(t),rn(t,"beforeCreate"),function(e){var t=pt(e.$options.inject,e);t&&(Oe(!1),Object.keys(t).forEach(function(n){Ae(e,n,t[n])}),Oe(!0))}(t),bn(t),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(t),rn(t,"created"),t.$options.el&&t.$mount(t.$options.el)}}(Tn),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=Ie,e.prototype.$delete=Re,e.prototype.$watch=function(e,t,n){if(u(t))return kn(this,e,t,n);(n=n||{}).user=!0;var i=new vn(this,e,t,n);if(n.immediate)try{t.call(this,i.value)}catch(e){He(e,this,'callback for immediate watcher "'+i.expression+'"')}return function(){i.teardown()}}}(Tn),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var i=this;if(Array.isArray(e))for(var r=0,o=e.length;r<o;r++)i.$on(e[r],n);else(i._events[e]||(i._events[e]=[])).push(n),t.test(e)&&(i._hasHookEvent=!0);return i},e.prototype.$once=function(e,t){var n=this;function i(){n.$off(e,i),t.apply(n,arguments)}return i.fn=t,n.$on(e,i),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var i=0,r=e.length;i<r;i++)n.$off(e[i],t);return n}var o,a=n._events[e];if(!a)return n;if(!t)return n._events[e]=null,n;for(var s=a.length;s--;)if((o=a[s])===t||o.fn===t){a.splice(s,1);break}return n},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?A(n):n;for(var i=A(arguments,1),r='event handler for "'+e+'"',o=0,a=n.length;o<a;o++)ze(n[o],t,i,t,r)}return t}}(Tn),function(e){e.prototype._update=function(e,t){var n=this,i=n.$el,r=n._vnode,o=en(n);n._vnode=e,n.$el=r?n.__patch__(r,e):n.__patch__(n.$el,e,t,!1),o(),i&&(i.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){rn(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||b(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),rn(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(Tn),function(e){Nt(e.prototype),e.prototype.$nextTick=function(e){return it(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,i=n.render,r=n._parentVnode;r&&(t.$scopedSlots=vt(r.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=r;try{zt=t,e=i.call(t._renderProxy,t.$createElement)}catch(n){He(n,t,"render"),e=t._vnode}finally{zt=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof ge||(e=be()),e.parent=r,e}}(Tn);var Nn=[String,RegExp,Array],Fn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Nn,exclude:Nn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)$n(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",function(t){Rn(e,function(e){return In(t,e)})}),this.$watch("exclude",function(t){Rn(e,function(e){return!In(t,e)})})},render:function(){var e=this.$slots.default,t=Vt(e),n=t&&t.componentOptions;if(n){var i=An(n),r=this.include,o=this.exclude;if(r&&(!i||!In(r,i))||o&&i&&In(o,i))return t;var a=this.cache,s=this.keys,c=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;a[c]?(t.componentInstance=a[c].componentInstance,b(s,c),s.push(c)):(a[c]=t,s.push(c),this.max&&s.length>parseInt(this.max)&&$n(a,s[0],s,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return B}};Object.defineProperty(e,"config",t),e.util={warn:de,extend:I,mergeOptions:De,defineReactive:Ae},e.set=Ie,e.delete=Re,e.nextTick=it,e.observable=function(e){return Se(e),e},e.options=Object.create(null),j.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,I(e.options.components,Fn),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=A(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=De(this.options,e),this}}(e),Sn(e),function(e){j.forEach(function(t){e[t]=function(e,n){return n?("component"===t&&u(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}})}(e)}(Tn),Object.defineProperty(Tn.prototype,"$isServer",{get:ae}),Object.defineProperty(Tn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Tn,"FunctionalRenderContext",{value:Ft}),Tn.version="2.6.10";var Ln=v("style,class"),Mn=v("input,textarea,option,select,progress"),Pn=function(e,t,n){return"value"===n&&Mn(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},Dn=v("contenteditable,draggable,spellcheck"),jn=v("events,caret,typing,plaintext-only"),Gn=function(e,t){return zn(t)||"false"===t?"false":"contenteditable"===e&&jn(t)?t:"true"},Bn=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Un="http://www.w3.org/1999/xlink",qn=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Hn=function(e){return qn(e)?e.slice(6,e.length):""},zn=function(e){return null==e||!1===e};function Yn(e){for(var t=e.data,n=e,i=e;o(i.componentInstance);)(i=i.componentInstance._vnode)&&i.data&&(t=Jn(i.data,t));for(;o(n=n.parent);)n&&n.data&&(t=Jn(t,n.data));return function(e,t){if(o(e)||o(t))return Vn(e,Wn(t));return""}(t.staticClass,t.class)}function Jn(e,t){return{staticClass:Vn(e.staticClass,t.staticClass),class:o(e.class)?[e.class,t.class]:t.class}}function Vn(e,t){return e?t?e+" "+t:e:t||""}function Wn(e){return Array.isArray(e)?function(e){for(var t,n="",i=0,r=e.length;i<r;i++)o(t=Wn(e[i]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):c(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var Kn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Xn=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Zn=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Qn=function(e){return Xn(e)||Zn(e)};function ei(e){return Zn(e)?"svg":"math"===e?"math":void 0}var ti=Object.create(null);var ni=v("text,number,password,search,email,tel,url");function ii(e){if("string"==typeof e){var t=document.querySelector(e);return t||document.createElement("div")}return e}var ri=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e?n:(t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(e,t){return document.createElementNS(Kn[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),oi={create:function(e,t){ai(t)},update:function(e,t){e.data.ref!==t.data.ref&&(ai(e,!0),ai(t))},destroy:function(e){ai(e,!0)}};function ai(e,t){var n=e.data.ref;if(o(n)){var i=e.context,r=e.componentInstance||e.elm,a=i.$refs;t?Array.isArray(a[n])?b(a[n],r):a[n]===r&&(a[n]=void 0):e.data.refInFor?Array.isArray(a[n])?a[n].indexOf(r)<0&&a[n].push(r):a[n]=[r]:a[n]=r}}var si=new ge("",{},[]),ci=["create","activate","update","remove","destroy"];function li(e,t){return e.key===t.key&&(e.tag===t.tag&&e.isComment===t.isComment&&o(e.data)===o(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,i=o(n=e.data)&&o(n=n.attrs)&&n.type,r=o(n=t.data)&&o(n=n.attrs)&&n.type;return i===r||ni(i)&&ni(r)}(e,t)||a(e.isAsyncPlaceholder)&&e.asyncFactory===t.asyncFactory&&r(t.asyncFactory.error))}function ui(e,t,n){var i,r,a={};for(i=t;i<=n;++i)o(r=e[i].key)&&(a[r]=i);return a}var di={create:fi,update:fi,destroy:function(e){fi(e,si)}};function fi(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,i,r,o=e===si,a=t===si,s=mi(e.data.directives,e.context),c=mi(t.data.directives,t.context),l=[],u=[];for(n in c)i=s[n],r=c[n],i?(r.oldValue=i.value,r.oldArg=i.arg,vi(r,"update",t,e),r.def&&r.def.componentUpdated&&u.push(r)):(vi(r,"bind",t,e),r.def&&r.def.inserted&&l.push(r));if(l.length){var d=function(){for(var n=0;n<l.length;n++)vi(l[n],"inserted",t,e)};o?lt(t,"insert",d):d()}u.length&&lt(t,"postpatch",function(){for(var n=0;n<u.length;n++)vi(u[n],"componentUpdated",t,e)});if(!o)for(n in s)c[n]||vi(s[n],"unbind",e,e,a)}(e,t)}var pi=Object.create(null);function mi(e,t){var n,i,r=Object.create(null);if(!e)return r;for(n=0;n<e.length;n++)(i=e[n]).modifiers||(i.modifiers=pi),r[hi(i)]=i,i.def=je(t.$options,"directives",i.name);return r}function hi(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function vi(e,t,n,i,r){var o=e.def&&e.def[t];if(o)try{o(n.elm,e,n,i,r)}catch(i){He(i,n.context,"directive "+e.name+" "+t+" hook")}}var gi=[oi,di];function yi(e,t){var n=t.componentOptions;if(!(o(n)&&!1===n.Ctor.options.inheritAttrs||r(e.data.attrs)&&r(t.data.attrs))){var i,a,s=t.elm,c=e.data.attrs||{},l=t.data.attrs||{};for(i in o(l.__ob__)&&(l=t.data.attrs=I({},l)),l)a=l[i],c[i]!==a&&bi(s,i,a);for(i in(Z||ee)&&l.value!==c.value&&bi(s,"value",l.value),c)r(l[i])&&(qn(i)?s.removeAttributeNS(Un,Hn(i)):Dn(i)||s.removeAttribute(i))}}function bi(e,t,n){e.tagName.indexOf("-")>-1?wi(e,t,n):Bn(t)?zn(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):Dn(t)?e.setAttribute(t,Gn(t,n)):qn(t)?zn(n)?e.removeAttributeNS(Un,Hn(t)):e.setAttributeNS(Un,t,n):wi(e,t,n)}function wi(e,t,n){if(zn(n))e.removeAttribute(t);else{if(Z&&!Q&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var i=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",i)};e.addEventListener("input",i),e.__ieph=!0}e.setAttribute(t,n)}}var xi={create:yi,update:yi};function _i(e,t){var n=t.elm,i=t.data,a=e.data;if(!(r(i.staticClass)&&r(i.class)&&(r(a)||r(a.staticClass)&&r(a.class)))){var s=Yn(t),c=n._transitionClasses;o(c)&&(s=Vn(s,Wn(c))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var Ci,ki,Ei,Oi,Ti,Si,Ai={create:_i,update:_i},Ii=/[\w).+\-_$\]]/;function Ri(e){var t,n,i,r,o,a=!1,s=!1,c=!1,l=!1,u=0,d=0,f=0,p=0;for(i=0;i<e.length;i++)if(n=t,t=e.charCodeAt(i),a)39===t&&92!==n&&(a=!1);else if(s)34===t&&92!==n&&(s=!1);else if(c)96===t&&92!==n&&(c=!1);else if(l)47===t&&92!==n&&(l=!1);else if(124!==t||124===e.charCodeAt(i+1)||124===e.charCodeAt(i-1)||u||d||f){switch(t){case 34:s=!0;break;case 39:a=!0;break;case 96:c=!0;break;case 40:f++;break;case 41:f--;break;case 91:d++;break;case 93:d--;break;case 123:u++;break;case 125:u--}if(47===t){for(var m=i-1,h=void 0;m>=0&&" "===(h=e.charAt(m));m--);h&&Ii.test(h)||(l=!0)}}else void 0===r?(p=i+1,r=e.slice(0,i).trim()):v();function v(){(o||(o=[])).push(e.slice(p,i).trim()),p=i+1}if(void 0===r?r=e.slice(0,i).trim():0!==p&&v(),o)for(i=0;i<o.length;i++)r=$i(r,o[i]);return r}function $i(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";var i=t.slice(0,n),r=t.slice(n+1);return'_f("'+i+'")('+e+(")"!==r?","+r:r)}function Ni(e,t){console.error("[Vue compiler]: "+e)}function Fi(e,t){return e?e.map(function(e){return e[t]}).filter(function(e){return e}):[]}function Li(e,t,n,i,r){(e.props||(e.props=[])).push(Hi({name:t,value:n,dynamic:r},i)),e.plain=!1}function Mi(e,t,n,i,r){(r?e.dynamicAttrs||(e.dynamicAttrs=[]):e.attrs||(e.attrs=[])).push(Hi({name:t,value:n,dynamic:r},i)),e.plain=!1}function Pi(e,t,n,i){e.attrsMap[t]=n,e.attrsList.push(Hi({name:t,value:n},i))}function Di(e,t,n,i,r,o,a,s){(e.directives||(e.directives=[])).push(Hi({name:t,rawName:n,value:i,arg:r,isDynamicArg:o,modifiers:a},s)),e.plain=!1}function ji(e,t,n){return n?"_p("+t+',"'+e+'")':e+t}function Gi(e,t,n,r,o,a,s,c){var l;(r=r||i).right?c?t="("+t+")==='click'?'contextmenu':("+t+")":"click"===t&&(t="contextmenu",delete r.right):r.middle&&(c?t="("+t+")==='click'?'mouseup':("+t+")":"click"===t&&(t="mouseup")),r.capture&&(delete r.capture,t=ji("!",t,c)),r.once&&(delete r.once,t=ji("~",t,c)),r.passive&&(delete r.passive,t=ji("&",t,c)),r.native?(delete r.native,l=e.nativeEvents||(e.nativeEvents={})):l=e.events||(e.events={});var u=Hi({value:n.trim(),dynamic:c},s);r!==i&&(u.modifiers=r);var d=l[t];Array.isArray(d)?o?d.unshift(u):d.push(u):l[t]=d?o?[u,d]:[d,u]:u,e.plain=!1}function Bi(e,t,n){var i=Ui(e,":"+t)||Ui(e,"v-bind:"+t);if(null!=i)return Ri(i);if(!1!==n){var r=Ui(e,t);if(null!=r)return JSON.stringify(r)}}function Ui(e,t,n){var i;if(null!=(i=e.attrsMap[t]))for(var r=e.attrsList,o=0,a=r.length;o<a;o++)if(r[o].name===t){r.splice(o,1);break}return n&&delete e.attrsMap[t],i}function qi(e,t){for(var n=e.attrsList,i=0,r=n.length;i<r;i++){var o=n[i];if(t.test(o.name))return n.splice(i,1),o}}function Hi(e,t){return t&&(null!=t.start&&(e.start=t.start),null!=t.end&&(e.end=t.end)),e}function zi(e,t,n){var i=n||{},r=i.number,o="$$v";i.trim&&(o="(typeof $$v === 'string'? $$v.trim(): $$v)"),r&&(o="_n("+o+")");var a=Yi(t,o);e.model={value:"("+t+")",expression:JSON.stringify(t),callback:"function ($$v) {"+a+"}"}}function Yi(e,t){var n=function(e){if(e=e.trim(),Ci=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<Ci-1)return(Oi=e.lastIndexOf("."))>-1?{exp:e.slice(0,Oi),key:'"'+e.slice(Oi+1)+'"'}:{exp:e,key:null};ki=e,Oi=Ti=Si=0;for(;!Vi();)Wi(Ei=Ji())?Xi(Ei):91===Ei&&Ki(Ei);return{exp:e.slice(0,Ti),key:e.slice(Ti+1,Si)}}(e);return null===n.key?e+"="+t:"$set("+n.exp+", "+n.key+", "+t+")"}function Ji(){return ki.charCodeAt(++Oi)}function Vi(){return Oi>=Ci}function Wi(e){return 34===e||39===e}function Ki(e){var t=1;for(Ti=Oi;!Vi();)if(Wi(e=Ji()))Xi(e);else if(91===e&&t++,93===e&&t--,0===t){Si=Oi;break}}function Xi(e){for(var t=e;!Vi()&&(e=Ji())!==t;);}var Zi,Qi="__r",er="__c";function tr(e,t,n){var i=Zi;return function r(){var o=t.apply(null,arguments);null!==o&&rr(e,r,n,i)}}var nr=We&&!(ne&&Number(ne[1])<=53);function ir(e,t,n,i){if(nr){var r=dn,o=t;t=o._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=r||e.timeStamp<=0||e.target.ownerDocument!==document)return o.apply(this,arguments)}}Zi.addEventListener(e,t,re?{capture:n,passive:i}:n)}function rr(e,t,n,i){(i||Zi).removeEventListener(e,t._wrapper||t,n)}function or(e,t){if(!r(e.data.on)||!r(t.data.on)){var n=t.data.on||{},i=e.data.on||{};Zi=t.elm,function(e){if(o(e[Qi])){var t=Z?"change":"input";e[t]=[].concat(e[Qi],e[t]||[]),delete e[Qi]}o(e[er])&&(e.change=[].concat(e[er],e.change||[]),delete e[er])}(n),ct(n,i,ir,rr,tr,t.context),Zi=void 0}}var ar,sr={create:or,update:or};function cr(e,t){if(!r(e.data.domProps)||!r(t.data.domProps)){var n,i,a=t.elm,s=e.data.domProps||{},c=t.data.domProps||{};for(n in o(c.__ob__)&&(c=t.data.domProps=I({},c)),s)n in c||(a[n]="");for(n in c){if(i=c[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),i===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n&&"PROGRESS"!==a.tagName){a._value=i;var l=r(i)?"":String(i);lr(a,l)&&(a.value=l)}else if("innerHTML"===n&&Zn(a.tagName)&&r(a.innerHTML)){(ar=ar||document.createElement("div")).innerHTML="<svg>"+i+"</svg>";for(var u=ar.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;u.firstChild;)a.appendChild(u.firstChild)}else if(i!==s[n])try{a[n]=i}catch(e){}}}}function lr(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,i=e._vModifiers;if(o(i)){if(i.number)return h(n)!==h(t);if(i.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var ur={create:cr,update:cr},dr=_(function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach(function(e){if(e){var i=e.split(n);i.length>1&&(t[i[0].trim()]=i[1].trim())}}),t});function fr(e){var t=pr(e.style);return e.staticStyle?I(e.staticStyle,t):t}function pr(e){return Array.isArray(e)?R(e):"string"==typeof e?dr(e):e}var mr,hr=/^--/,vr=/\s*!important$/,gr=function(e,t,n){if(hr.test(t))e.style.setProperty(t,n);else if(vr.test(n))e.style.setProperty(T(t),n.replace(vr,""),"important");else{var i=br(t);if(Array.isArray(n))for(var r=0,o=n.length;r<o;r++)e.style[i]=n[r];else e.style[i]=n}},yr=["Webkit","Moz","ms"],br=_(function(e){if(mr=mr||document.createElement("div").style,"filter"!==(e=k(e))&&e in mr)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<yr.length;n++){var i=yr[n]+t;if(i in mr)return i}});function wr(e,t){var n=t.data,i=e.data;if(!(r(n.staticStyle)&&r(n.style)&&r(i.staticStyle)&&r(i.style))){var a,s,c=t.elm,l=i.staticStyle,u=i.normalizedStyle||i.style||{},d=l||u,f=pr(t.data.style)||{};t.data.normalizedStyle=o(f.__ob__)?I({},f):f;var p=function(e,t){var n,i={};if(t)for(var r=e;r.componentInstance;)(r=r.componentInstance._vnode)&&r.data&&(n=fr(r.data))&&I(i,n);(n=fr(e.data))&&I(i,n);for(var o=e;o=o.parent;)o.data&&(n=fr(o.data))&&I(i,n);return i}(t,!0);for(s in d)r(p[s])&&gr(c,s,"");for(s in p)(a=p[s])!==d[s]&&gr(c,s,null==a?"":a)}}var xr={create:wr,update:wr},_r=/\s+/;function Cr(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(_r).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function kr(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(_r).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",i=" "+t+" ";n.indexOf(i)>=0;)n=n.replace(i," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function Er(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&I(t,Or(e.name||"v")),I(t,e),t}return"string"==typeof e?Or(e):void 0}}var Or=_(function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}}),Tr=V&&!Q,Sr="transition",Ar="animation",Ir="transition",Rr="transitionend",$r="animation",Nr="animationend";Tr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Ir="WebkitTransition",Rr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&($r="WebkitAnimation",Nr="webkitAnimationEnd"));var Fr=V?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Lr(e){Fr(function(){Fr(e)})}function Mr(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),Cr(e,t))}function Pr(e,t){e._transitionClasses&&b(e._transitionClasses,t),kr(e,t)}function Dr(e,t,n){var i=Gr(e,t),r=i.type,o=i.timeout,a=i.propCount;if(!r)return n();var s=r===Sr?Rr:Nr,c=0,l=function(){e.removeEventListener(s,u),n()},u=function(t){t.target===e&&++c>=a&&l()};setTimeout(function(){c<a&&l()},o+1),e.addEventListener(s,u)}var jr=/\b(transform|all)(,|$)/;function Gr(e,t){var n,i=window.getComputedStyle(e),r=(i[Ir+"Delay"]||"").split(", "),o=(i[Ir+"Duration"]||"").split(", "),a=Br(r,o),s=(i[$r+"Delay"]||"").split(", "),c=(i[$r+"Duration"]||"").split(", "),l=Br(s,c),u=0,d=0;return t===Sr?a>0&&(n=Sr,u=a,d=o.length):t===Ar?l>0&&(n=Ar,u=l,d=c.length):d=(n=(u=Math.max(a,l))>0?a>l?Sr:Ar:null)?n===Sr?o.length:c.length:0,{type:n,timeout:u,propCount:d,hasTransform:n===Sr&&jr.test(i[Ir+"Property"])}}function Br(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map(function(t,n){return Ur(t)+Ur(e[n])}))}function Ur(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function qr(e,t){var n=e.elm;o(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var i=Er(e.data.transition);if(!r(i)&&!o(n._enterCb)&&1===n.nodeType){for(var a=i.css,s=i.type,l=i.enterClass,u=i.enterToClass,d=i.enterActiveClass,f=i.appearClass,p=i.appearToClass,m=i.appearActiveClass,v=i.beforeEnter,g=i.enter,y=i.afterEnter,b=i.enterCancelled,w=i.beforeAppear,x=i.appear,_=i.afterAppear,C=i.appearCancelled,k=i.duration,E=Qt,O=Qt.$vnode;O&&O.parent;)E=O.context,O=O.parent;var T=!E._isMounted||!e.isRootInsert;if(!T||x||""===x){var S=T&&f?f:l,A=T&&m?m:d,I=T&&p?p:u,R=T&&w||v,$=T&&"function"==typeof x?x:g,N=T&&_||y,F=T&&C||b,L=h(c(k)?k.enter:k);0;var M=!1!==a&&!Q,D=Yr($),j=n._enterCb=P(function(){M&&(Pr(n,I),Pr(n,A)),j.cancelled?(M&&Pr(n,S),F&&F(n)):N&&N(n),n._enterCb=null});e.data.show||lt(e,"insert",function(){var t=n.parentNode,i=t&&t._pending&&t._pending[e.key];i&&i.tag===e.tag&&i.elm._leaveCb&&i.elm._leaveCb(),$&&$(n,j)}),R&&R(n),M&&(Mr(n,S),Mr(n,A),Lr(function(){Pr(n,S),j.cancelled||(Mr(n,I),D||(zr(L)?setTimeout(j,L):Dr(n,s,j)))})),e.data.show&&(t&&t(),$&&$(n,j)),M||D||j()}}}function Hr(e,t){var n=e.elm;o(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var i=Er(e.data.transition);if(r(i)||1!==n.nodeType)return t();if(!o(n._leaveCb)){var a=i.css,s=i.type,l=i.leaveClass,u=i.leaveToClass,d=i.leaveActiveClass,f=i.beforeLeave,p=i.leave,m=i.afterLeave,v=i.leaveCancelled,g=i.delayLeave,y=i.duration,b=!1!==a&&!Q,w=Yr(p),x=h(c(y)?y.leave:y);0;var _=n._leaveCb=P(function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),b&&(Pr(n,u),Pr(n,d)),_.cancelled?(b&&Pr(n,l),v&&v(n)):(t(),m&&m(n)),n._leaveCb=null});g?g(C):C()}function C(){_.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),f&&f(n),b&&(Mr(n,l),Mr(n,d),Lr(function(){Pr(n,l),_.cancelled||(Mr(n,u),w||(zr(x)?setTimeout(_,x):Dr(n,s,_)))})),p&&p(n,_),b||w||_())}}function zr(e){return"number"==typeof e&&!isNaN(e)}function Yr(e){if(r(e))return!1;var t=e.fns;return o(t)?Yr(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function Jr(e,t){!0!==t.data.show&&qr(t)}var Vr=function(e){var t,n,i={},c=e.modules,l=e.nodeOps;for(t=0;t<ci.length;++t)for(i[ci[t]]=[],n=0;n<c.length;++n)o(c[n][ci[t]])&&i[ci[t]].push(c[n][ci[t]]);function u(e){var t=l.parentNode(e);o(t)&&l.removeChild(t,e)}function d(e,t,n,r,s,c,u){if(o(e.elm)&&o(c)&&(e=c[u]=xe(e)),e.isRootInsert=!s,!function(e,t,n,r){var s=e.data;if(o(s)){var c=o(e.componentInstance)&&s.keepAlive;if(o(s=s.hook)&&o(s=s.init)&&s(e,!1),o(e.componentInstance))return f(e,t),p(n,e.elm,r),a(c)&&function(e,t,n,r){for(var a,s=e;s.componentInstance;)if(s=s.componentInstance._vnode,o(a=s.data)&&o(a=a.transition)){for(a=0;a<i.activate.length;++a)i.activate[a](si,s);t.push(s);break}p(n,e.elm,r)}(e,t,n,r),!0}}(e,t,n,r)){var d=e.data,h=e.children,v=e.tag;o(v)?(e.elm=e.ns?l.createElementNS(e.ns,v):l.createElement(v,e),y(e),m(e,h,t),o(d)&&g(e,t),p(n,e.elm,r)):a(e.isComment)?(e.elm=l.createComment(e.text),p(n,e.elm,r)):(e.elm=l.createTextNode(e.text),p(n,e.elm,r))}}function f(e,t){o(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,h(e)?(g(e,t),y(e)):(ai(e),t.push(e))}function p(e,t,n){o(e)&&(o(n)?l.parentNode(n)===e&&l.insertBefore(e,t,n):l.appendChild(e,t))}function m(e,t,n){if(Array.isArray(t))for(var i=0;i<t.length;++i)d(t[i],n,e.elm,null,!0,t,i);else s(e.text)&&l.appendChild(e.elm,l.createTextNode(String(e.text)))}function h(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return o(e.tag)}function g(e,n){for(var r=0;r<i.create.length;++r)i.create[r](si,e);o(t=e.data.hook)&&(o(t.create)&&t.create(si,e),o(t.insert)&&n.push(e))}function y(e){var t;if(o(t=e.fnScopeId))l.setStyleScope(e.elm,t);else for(var n=e;n;)o(t=n.context)&&o(t=t.$options._scopeId)&&l.setStyleScope(e.elm,t),n=n.parent;o(t=Qt)&&t!==e.context&&t!==e.fnContext&&o(t=t.$options._scopeId)&&l.setStyleScope(e.elm,t)}function b(e,t,n,i,r,o){for(;i<=r;++i)d(n[i],o,e,t,!1,n,i)}function w(e){var t,n,r=e.data;if(o(r))for(o(t=r.hook)&&o(t=t.destroy)&&t(e),t=0;t<i.destroy.length;++t)i.destroy[t](e);if(o(t=e.children))for(n=0;n<e.children.length;++n)w(e.children[n])}function x(e,t,n,i){for(;n<=i;++n){var r=t[n];o(r)&&(o(r.tag)?(_(r),w(r)):u(r.elm))}}function _(e,t){if(o(t)||o(e.data)){var n,r=i.remove.length+1;for(o(t)?t.listeners+=r:t=function(e,t){function n(){0==--n.listeners&&u(e)}return n.listeners=t,n}(e.elm,r),o(n=e.componentInstance)&&o(n=n._vnode)&&o(n.data)&&_(n,t),n=0;n<i.remove.length;++n)i.remove[n](e,t);o(n=e.data.hook)&&o(n=n.remove)?n(e,t):t()}else u(e.elm)}function C(e,t,n,i){for(var r=n;r<i;r++){var a=t[r];if(o(a)&&li(e,a))return r}}function k(e,t,n,s,c,u){if(e!==t){o(t.elm)&&o(s)&&(t=s[c]=xe(t));var f=t.elm=e.elm;if(a(e.isAsyncPlaceholder))o(t.asyncFactory.resolved)?T(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(a(t.isStatic)&&a(e.isStatic)&&t.key===e.key&&(a(t.isCloned)||a(t.isOnce)))t.componentInstance=e.componentInstance;else{var p,m=t.data;o(m)&&o(p=m.hook)&&o(p=p.prepatch)&&p(e,t);var v=e.children,g=t.children;if(o(m)&&h(t)){for(p=0;p<i.update.length;++p)i.update[p](e,t);o(p=m.hook)&&o(p=p.update)&&p(e,t)}r(t.text)?o(v)&&o(g)?v!==g&&function(e,t,n,i,a){for(var s,c,u,f=0,p=0,m=t.length-1,h=t[0],v=t[m],g=n.length-1,y=n[0],w=n[g],_=!a;f<=m&&p<=g;)r(h)?h=t[++f]:r(v)?v=t[--m]:li(h,y)?(k(h,y,i,n,p),h=t[++f],y=n[++p]):li(v,w)?(k(v,w,i,n,g),v=t[--m],w=n[--g]):li(h,w)?(k(h,w,i,n,g),_&&l.insertBefore(e,h.elm,l.nextSibling(v.elm)),h=t[++f],w=n[--g]):li(v,y)?(k(v,y,i,n,p),_&&l.insertBefore(e,v.elm,h.elm),v=t[--m],y=n[++p]):(r(s)&&(s=ui(t,f,m)),r(c=o(y.key)?s[y.key]:C(y,t,f,m))?d(y,i,e,h.elm,!1,n,p):li(u=t[c],y)?(k(u,y,i,n,p),t[c]=void 0,_&&l.insertBefore(e,u.elm,h.elm)):d(y,i,e,h.elm,!1,n,p),y=n[++p]);f>m?b(e,r(n[g+1])?null:n[g+1].elm,n,p,g,i):p>g&&x(0,t,f,m)}(f,v,g,n,u):o(g)?(o(e.text)&&l.setTextContent(f,""),b(f,null,g,0,g.length-1,n)):o(v)?x(0,v,0,v.length-1):o(e.text)&&l.setTextContent(f,""):e.text!==t.text&&l.setTextContent(f,t.text),o(m)&&o(p=m.hook)&&o(p=p.postpatch)&&p(e,t)}}}function E(e,t,n){if(a(n)&&o(e.parent))e.parent.data.pendingInsert=t;else for(var i=0;i<t.length;++i)t[i].data.hook.insert(t[i])}var O=v("attrs,class,staticClass,staticStyle,key");function T(e,t,n,i){var r,s=t.tag,c=t.data,l=t.children;if(i=i||c&&c.pre,t.elm=e,a(t.isComment)&&o(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(o(c)&&(o(r=c.hook)&&o(r=r.init)&&r(t,!0),o(r=t.componentInstance)))return f(t,n),!0;if(o(s)){if(o(l))if(e.hasChildNodes())if(o(r=c)&&o(r=r.domProps)&&o(r=r.innerHTML)){if(r!==e.innerHTML)return!1}else{for(var u=!0,d=e.firstChild,p=0;p<l.length;p++){if(!d||!T(d,l[p],n,i)){u=!1;break}d=d.nextSibling}if(!u||d)return!1}else m(t,l,n);if(o(c)){var h=!1;for(var v in c)if(!O(v)){h=!0,g(t,n);break}!h&&c.class&&ot(c.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,s){if(!r(t)){var c,u=!1,f=[];if(r(e))u=!0,d(t,f);else{var p=o(e.nodeType);if(!p&&li(e,t))k(e,t,f,null,null,s);else{if(p){if(1===e.nodeType&&e.hasAttribute(D)&&(e.removeAttribute(D),n=!0),a(n)&&T(e,t,f))return E(t,f,!0),e;c=e,e=new ge(l.tagName(c).toLowerCase(),{},[],void 0,c)}var m=e.elm,v=l.parentNode(m);if(d(t,f,m._leaveCb?null:v,l.nextSibling(m)),o(t.parent))for(var g=t.parent,y=h(t);g;){for(var b=0;b<i.destroy.length;++b)i.destroy[b](g);if(g.elm=t.elm,y){for(var _=0;_<i.create.length;++_)i.create[_](si,g);var C=g.data.hook.insert;if(C.merged)for(var O=1;O<C.fns.length;O++)C.fns[O]()}else ai(g);g=g.parent}o(v)?x(0,[e],0,0):o(e.tag)&&w(e)}}return E(t,f,u),t.elm}o(e)&&w(e)}}({nodeOps:ri,modules:[xi,Ai,sr,ur,xr,V?{create:Jr,activate:Jr,remove:function(e,t){!0!==e.data.show?Hr(e,t):t()}}:{}].concat(gi)});Q&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&no(e,"input")});var Wr={inserted:function(e,t,n,i){"select"===n.tag?(i.elm&&!i.elm._vOptions?lt(n,"postpatch",function(){Wr.componentUpdated(e,t,n)}):Kr(e,t,n.context),e._vOptions=[].map.call(e.options,Qr)):("textarea"===n.tag||ni(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",eo),e.addEventListener("compositionend",to),e.addEventListener("change",to),Q&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){Kr(e,t,n.context);var i=e._vOptions,r=e._vOptions=[].map.call(e.options,Qr);if(r.some(function(e,t){return!L(e,i[t])}))(e.multiple?t.value.some(function(e){return Zr(e,r)}):t.value!==t.oldValue&&Zr(t.value,r))&&no(e,"change")}}};function Kr(e,t,n){Xr(e,t,n),(Z||ee)&&setTimeout(function(){Xr(e,t,n)},0)}function Xr(e,t,n){var i=t.value,r=e.multiple;if(!r||Array.isArray(i)){for(var o,a,s=0,c=e.options.length;s<c;s++)if(a=e.options[s],r)o=M(i,Qr(a))>-1,a.selected!==o&&(a.selected=o);else if(L(Qr(a),i))return void(e.selectedIndex!==s&&(e.selectedIndex=s));r||(e.selectedIndex=-1)}}function Zr(e,t){return t.every(function(t){return!L(t,e)})}function Qr(e){return"_value"in e?e._value:e.value}function eo(e){e.target.composing=!0}function to(e){e.target.composing&&(e.target.composing=!1,no(e.target,"input"))}function no(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function io(e){return!e.componentInstance||e.data&&e.data.transition?e:io(e.componentInstance._vnode)}var ro={model:Wr,show:{bind:function(e,t,n){var i=t.value,r=(n=io(n)).data&&n.data.transition,o=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;i&&r?(n.data.show=!0,qr(n,function(){e.style.display=o})):e.style.display=i?o:"none"},update:function(e,t,n){var i=t.value;!i!=!t.oldValue&&((n=io(n)).data&&n.data.transition?(n.data.show=!0,i?qr(n,function(){e.style.display=e.__vOriginalDisplay}):Hr(n,function(){e.style.display="none"})):e.style.display=i?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,i,r){r||(e.style.display=e.__vOriginalDisplay)}}},oo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ao(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?ao(Vt(t.children)):e}function so(e){var t={},n=e.$options;for(var i in n.propsData)t[i]=e[i];var r=n._parentListeners;for(var o in r)t[k(o)]=r[o];return t}function co(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var lo=function(e){return e.tag||Jt(e)},uo=function(e){return"show"===e.name},fo={name:"transition",props:oo,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(lo)).length){0;var i=this.mode;0;var r=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return r;var o=ao(r);if(!o)return r;if(this._leaving)return co(e,r);var a="__transition-"+this._uid+"-";o.key=null==o.key?o.isComment?a+"comment":a+o.tag:s(o.key)?0===String(o.key).indexOf(a)?o.key:a+o.key:o.key;var c=(o.data||(o.data={})).transition=so(this),l=this._vnode,u=ao(l);if(o.data.directives&&o.data.directives.some(uo)&&(o.data.show=!0),u&&u.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(o,u)&&!Jt(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var d=u.data.transition=I({},c);if("out-in"===i)return this._leaving=!0,lt(d,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()}),co(e,r);if("in-out"===i){if(Jt(o))return l;var f,p=function(){f()};lt(c,"afterEnter",p),lt(c,"enterCancelled",p),lt(d,"delayLeave",function(e){f=e})}}return r}}},po=I({tag:String,moveClass:String},oo);function mo(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function ho(e){e.data.newPos=e.elm.getBoundingClientRect()}function vo(e){var t=e.data.pos,n=e.data.newPos,i=t.left-n.left,r=t.top-n.top;if(i||r){e.data.moved=!0;var o=e.elm.style;o.transform=o.WebkitTransform="translate("+i+"px,"+r+"px)",o.transitionDuration="0s"}}delete po.mode;var go={Transition:fo,TransitionGroup:{props:po,beforeMount:function(){var e=this,t=this._update;this._update=function(n,i){var r=en(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,r(),t.call(e,n,i)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),i=this.prevChildren=this.children,r=this.$slots.default||[],o=this.children=[],a=so(this),s=0;s<r.length;s++){var c=r[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))o.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a;else;}if(i){for(var l=[],u=[],d=0;d<i.length;d++){var f=i[d];f.data.transition=a,f.data.pos=f.elm.getBoundingClientRect(),n[f.key]?l.push(f):u.push(f)}this.kept=e(t,null,l),this.removed=u}return e(t,null,o)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(mo),e.forEach(ho),e.forEach(vo),this._reflow=document.body.offsetHeight,e.forEach(function(e){if(e.data.moved){var n=e.elm,i=n.style;Mr(n,t),i.transform=i.WebkitTransform=i.transitionDuration="",n.addEventListener(Rr,n._moveCb=function e(i){i&&i.target!==n||i&&!/transform$/.test(i.propertyName)||(n.removeEventListener(Rr,e),n._moveCb=null,Pr(n,t))})}}))},methods:{hasMove:function(e,t){if(!Tr)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach(function(e){kr(n,e)}),Cr(n,t),n.style.display="none",this.$el.appendChild(n);var i=Gr(n);return this.$el.removeChild(n),this._hasMove=i.hasTransform}}}};Tn.config.mustUseProp=Pn,Tn.config.isReservedTag=Qn,Tn.config.isReservedAttr=Ln,Tn.config.getTagNamespace=ei,Tn.config.isUnknownElement=function(e){if(!V)return!0;if(Qn(e))return!1;if(e=e.toLowerCase(),null!=ti[e])return ti[e];var t=document.createElement(e);return e.indexOf("-")>-1?ti[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:ti[e]=/HTMLUnknownElement/.test(t.toString())},I(Tn.options.directives,ro),I(Tn.options.components,go),Tn.prototype.__patch__=V?Vr:$,Tn.prototype.$mount=function(e,t){return function(e,t,n){var i;return e.$el=t,e.$options.render||(e.$options.render=be),rn(e,"beforeMount"),i=function(){e._update(e._render(),n)},new vn(e,i,$,{before:function(){e._isMounted&&!e._isDestroyed&&rn(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,rn(e,"mounted")),e}(this,e=e&&V?ii(e):void 0,t)},V&&setTimeout(function(){B.devtools&&se&&se.emit("init",Tn)},0);var yo=/\{\{((?:.|\r?\n)+?)\}\}/g,bo=/[-.*+?^${}()|[\]\/\\]/g,wo=_(function(e){var t=e[0].replace(bo,"\\$&"),n=e[1].replace(bo,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")});var xo={staticKeys:["staticClass"],transformNode:function(e,t){t.warn;var n=Ui(e,"class");n&&(e.staticClass=JSON.stringify(n));var i=Bi(e,"class",!1);i&&(e.classBinding=i)},genData:function(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}};var _o,Co={staticKeys:["staticStyle"],transformNode:function(e,t){t.warn;var n=Ui(e,"style");n&&(e.staticStyle=JSON.stringify(dr(n)));var i=Bi(e,"style",!1);i&&(e.styleBinding=i)},genData:function(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}},ko=function(e){return(_o=_o||document.createElement("div")).innerHTML=e,_o.textContent},Eo=v("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),Oo=v("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),To=v("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),So=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Ao=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Io="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+U.source+"]*",Ro="((?:"+Io+"\\:)?"+Io+")",$o=new RegExp("^<"+Ro),No=/^\s*(\/?)>/,Fo=new RegExp("^<\\/"+Ro+"[^>]*>"),Lo=/^<!DOCTYPE [^>]+>/i,Mo=/^<!\--/,Po=/^<!\[/,Do=v("script,style,textarea",!0),jo={},Go={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},Bo=/&(?:lt|gt|quot|amp|#39);/g,Uo=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,qo=v("pre,textarea",!0),Ho=function(e,t){return e&&qo(e)&&"\n"===t[0]};function zo(e,t){var n=t?Uo:Bo;return e.replace(n,function(e){return Go[e]})}var Yo,Jo,Vo,Wo,Ko,Xo,Zo,Qo,ea=/^@|^v-on:/,ta=/^v-|^@|^:/,na=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,ia=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,ra=/^\(|\)$/g,oa=/^\[.*\]$/,aa=/:(.*)$/,sa=/^:|^\.|^v-bind:/,ca=/\.[^.\]]+(?=[^\]]*$)/g,la=/^v-slot(:|$)|^#/,ua=/[\r\n]/,da=/\s+/g,fa=_(ko),pa="_empty_";function ma(e,t,n){return{type:1,tag:e,attrsList:t,attrsMap:xa(t),rawAttrsMap:{},parent:n,children:[]}}function ha(e,t){Yo=t.warn||Ni,Xo=t.isPreTag||N,Zo=t.mustUseProp||N,Qo=t.getTagNamespace||N;var n=t.isReservedTag||N;(function(e){return!!e.component||!n(e.tag)}),Vo=Fi(t.modules,"transformNode"),Wo=Fi(t.modules,"preTransformNode"),Ko=Fi(t.modules,"postTransformNode"),Jo=t.delimiters;var i,r,o=[],a=!1!==t.preserveWhitespace,s=t.whitespace,c=!1,l=!1;function u(e){if(d(e),c||e.processed||(e=va(e,t)),o.length||e===i||i.if&&(e.elseif||e.else)&&ya(i,{exp:e.elseif,block:e}),r&&!e.forbidden)if(e.elseif||e.else)a=e,(s=function(e){var t=e.length;for(;t--;){if(1===e[t].type)return e[t];e.pop()}}(r.children))&&s.if&&ya(s,{exp:a.elseif,block:a});else{if(e.slotScope){var n=e.slotTarget||'"default"';(r.scopedSlots||(r.scopedSlots={}))[n]=e}r.children.push(e),e.parent=r}var a,s;e.children=e.children.filter(function(e){return!e.slotScope}),d(e),e.pre&&(c=!1),Xo(e.tag)&&(l=!1);for(var u=0;u<Ko.length;u++)Ko[u](e,t)}function d(e){if(!l)for(var t;(t=e.children[e.children.length-1])&&3===t.type&&" "===t.text;)e.children.pop()}return function(e,t){for(var n,i,r=[],o=t.expectHTML,a=t.isUnaryTag||N,s=t.canBeLeftOpenTag||N,c=0;e;){if(n=e,i&&Do(i)){var l=0,u=i.toLowerCase(),d=jo[u]||(jo[u]=new RegExp("([\\s\\S]*?)(</"+u+"[^>]*>)","i")),f=e.replace(d,function(e,n,i){return l=i.length,Do(u)||"noscript"===u||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),Ho(u,n)&&(n=n.slice(1)),t.chars&&t.chars(n),""});c+=e.length-f.length,e=f,O(u,c-l,c)}else{var p=e.indexOf("<");if(0===p){if(Mo.test(e)){var m=e.indexOf("--\x3e");if(m>=0){t.shouldKeepComment&&t.comment(e.substring(4,m),c,c+m+3),C(m+3);continue}}if(Po.test(e)){var h=e.indexOf("]>");if(h>=0){C(h+2);continue}}var v=e.match(Lo);if(v){C(v[0].length);continue}var g=e.match(Fo);if(g){var y=c;C(g[0].length),O(g[1],y,c);continue}var b=k();if(b){E(b),Ho(b.tagName,e)&&C(1);continue}}var w=void 0,x=void 0,_=void 0;if(p>=0){for(x=e.slice(p);!(Fo.test(x)||$o.test(x)||Mo.test(x)||Po.test(x)||(_=x.indexOf("<",1))<0);)p+=_,x=e.slice(p);w=e.substring(0,p)}p<0&&(w=e),w&&C(w.length),t.chars&&w&&t.chars(w,c-w.length,c)}if(e===n){t.chars&&t.chars(e);break}}function C(t){c+=t,e=e.substring(t)}function k(){var t=e.match($o);if(t){var n,i,r={tagName:t[1],attrs:[],start:c};for(C(t[0].length);!(n=e.match(No))&&(i=e.match(Ao)||e.match(So));)i.start=c,C(i[0].length),i.end=c,r.attrs.push(i);if(n)return r.unarySlash=n[1],C(n[0].length),r.end=c,r}}function E(e){var n=e.tagName,c=e.unarySlash;o&&("p"===i&&To(n)&&O(i),s(n)&&i===n&&O(n));for(var l=a(n)||!!c,u=e.attrs.length,d=new Array(u),f=0;f<u;f++){var p=e.attrs[f],m=p[3]||p[4]||p[5]||"",h="a"===n&&"href"===p[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;d[f]={name:p[1],value:zo(m,h)}}l||(r.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:d,start:e.start,end:e.end}),i=n),t.start&&t.start(n,d,l,e.start,e.end)}function O(e,n,o){var a,s;if(null==n&&(n=c),null==o&&(o=c),e)for(s=e.toLowerCase(),a=r.length-1;a>=0&&r[a].lowerCasedTag!==s;a--);else a=0;if(a>=0){for(var l=r.length-1;l>=a;l--)t.end&&t.end(r[l].tag,n,o);r.length=a,i=a&&r[a-1].tag}else"br"===s?t.start&&t.start(e,[],!0,n,o):"p"===s&&(t.start&&t.start(e,[],!1,n,o),t.end&&t.end(e,n,o))}O()}(e,{warn:Yo,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,outputSourceRange:t.outputSourceRange,start:function(e,n,a,s,d){var f=r&&r.ns||Qo(e);Z&&"svg"===f&&(n=function(e){for(var t=[],n=0;n<e.length;n++){var i=e[n];_a.test(i.name)||(i.name=i.name.replace(Ca,""),t.push(i))}return t}(n));var p,m=ma(e,n,r);f&&(m.ns=f),"style"!==(p=m).tag&&("script"!==p.tag||p.attrsMap.type&&"text/javascript"!==p.attrsMap.type)||ae()||(m.forbidden=!0);for(var h=0;h<Wo.length;h++)m=Wo[h](m,t)||m;c||(!function(e){null!=Ui(e,"v-pre")&&(e.pre=!0)}(m),m.pre&&(c=!0)),Xo(m.tag)&&(l=!0),c?function(e){var t=e.attrsList,n=t.length;if(n)for(var i=e.attrs=new Array(n),r=0;r<n;r++)i[r]={name:t[r].name,value:JSON.stringify(t[r].value)},null!=t[r].start&&(i[r].start=t[r].start,i[r].end=t[r].end);else e.pre||(e.plain=!0)}(m):m.processed||(ga(m),function(e){var t=Ui(e,"v-if");if(t)e.if=t,ya(e,{exp:t,block:e});else{null!=Ui(e,"v-else")&&(e.else=!0);var n=Ui(e,"v-else-if");n&&(e.elseif=n)}}(m),function(e){null!=Ui(e,"v-once")&&(e.once=!0)}(m)),i||(i=m),a?u(m):(r=m,o.push(m))},end:function(e,t,n){var i=o[o.length-1];o.length-=1,r=o[o.length-1],u(i)},chars:function(e,t,n){if(r&&(!Z||"textarea"!==r.tag||r.attrsMap.placeholder!==e)){var i,o,u,d=r.children;if(e=l||e.trim()?"script"===(i=r).tag||"style"===i.tag?e:fa(e):d.length?s?"condense"===s&&ua.test(e)?"":" ":a?" ":"":"")l||"condense"!==s||(e=e.replace(da," ")),!c&&" "!==e&&(o=function(e,t){var n=t?wo(t):yo;if(n.test(e)){for(var i,r,o,a=[],s=[],c=n.lastIndex=0;i=n.exec(e);){(r=i.index)>c&&(s.push(o=e.slice(c,r)),a.push(JSON.stringify(o)));var l=Ri(i[1].trim());a.push("_s("+l+")"),s.push({"@binding":l}),c=r+i[0].length}return c<e.length&&(s.push(o=e.slice(c)),a.push(JSON.stringify(o))),{expression:a.join("+"),tokens:s}}}(e,Jo))?u={type:2,expression:o.expression,tokens:o.tokens,text:e}:" "===e&&d.length&&" "===d[d.length-1].text||(u={type:3,text:e}),u&&d.push(u)}},comment:function(e,t,n){if(r){var i={type:3,text:e,isComment:!0};0,r.children.push(i)}}}),i}function va(e,t){var n;!function(e){var t=Bi(e,"key");if(t){e.key=t}}(e),e.plain=!e.key&&!e.scopedSlots&&!e.attrsList.length,function(e){var t=Bi(e,"ref");t&&(e.ref=t,e.refInFor=function(e){var t=e;for(;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}(e))}(e),function(e){var t;"template"===e.tag?(t=Ui(e,"scope"),e.slotScope=t||Ui(e,"slot-scope")):(t=Ui(e,"slot-scope"))&&(e.slotScope=t);var n=Bi(e,"slot");n&&(e.slotTarget='""'===n?'"default"':n,e.slotTargetDynamic=!(!e.attrsMap[":slot"]&&!e.attrsMap["v-bind:slot"]),"template"===e.tag||e.slotScope||Mi(e,"slot",n,function(e,t){return e.rawAttrsMap[":"+t]||e.rawAttrsMap["v-bind:"+t]||e.rawAttrsMap[t]}(e,"slot")));if("template"===e.tag){var i=qi(e,la);if(i){0;var r=ba(i),o=r.name,a=r.dynamic;e.slotTarget=o,e.slotTargetDynamic=a,e.slotScope=i.value||pa}}else{var s=qi(e,la);if(s){0;var c=e.scopedSlots||(e.scopedSlots={}),l=ba(s),u=l.name,d=l.dynamic,f=c[u]=ma("template",[],e);f.slotTarget=u,f.slotTargetDynamic=d,f.children=e.children.filter(function(e){if(!e.slotScope)return e.parent=f,!0}),f.slotScope=s.value||pa,e.children=[],e.plain=!1}}}(e),"slot"===(n=e).tag&&(n.slotName=Bi(n,"name")),function(e){var t;(t=Bi(e,"is"))&&(e.component=t);null!=Ui(e,"inline-template")&&(e.inlineTemplate=!0)}(e);for(var i=0;i<Vo.length;i++)e=Vo[i](e,t)||e;return function(e){var t,n,i,r,o,a,s,c,l=e.attrsList;for(t=0,n=l.length;t<n;t++){if(i=r=l[t].name,o=l[t].value,ta.test(i))if(e.hasBindings=!0,(a=wa(i.replace(ta,"")))&&(i=i.replace(ca,"")),sa.test(i))i=i.replace(sa,""),o=Ri(o),(c=oa.test(i))&&(i=i.slice(1,-1)),a&&(a.prop&&!c&&"innerHtml"===(i=k(i))&&(i="innerHTML"),a.camel&&!c&&(i=k(i)),a.sync&&(s=Yi(o,"$event"),c?Gi(e,'"update:"+('+i+")",s,null,!1,0,l[t],!0):(Gi(e,"update:"+k(i),s,null,!1,0,l[t]),T(i)!==k(i)&&Gi(e,"update:"+T(i),s,null,!1,0,l[t])))),a&&a.prop||!e.component&&Zo(e.tag,e.attrsMap.type,i)?Li(e,i,o,l[t],c):Mi(e,i,o,l[t],c);else if(ea.test(i))i=i.replace(ea,""),(c=oa.test(i))&&(i=i.slice(1,-1)),Gi(e,i,o,a,!1,0,l[t],c);else{var u=(i=i.replace(ta,"")).match(aa),d=u&&u[1];c=!1,d&&(i=i.slice(0,-(d.length+1)),oa.test(d)&&(d=d.slice(1,-1),c=!0)),Di(e,i,r,o,d,c,a,l[t])}else Mi(e,i,JSON.stringify(o),l[t]),!e.component&&"muted"===i&&Zo(e.tag,e.attrsMap.type,i)&&Li(e,i,"true",l[t])}}(e),e}function ga(e){var t;if(t=Ui(e,"v-for")){var n=function(e){var t=e.match(na);if(!t)return;var n={};n.for=t[2].trim();var i=t[1].trim().replace(ra,""),r=i.match(ia);r?(n.alias=i.replace(ia,"").trim(),n.iterator1=r[1].trim(),r[2]&&(n.iterator2=r[2].trim())):n.alias=i;return n}(t);n&&I(e,n)}}function ya(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function ba(e){var t=e.name.replace(la,"");return t||"#"!==e.name[0]&&(t="default"),oa.test(t)?{name:t.slice(1,-1),dynamic:!0}:{name:'"'+t+'"',dynamic:!1}}function wa(e){var t=e.match(ca);if(t){var n={};return t.forEach(function(e){n[e.slice(1)]=!0}),n}}function xa(e){for(var t={},n=0,i=e.length;n<i;n++)t[e[n].name]=e[n].value;return t}var _a=/^xmlns:NS\d+/,Ca=/^NS\d+:/;function ka(e){return ma(e.tag,e.attrsList.slice(),e.parent)}var Ea=[xo,Co,{preTransformNode:function(e,t){if("input"===e.tag){var n,i=e.attrsMap;if(!i["v-model"])return;if((i[":type"]||i["v-bind:type"])&&(n=Bi(e,"type")),i.type||n||!i["v-bind"]||(n="("+i["v-bind"]+").type"),n){var r=Ui(e,"v-if",!0),o=r?"&&("+r+")":"",a=null!=Ui(e,"v-else",!0),s=Ui(e,"v-else-if",!0),c=ka(e);ga(c),Pi(c,"type","checkbox"),va(c,t),c.processed=!0,c.if="("+n+")==='checkbox'"+o,ya(c,{exp:c.if,block:c});var l=ka(e);Ui(l,"v-for",!0),Pi(l,"type","radio"),va(l,t),ya(c,{exp:"("+n+")==='radio'"+o,block:l});var u=ka(e);return Ui(u,"v-for",!0),Pi(u,":type",n),va(u,t),ya(c,{exp:r,block:u}),a?c.else=!0:s&&(c.elseif=s),c}}}}];var Oa,Ta,Sa={expectHTML:!0,modules:Ea,directives:{model:function(e,t,n){n;var i=t.value,r=t.modifiers,o=e.tag,a=e.attrsMap.type;if(e.component)return zi(e,i,r),!1;if("select"===o)!function(e,t,n){var i='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";i=i+" "+Yi(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),Gi(e,"change",i,null,!0)}(e,i,r);else if("input"===o&&"checkbox"===a)!function(e,t,n){var i=n&&n.number,r=Bi(e,"value")||"null",o=Bi(e,"true-value")||"true",a=Bi(e,"false-value")||"false";Li(e,"checked","Array.isArray("+t+")?_i("+t+","+r+")>-1"+("true"===o?":("+t+")":":_q("+t+","+o+")")),Gi(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+o+"):("+a+");if(Array.isArray($$a)){var $$v="+(i?"_n("+r+")":r)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+Yi(t,"$$a.concat([$$v])")+")}else{$$i>-1&&("+Yi(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+Yi(t,"$$c")+"}",null,!0)}(e,i,r);else if("input"===o&&"radio"===a)!function(e,t,n){var i=n&&n.number,r=Bi(e,"value")||"null";Li(e,"checked","_q("+t+","+(r=i?"_n("+r+")":r)+")"),Gi(e,"change",Yi(t,r),null,!0)}(e,i,r);else if("input"===o||"textarea"===o)!function(e,t,n){var i=e.attrsMap.type,r=n||{},o=r.lazy,a=r.number,s=r.trim,c=!o&&"range"!==i,l=o?"change":"range"===i?Qi:"input",u="$event.target.value";s&&(u="$event.target.value.trim()"),a&&(u="_n("+u+")");var d=Yi(t,u);c&&(d="if($event.target.composing)return;"+d),Li(e,"value","("+t+")"),Gi(e,l,d,null,!0),(s||a)&&Gi(e,"blur","$forceUpdate()")}(e,i,r);else if(!B.isReservedTag(o))return zi(e,i,r),!1;return!0},text:function(e,t){t.value&&Li(e,"textContent","_s("+t.value+")",t)},html:function(e,t){t.value&&Li(e,"innerHTML","_s("+t.value+")",t)}},isPreTag:function(e){return"pre"===e},isUnaryTag:Eo,mustUseProp:Pn,canBeLeftOpenTag:Oo,isReservedTag:Qn,getTagNamespace:ei,staticKeys:function(e){return e.reduce(function(e,t){return e.concat(t.staticKeys||[])},[]).join(",")}(Ea)},Aa=_(function(e){return v("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(e?","+e:""))});function Ia(e,t){e&&(Oa=Aa(t.staticKeys||""),Ta=t.isReservedTag||N,function e(t){t.static=function(e){if(2===e.type)return!1;if(3===e.type)return!0;return!(!e.pre&&(e.hasBindings||e.if||e.for||g(e.tag)||!Ta(e.tag)||function(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}(e)||!Object.keys(e).every(Oa)))}(t);if(1===t.type){if(!Ta(t.tag)&&"slot"!==t.tag&&null==t.attrsMap["inline-template"])return;for(var n=0,i=t.children.length;n<i;n++){var r=t.children[n];e(r),r.static||(t.static=!1)}if(t.ifConditions)for(var o=1,a=t.ifConditions.length;o<a;o++){var s=t.ifConditions[o].block;e(s),s.static||(t.static=!1)}}}(e),function e(t,n){if(1===t.type){if((t.static||t.once)&&(t.staticInFor=n),t.static&&t.children.length&&(1!==t.children.length||3!==t.children[0].type))return void(t.staticRoot=!0);if(t.staticRoot=!1,t.children)for(var i=0,r=t.children.length;i<r;i++)e(t.children[i],n||!!t.for);if(t.ifConditions)for(var o=1,a=t.ifConditions.length;o<a;o++)e(t.ifConditions[o].block,n)}}(e,!1))}var Ra=/^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/,$a=/\([^)]*?\);*$/,Na=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,Fa={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},La={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},Ma=function(e){return"if("+e+")return null;"},Pa={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:Ma("$event.target !== $event.currentTarget"),ctrl:Ma("!$event.ctrlKey"),shift:Ma("!$event.shiftKey"),alt:Ma("!$event.altKey"),meta:Ma("!$event.metaKey"),left:Ma("'button' in $event && $event.button !== 0"),middle:Ma("'button' in $event && $event.button !== 1"),right:Ma("'button' in $event && $event.button !== 2")};function Da(e,t){var n=t?"nativeOn:":"on:",i="",r="";for(var o in e){var a=ja(e[o]);e[o]&&e[o].dynamic?r+=o+","+a+",":i+='"'+o+'":'+a+","}return i="{"+i.slice(0,-1)+"}",r?n+"_d("+i+",["+r.slice(0,-1)+"])":n+i}function ja(e){if(!e)return"function(){}";if(Array.isArray(e))return"["+e.map(function(e){return ja(e)}).join(",")+"]";var t=Na.test(e.value),n=Ra.test(e.value),i=Na.test(e.value.replace($a,""));if(e.modifiers){var r="",o="",a=[];for(var s in e.modifiers)if(Pa[s])o+=Pa[s],Fa[s]&&a.push(s);else if("exact"===s){var c=e.modifiers;o+=Ma(["ctrl","shift","alt","meta"].filter(function(e){return!c[e]}).map(function(e){return"$event."+e+"Key"}).join("||"))}else a.push(s);return a.length&&(r+=function(e){return"if(!$event.type.indexOf('key')&&"+e.map(Ga).join("&&")+")return null;"}(a)),o&&(r+=o),"function($event){"+r+(t?"return "+e.value+"($event)":n?"return ("+e.value+")($event)":i?"return "+e.value:e.value)+"}"}return t||n?e.value:"function($event){"+(i?"return "+e.value:e.value)+"}"}function Ga(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=Fa[e],i=La[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(i)+")"}var Ba={on:function(e,t){e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}},bind:function(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}},cloak:$},Ua=function(e){this.options=e,this.warn=e.warn||Ni,this.transforms=Fi(e.modules,"transformCode"),this.dataGenFns=Fi(e.modules,"genData"),this.directives=I(I({},Ba),e.directives);var t=e.isReservedTag||N;this.maybeComponent=function(e){return!!e.component||!t(e.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function qa(e,t){var n=new Ua(t);return{render:"with(this){return "+(e?Ha(e,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function Ha(e,t){if(e.parent&&(e.pre=e.pre||e.parent.pre),e.staticRoot&&!e.staticProcessed)return za(e,t);if(e.once&&!e.onceProcessed)return Ya(e,t);if(e.for&&!e.forProcessed)return Va(e,t);if(e.if&&!e.ifProcessed)return Ja(e,t);if("template"!==e.tag||e.slotTarget||t.pre){if("slot"===e.tag)return function(e,t){var n=e.slotName||'"default"',i=Za(e,t),r="_t("+n+(i?","+i:""),o=e.attrs||e.dynamicAttrs?ts((e.attrs||[]).concat(e.dynamicAttrs||[]).map(function(e){return{name:k(e.name),value:e.value,dynamic:e.dynamic}})):null,a=e.attrsMap["v-bind"];!o&&!a||i||(r+=",null");o&&(r+=","+o);a&&(r+=(o?"":",null")+","+a);return r+")"}(e,t);var n;if(e.component)n=function(e,t,n){var i=t.inlineTemplate?null:Za(t,n,!0);return"_c("+e+","+Wa(t,n)+(i?","+i:"")+")"}(e.component,e,t);else{var i;(!e.plain||e.pre&&t.maybeComponent(e))&&(i=Wa(e,t));var r=e.inlineTemplate?null:Za(e,t,!0);n="_c('"+e.tag+"'"+(i?","+i:"")+(r?","+r:"")+")"}for(var o=0;o<t.transforms.length;o++)n=t.transforms[o](e,n);return n}return Za(e,t)||"void 0"}function za(e,t){e.staticProcessed=!0;var n=t.pre;return e.pre&&(t.pre=e.pre),t.staticRenderFns.push("with(this){return "+Ha(e,t)+"}"),t.pre=n,"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function Ya(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return Ja(e,t);if(e.staticInFor){for(var n="",i=e.parent;i;){if(i.for){n=i.key;break}i=i.parent}return n?"_o("+Ha(e,t)+","+t.onceId+++","+n+")":Ha(e,t)}return za(e,t)}function Ja(e,t,n,i){return e.ifProcessed=!0,function e(t,n,i,r){if(!t.length)return r||"_e()";var o=t.shift();return o.exp?"("+o.exp+")?"+a(o.block)+":"+e(t,n,i,r):""+a(o.block);function a(e){return i?i(e,n):e.once?Ya(e,n):Ha(e,n)}}(e.ifConditions.slice(),t,n,i)}function Va(e,t,n,i){var r=e.for,o=e.alias,a=e.iterator1?","+e.iterator1:"",s=e.iterator2?","+e.iterator2:"";return e.forProcessed=!0,(i||"_l")+"(("+r+"),function("+o+a+s+"){return "+(n||Ha)(e,t)+"})"}function Wa(e,t){var n="{",i=function(e,t){var n=e.directives;if(!n)return;var i,r,o,a,s="directives:[",c=!1;for(i=0,r=n.length;i<r;i++){o=n[i],a=!0;var l=t.directives[o.name];l&&(a=!!l(e,o,t.warn)),a&&(c=!0,s+='{name:"'+o.name+'",rawName:"'+o.rawName+'"'+(o.value?",value:("+o.value+"),expression:"+JSON.stringify(o.value):"")+(o.arg?",arg:"+(o.isDynamicArg?o.arg:'"'+o.arg+'"'):"")+(o.modifiers?",modifiers:"+JSON.stringify(o.modifiers):"")+"},")}if(c)return s.slice(0,-1)+"]"}(e,t);i&&(n+=i+","),e.key&&(n+="key:"+e.key+","),e.ref&&(n+="ref:"+e.ref+","),e.refInFor&&(n+="refInFor:true,"),e.pre&&(n+="pre:true,"),e.component&&(n+='tag:"'+e.tag+'",');for(var r=0;r<t.dataGenFns.length;r++)n+=t.dataGenFns[r](e);if(e.attrs&&(n+="attrs:"+ts(e.attrs)+","),e.props&&(n+="domProps:"+ts(e.props)+","),e.events&&(n+=Da(e.events,!1)+","),e.nativeEvents&&(n+=Da(e.nativeEvents,!0)+","),e.slotTarget&&!e.slotScope&&(n+="slot:"+e.slotTarget+","),e.scopedSlots&&(n+=function(e,t,n){var i=e.for||Object.keys(t).some(function(e){var n=t[e];return n.slotTargetDynamic||n.if||n.for||Ka(n)}),r=!!e.if;if(!i)for(var o=e.parent;o;){if(o.slotScope&&o.slotScope!==pa||o.for){i=!0;break}o.if&&(r=!0),o=o.parent}var a=Object.keys(t).map(function(e){return Xa(t[e],n)}).join(",");return"scopedSlots:_u(["+a+"]"+(i?",null,true":"")+(!i&&r?",null,false,"+function(e){var t=5381,n=e.length;for(;n;)t=33*t^e.charCodeAt(--n);return t>>>0}(a):"")+")"}(e,e.scopedSlots,t)+","),e.model&&(n+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var o=function(e,t){var n=e.children[0];0;if(n&&1===n.type){var i=qa(n,t.options);return"inlineTemplate:{render:function(){"+i.render+"},staticRenderFns:["+i.staticRenderFns.map(function(e){return"function(){"+e+"}"}).join(",")+"]}"}}(e,t);o&&(n+=o+",")}return n=n.replace(/,$/,"")+"}",e.dynamicAttrs&&(n="_b("+n+',"'+e.tag+'",'+ts(e.dynamicAttrs)+")"),e.wrapData&&(n=e.wrapData(n)),e.wrapListeners&&(n=e.wrapListeners(n)),n}function Ka(e){return 1===e.type&&("slot"===e.tag||e.children.some(Ka))}function Xa(e,t){var n=e.attrsMap["slot-scope"];if(e.if&&!e.ifProcessed&&!n)return Ja(e,t,Xa,"null");if(e.for&&!e.forProcessed)return Va(e,t,Xa);var i=e.slotScope===pa?"":String(e.slotScope),r="function("+i+"){return "+("template"===e.tag?e.if&&n?"("+e.if+")?"+(Za(e,t)||"undefined")+":undefined":Za(e,t)||"undefined":Ha(e,t))+"}",o=i?"":",proxy:true";return"{key:"+(e.slotTarget||'"default"')+",fn:"+r+o+"}"}function Za(e,t,n,i,r){var o=e.children;if(o.length){var a=o[0];if(1===o.length&&a.for&&"template"!==a.tag&&"slot"!==a.tag){var s=n?t.maybeComponent(a)?",1":",0":"";return""+(i||Ha)(a,t)+s}var c=n?function(e,t){for(var n=0,i=0;i<e.length;i++){var r=e[i];if(1===r.type){if(Qa(r)||r.ifConditions&&r.ifConditions.some(function(e){return Qa(e.block)})){n=2;break}(t(r)||r.ifConditions&&r.ifConditions.some(function(e){return t(e.block)}))&&(n=1)}}return n}(o,t.maybeComponent):0,l=r||es;return"["+o.map(function(e){return l(e,t)}).join(",")+"]"+(c?","+c:"")}}function Qa(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function es(e,t){return 1===e.type?Ha(e,t):3===e.type&&e.isComment?function(e){return"_e("+JSON.stringify(e.text)+")"}(e):function(e){return"_v("+(2===e.type?e.expression:ns(JSON.stringify(e.text)))+")"}(e)}function ts(e){for(var t="",n="",i=0;i<e.length;i++){var r=e[i],o=ns(r.value);r.dynamic?n+=r.name+","+o+",":t+='"'+r.name+'":'+o+","}return t="{"+t.slice(0,-1)+"}",n?"_d("+t+",["+n.slice(0,-1)+"])":t}function ns(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)");function is(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),$}}function rs(e){var t=Object.create(null);return function(n,i,r){(i=I({},i)).warn;delete i.warn;var o=i.delimiters?String(i.delimiters)+n:n;if(t[o])return t[o];var a=e(n,i);var s={},c=[];return s.render=is(a.render,c),s.staticRenderFns=a.staticRenderFns.map(function(e){return is(e,c)}),t[o]=s}}var os,as,ss=(os=function(e,t){var n=ha(e.trim(),t);!1!==t.optimize&&Ia(n,t);var i=qa(n,t);return{ast:n,render:i.render,staticRenderFns:i.staticRenderFns}},function(e){function t(t,n){var i=Object.create(e),r=[],o=[];if(n)for(var a in n.modules&&(i.modules=(e.modules||[]).concat(n.modules)),n.directives&&(i.directives=I(Object.create(e.directives||null),n.directives)),n)"modules"!==a&&"directives"!==a&&(i[a]=n[a]);i.warn=function(e,t,n){(n?o:r).push(e)};var s=os(t.trim(),i);return s.errors=r,s.tips=o,s}return{compile:t,compileToFunctions:rs(t)}})(Sa),cs=(ss.compile,ss.compileToFunctions);function ls(e){return(as=as||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',as.innerHTML.indexOf("&#10;")>0}var us=!!V&&ls(!1),ds=!!V&&ls(!0),fs=_(function(e){var t=ii(e);return t&&t.innerHTML}),ps=Tn.prototype.$mount;Tn.prototype.$mount=function(e,t){if((e=e&&ii(e))===document.body||e===document.documentElement)return this;var n=this.$options;if(!n.render){var i=n.template;if(i)if("string"==typeof i)"#"===i.charAt(0)&&(i=fs(i));else{if(!i.nodeType)return this;i=i.innerHTML}else e&&(i=function(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}(e));if(i){0;var r=cs(i,{outputSourceRange:!1,shouldDecodeNewlines:us,shouldDecodeNewlinesForHref:ds,delimiters:n.delimiters,comments:n.comments},this),o=r.render,a=r.staticRenderFns;n.render=o,n.staticRenderFns=a}}return ps.call(this,e,t)},Tn.compile=cs,t.a=Tn}).call(this,n(5),n(12).setImmediate)},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){const i=location.search.indexOf("runtime=1")>-1;e.exports=n(i?21:22)},function(e,t,n){const i=n(6),r=n(0),o=[];i.on("RESP_FS_READ_FILE",e=>{const t=o.indexOf(e.data.path);t>-1&&o.splice(t,1),r.emit("_read-file",e.data)}),e.exports.readFile=function(e,t){r.on("_read-file",function n(i){i.path===e&&(i.err||"function"!=typeof t||t({content:i.fileData,path:e}),r.removeListener("_read-file",n))}),o.indexOf(e)>-1||(o.push(e),i.invoke("FS_READ_FILE",{path:e}))}},function(e,t,n){const i=n(0),r=n(1),o=n(2),a=new r({meta:{id:"js-exception",passedTitle:"应避免出现任何 JavaScript 异常",failedTitle:"存在 JavaScript 异常",description:"出现 JavaScript 异常可能导致程序的交互无法进行下去，我们应当追求零异常，保证程序的高鲁棒性和高可用性",docoment:""},weight:3,failedSummaryGen(){return`${this.failedItems.length} 处Javascript异常`},scoringCategory:r.SCORING_CATEGORY.BEST_PRACTICE,headings:[{key:"msg",text:"错误信息"},{key:"stack",text:"调用栈",type:"stack"},{key:"page",text:"页面"}]});a.init=function(){i.on("js-exception",function(e){let t=o.parseStackStrings(e.msg);const n=e.msg.split("\n");t&&t.length&&a.addFailedItem({msg:n[2]||e.msg,stack:t,page:e.page})}),i.on("stop-audit",function(){a.emitFinished()})},e.exports=a},function(e,t,n){const i=n(0),r=n(1),o=new r({meta:{id:"request-fail",passedTitle:"所有请求应响应正常",failedTitle:"存在请求的响应状态码出现异常",description:"请求失败可能导致程序的交互无法进行下去，应当保证所有请求都能成功",document:""},weight:3,failedSummaryGen(){return`${this.failedItems.length} 次请求异常`},scoringCategory:r.SCORING_CATEGORY.BEST_PRACTICE,headings:[{key:"url",text:"URL"},{key:"statusCode",text:"状态码"},{key:"page",text:"页面"}]});o.init=function(){i.on("network-event",function(e){const t=e.details;"onHeadersReceived"===e.eventName||"onCompleted"===e.eventName?t.statusCode>=400&&o.addFailedItem({url:t.url,statusCode:t.statusCode,page:""}):"onErrorOccurred"===e.eventName&&"net::ERR_ABORTED"!=t.error&&o.addFailedItem({url:t.url,statusCode:t.error,page:""})}),i.on("stop-audit",function(){o.emitFinished()})},e.exports=o},function(e,t,n){const i=n(0),r=n(1),o=1e3;let a={};const s=new r({meta:{id:"request-long-time",passedTitle:"所有请求的耗时不应太久",failedTitle:"存在请求的耗时太长",description:"请求的耗时太长会让用户一直等待甚至离开，应当优化好服务器处理时间、减小回包大小，让请求快速响应",document:""},failedSummaryGen(){return`最高请求耗时 ${this.failedItems.reduce((e,t)=>Math.max(e,t.time),0)} ms`},scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,weight:5,headings:[{key:"url",text:"URL"},{key:"time",text:"耗时"},{key:"page",text:"页面"}]});s.init=function(){i.on("network-event",function(e){const t=e.details;switch(e.eventName){case"onBeforeRequest":a[t.requestId]=t;break;case"onBeforeRedirect":t.redirectUrl.match(/^http:\/\/127.0.0.1:/)&&delete a[t.requestId];break;case"onHeadersReceived":case"onErrorOccurred":const n=a[t.requestId];delete a[t.requestId],n&&(t.costTime=t.timeStamp-n.timeStamp,function(e){e.costTime>o&&s.addFailedItem({url:e.url,time:e.costTime.toFixed(2),page:""})}(t))}}),i.on("rebuild",function(){a={}}),i.on("stop-audit",function(){s.emitFinished(),a={}})},e.exports=s},function(e,t,n){const i=n(0),r=n(1),o=new r({meta:{id:"request-body-cache",passedTitle:"对网络请求做必要的缓存以避免多余的请求",failedTitle:"存在可能没有对请求进行缓存的情况",description:"发起网络请求总会让用户等待，可能造成不好的体验，应尽量避免多余的请求，比如对同样的请求进行缓存",document:""},weight:2,scoreDisplayMode:r.SCORING_MODES.NUMERIC,scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,headings:[{key:"url",text:"URL",type:"url"},{key:"page",text:"页面"}]});let a={},s={};o.init=function(){i.on("wx-request-body",function(e){e.body.length<131072||(a[e.url]!==e.body?(a[e.url]=e.body,clearTimeout(s[e.url]),s[e.url]=setTimeout(function(){delete a[e.url]},18e4)):o.addFailedItem({url:e.url,page:e.page}))}),i.on("rebuild",function(){a={},s={}}),i.on("stop-audit",function(){o.emitFinished(),a={},s={}})},e.exports=o},function(e,t,n){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(r.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new o(r.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(13),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(5))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var i,r,o,a,s,c=1,l={},u=!1,d=e.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(e);f=f&&f.setTimeout?f:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick(function(){m(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){m(e.data)},i=function(e){o.port2.postMessage(e)}):d&&"onreadystatechange"in d.createElement("script")?(r=d.documentElement,i=function(e){var t=d.createElement("script");t.onreadystatechange=function(){m(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):i=function(e){setTimeout(m,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&m(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),i=function(t){e.postMessage(a+t,"*")}),f.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return l[c]=r,i(c),c++},f.clearImmediate=p}function p(e){delete l[e]}function m(e){if(u)setTimeout(m,0,e);else{var t=l[e];if(t){u=!0;try{!function(e){var t=e.callback,i=e.args;switch(i.length){case 0:t();break;case 1:t(i[0]);break;case 2:t(i[0],i[1]);break;case 3:t(i[0],i[1],i[2]);break;default:t.apply(n,i)}}(t)}finally{p(e),u=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(5),n(14))},function(e,t){var n,i,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}}();var c,l=[],u=!1,d=-1;function f(){u&&c&&(u=!1,c.length?l=c.concat(l):d=-1,l.length&&p())}function p(){if(!u){var e=s(f);u=!0;for(var t=l.length;t;){for(c=l,l=[];++d<t;)c&&c[d].run();d=-1,t=l.length}c=null,u=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new m(e,t)),1!==l.length||u||s(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=h,r.addListener=h,r.once=h,r.off=h,r.removeListener=h,r.removeAllListeners=h,r.emit=h,r.prependListener=h,r.prependOnceListener=h,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){var i=n(16);"string"==typeof i&&(i=[[e.i,i,""]]);n(18)(i,{});i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(17)()).push([e.i,"html,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n  text-decoration: none;\n}\na:visited {\n  color: inherit;\n}\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Ubuntu, \"Helvetica Neue\", Helvetica, Arial, \"PingFang SC\", \"Microsoft YaHei UI\", \"Microsoft YaHei\", \"Source Han Sans CN\", sans-serif;\n  /* user-select: none; */\n}\nlabel {\n  cursor: pointer;\n}\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\nbody {\n  line-height: 1;\n}\nol,\nul {\n  list-style: none;\n}\nblockquote,\nq {\n  quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: \"\";\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n*,\n:after,\n:before {\n  box-sizing: border-box;\n}\na {\n  color: #000000;\n  cursor: pointer;\n}\nimg {\n  -webkit-user-drag: none;\n}\nbody {\n  font-size: 14px;\n}\n::-webkit-scrollbar {\n  width: 3px;\n  height: 3px;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 3px;\n  background-color: #c3c3c3;\n}\n::-webkit-scrollbar-track {\n  background-color: transparent;\n}\n.ui-selectable {\n  user-select: text;\n}\n.ui-desc {\n  color: #888888;\n}\n.ui-button {\n  position: relative;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  padding: 6px 25px 4px;\n  vertical-align: middle;\n  font-size: 12px;\n  line-height: 1;\n  border-radius: 3px;\n  outline: 0;\n  border: 0;\n  white-space: nowrap;\n  cursor: pointer;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5), 0 1px 1px 0 rgba(0, 0, 0, 0.01);\n}\n.ui-button[disabled] {\n  opacity: 0.3;\n  cursor: not-allowed;\n}\n.ui-button:before {\n  content: \"\";\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n  transition: background-color ease 0.2s;\n}\n.ui-button-default {\n  color: #000;\n  background: linear-gradient(to bottom, #fcfcfc, #f5f5f5);\n}\n.ui-button-default:not([disabled]):hover:before {\n  background-color: rgba(0, 0, 0, 0.06);\n}\n.ui-button-default:not([disabled]):active:before {\n  background-color: rgba(0, 0, 0, 0.2);\n}\n.ui-button-mini {\n  padding: 4px 10px;\n  font-size: 10px;\n}\n.ui-button-primary {\n  color: #fff;\n  background: linear-gradient(to bottom, #00c777, #00ba70);\n}\n.ui-button-primary:not([disabled]):hover:before {\n  background-color: rgba(0, 0, 0, 0.06);\n}\n.ui-button-primary:not([disabled]):active:before {\n  background-color: rgba(0, 0, 0, 0.2);\n}\n.ui-button-warn {\n  color: #d94e4e;\n  background: linear-gradient(to bottom, #fcfcfc, #f5f5f5);\n}\n.ui-button-warn:hover:before {\n  background-color: rgba(0, 0, 0, 0.06);\n}\n.ui-button-warn:active:before {\n  background-color: rgba(0, 0, 0, 0.2);\n}\nbody.dark .ui-button-default {\n  background: linear-gradient(to bottom, #7b7b7b, #737373);\n  color: rgba(255, 255, 255, 0.8);\n}\nhtml,\nbody {\n  height: 100%;\n}\nbody {\n  line-height: 1.6;\n  color: #000;\n  font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', '\\5FAE\\8F6F\\96C5\\9ED1', Arial, sans-serif;\n  font-size: 13px;\n}\nbody {\n  --primary-color: #07c160;\n  --global-text-color: #222;\n  --global-font-size: 13px;\n  --global-link-text-color: #10aeff;\n  --text-warn-color: #d94e4e;\n  --background-color: #fff;\n}\nbody.dark {\n  --primary-color: #07c160;\n  --global-text-color: #fff;\n  --text-warn-color: #d94e4e;\n  --background-color: #1e1e1e;\n}\na {\n  color: var(--global-link-text-color);\n}\nbody {\n  color: var(--global-text-color);\n}\n.audit {\n  padding: 35px;\n}\n.audit-title {\n  font-weight: normal;\n  font-size: 17px;\n}\n.audit-desc {\n  font-size: 13px;\n  margin-top: 12px;\n  margin-bottom: 24px;\n}\n.device-info-item {\n  display: flex;\n}\n.device-info-key {\n  width: 8em;\n  margin-right: 1em;\n  color: #7f7f7f;\n}\n.device-info-value {\n  flex: 1;\n}\n.device-info-tips {\n  color: #7f7f7f;\n}\n.audit-result-desc {\n  font-size: 13px;\n  margin-top: 6px;\n  color: #7f7f7f;\n}\n.audit-result-desc > span {\n  margin-right: 28px;\n}\n.audit-action-area {\n  margin-top: 35px;\n}\n.audit-result {\n  padding: 35px;\n}\n.audit-result-summary {\n  display: flex;\n}\n.audit-result-summary–primary {\n  flex: 1;\n}\n.audit-icon-dot-red,\n.audit-icon-dot-yellow,\n.audit-icon-dot-green {\n  display: inline-block;\n  vertical-align: middle;\n  width: 4px;\n  height: 4px;\n  border-radius: 50%;\n}\n.audit-icon-dot-red {\n  background-color: #c14b4b;\n}\n.audit-icon-dot-yellow {\n  background-color: #c59b12;\n}\n.audit-icon-dot-green {\n  background-color: #179955;\n}\n.audit-icon-color-remark {\n  color: #7f7f7f;\n  font-size: 11px;\n}\n.audit-icon-color-remark + .audit-icon-color-remark {\n  margin-left: 10px;\n}\n.audit-result-summary-extra {\n  text-align: right;\n}\n.audit-result-summary-extra > p:first-child {\n  margin-bottom: 9px;\n}\n.audit-result-summary-extra a {\n  color: #10aeff;\n}\n.audit-result-score {\n  display: flex;\n  padding: 50px 0;\n  user-select: none;\n}\n.audit-score-item {\n  flex: 1;\n}\n.audit-score-item-icon {\n  text-align: center;\n  position: relative;\n  font-size: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.audit-score-item-icon-circle {\n  cx: 7;\n  cy: 7;\n  r: 6;\n  fill: none;\n  stroke-width: 1;\n  stroke: #ffc300;\n  stroke-linecap: round;\n  transition: stroke-dashoffset 1s ease-in-out;\n}\n.audit-score-item-icon-circle-bg {\n  cx: 7;\n  cy: 7;\n  r: 6;\n  fill: none;\n  stroke-width: 1;\n  stroke: #d3d3d3;\n}\n.audit-score-item-icon-yellow {\n  color: #ffc300;\n}\n.audit-score-item-icon-yellow .audit-score-item-icon-circle {\n  stroke: #ffc300;\n}\n.audit-score-item-icon-green {\n  color: #07c160;\n}\n.audit-score-item-icon-green .audit-score-item-icon-circle {\n  stroke: #07c160;\n}\n.audit-score-item-icon-red {\n  color: #fa5151;\n}\n.audit-score-item-icon-red .audit-score-item-icon-circle {\n  stroke: #fa5151;\n}\n.audit-score-value {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 22px;\n}\n.audit-score-item-desc {\n  text-align: center;\n  margin-top: 24px;\n  font-size: 13px;\n}\n.audit-result-group + .audit-result-group {\n  margin-top: 48px;\n}\n.audit-result-group-title {\n  font-size: 15px;\n  position: relative;\n  padding-left: 10px;\n}\n.audit-result-group-title::before {\n  content: \"\";\n  position: absolute;\n  left: 0;\n  top: 4px;\n  bottom: 4px;\n  width: 2px;\n}\n.audit-result-group-title-green::before {\n  background-color: #07c160;\n}\n.audit-result-group-title-yellow::before {\n  background-color: #ffc300;\n}\n.audit-result-group-title-red::before {\n  background-color: #fa5151;\n}\n.audit-result-group-score {\n  font-size: 15px;\n  margin-left: 5px;\n}\n.audit-result-group-desc {\n  color: #7f7f7f;\n}\n.audit-result-items + .audit-result-items {\n  margin-top: 20px;\n}\ndetails summary::-webkit-details-marker {\n  display: none;\n}\ndetails [class^=\"ui-icon-arrow\"] {\n  margin-left: 5px;\n}\ndetails[open] > summary > [class^=\"ui-icon-arrow\"],\ndetails[open] > summary > p > [class^=\"ui-icon-arrow\"] {\n  transform-origin: 50% 50%;\n  transform: rotate(180deg);\n}\ndetails > summary {\n  outline: 0;\n}\n.audit-result-table {\n  width: 100%;\n  font-size: 13px;\n  table-layout: fixed;\n}\n.audit-result-table thead th {\n  padding: 9px 0;\n  text-align: right;\n  border-bottom: 1px solid #dadada;\n}\n.audit-result-table thead th:first-child {\n  text-align: left;\n}\n.audit-result-table tbody td {\n  padding: 9px 0;\n  text-align: right;\n  border-bottom: 1px solid #dadada;\n}\n.audit-result-table tbody td:first-child {\n  text-align: left;\n}\n.audit-result-table tbody td p {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n.audit-result-table a {\n  color: #10aeff;\n}\n.audit-result-item-summary {\n  display: flex;\n  padding: 15px 0;\n  border-bottom: 1px solid #dadada;\n  outline: 0;\n  align-items: center;\n  color: #7f7f77;\n}\n.audit-result-item-summary [class^=\"ui-icon\"] {\n  background-color: #7f7f7f;\n}\n.audit-result-item-summary-content {\n  flex: 1;\n  font-size: 13px;\n  padding-left: 10px;\n}\n.audit-result-item-content {\n  font-size: 13px;\n  flex: 1;\n}\n.audit-result-item {\n  display: flex;\n  padding: 15px 0;\n  margin-left: 20px;\n  border-bottom: 1px solid #dadada;\n  outline: 0;\n}\n.audit-result-item-detail {\n  margin-left: 25px;\n  padding: 10px 0;\n  color: #7f7f7f;\n}\n.audit-result-item-ext {\n  font-size: 11px;\n  color: #fa5151;\n}\nbody.dark .audit-result-item-summary,\nbody.dark .audit-result-item {\n  border-color: #3a3a3a;\n}\nbody.dark .audit-result-table thead th {\n  border-color: #3a3a3a;\n}\nbody.dark .audit-result-table tbody td {\n  border-color: #3a3a3a;\n}\nbody.dark [class^=\"ui-icon-arrow\"] {\n  background-color: #ccc;\n}\nbody.dark .audit-score-item-icon-circle-bg {\n  stroke: #3e3e3e;\n}\n.ui-icon-arrow-up-o {\n  display: inline-block;\n  vertical-align: middle;\n  width: 16px;\n  height: 8px;\n  -webkit-mask: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='11' height='7' viewBox='0 0 11 7'%3E  %3Cdefs%3E    %3ClinearGradient id='384e65d3-3eba-457c-b069-e5afe8f816fe-c' x1='50%25' x2='50%25' y1='0%25' y2='100%25'%3E      %3Cstop offset='0%25' stop-color='%23FCFCFC'/%3E      %3Cstop offset='100%25' stop-color='%23F1F1F1'/%3E    %3C/linearGradient%3E    %3Cpath id='384e65d3-3eba-457c-b069-e5afe8f816fe-b' d='M5.058 8.287l-.707.707L.5 5.14a.664.664 0 0 1 0-.942L4.35.347l.707.707L1.442 4.67l3.616 3.617z'/%3E    %3Cfilter id='384e65d3-3eba-457c-b069-e5afe8f816fe-a' width='184.1%25' height='146.3%25' x='-42.1%25' y='-11.6%25' filterUnits='objectBoundingBox'%3E      %3CfeOffset dy='1' in='SourceAlpha' result='shadowOffsetOuter1'/%3E      %3CfeGaussianBlur in='shadowOffsetOuter1' result='shadowBlurOuter1' stdDeviation='.5'/%3E      %3CfeColorMatrix in='shadowBlurOuter1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.0612828351 0'/%3E    %3C/filter%3E    %3Cfilter id='384e65d3-3eba-457c-b069-e5afe8f816fe-d' width='163.1%25' height='134.7%25' x='-31.5%25' y='-5.8%25' filterUnits='objectBoundingBox'%3E      %3CfeGaussianBlur in='SourceAlpha' result='shadowBlurInner1' stdDeviation='.5'/%3E      %3CfeOffset in='shadowBlurInner1' result='shadowOffsetInner1'/%3E      %3CfeComposite in='shadowOffsetInner1' in2='SourceAlpha' k2='-1' k3='1' operator='arithmetic' result='shadowInnerInner1'/%3E      %3CfeColorMatrix in='shadowInnerInner1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.5 0'/%3E    %3C/filter%3E  %3C/defs%3E  %3Cg fill='none' fill-rule='evenodd' opacity='.5' transform='matrix(0 1 1 0 .326 .306)'%3E    %3Cuse fill='%23000' filter='url(%23384e65d3-3eba-457c-b069-e5afe8f816fe-a)' xlink:href='%23384e65d3-3eba-457c-b069-e5afe8f816fe-b'/%3E    %3Cuse fill='url(%23384e65d3-3eba-457c-b069-e5afe8f816fe-c)' xlink:href='%23384e65d3-3eba-457c-b069-e5afe8f816fe-b'/%3E    %3Cuse fill='%23000' filter='url(%23384e65d3-3eba-457c-b069-e5afe8f816fe-d)' xlink:href='%23384e65d3-3eba-457c-b069-e5afe8f816fe-b'/%3E  %3C/g%3E%3C/svg%3E\") no-repeat 50% 50%;\n          mask: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='11' height='7' viewBox='0 0 11 7'%3E  %3Cdefs%3E    %3ClinearGradient id='384e65d3-3eba-457c-b069-e5afe8f816fe-c' x1='50%25' x2='50%25' y1='0%25' y2='100%25'%3E      %3Cstop offset='0%25' stop-color='%23FCFCFC'/%3E      %3Cstop offset='100%25' stop-color='%23F1F1F1'/%3E    %3C/linearGradient%3E    %3Cpath id='384e65d3-3eba-457c-b069-e5afe8f816fe-b' d='M5.058 8.287l-.707.707L.5 5.14a.664.664 0 0 1 0-.942L4.35.347l.707.707L1.442 4.67l3.616 3.617z'/%3E    %3Cfilter id='384e65d3-3eba-457c-b069-e5afe8f816fe-a' width='184.1%25' height='146.3%25' x='-42.1%25' y='-11.6%25' filterUnits='objectBoundingBox'%3E      %3CfeOffset dy='1' in='SourceAlpha' result='shadowOffsetOuter1'/%3E      %3CfeGaussianBlur in='shadowOffsetOuter1' result='shadowBlurOuter1' stdDeviation='.5'/%3E      %3CfeColorMatrix in='shadowBlurOuter1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.0612828351 0'/%3E    %3C/filter%3E    %3Cfilter id='384e65d3-3eba-457c-b069-e5afe8f816fe-d' width='163.1%25' height='134.7%25' x='-31.5%25' y='-5.8%25' filterUnits='objectBoundingBox'%3E      %3CfeGaussianBlur in='SourceAlpha' result='shadowBlurInner1' stdDeviation='.5'/%3E      %3CfeOffset in='shadowBlurInner1' result='shadowOffsetInner1'/%3E      %3CfeComposite in='shadowOffsetInner1' in2='SourceAlpha' k2='-1' k3='1' operator='arithmetic' result='shadowInnerInner1'/%3E      %3CfeColorMatrix in='shadowInnerInner1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.5 0'/%3E    %3C/filter%3E  %3C/defs%3E  %3Cg fill='none' fill-rule='evenodd' opacity='.5' transform='matrix(0 1 1 0 .326 .306)'%3E    %3Cuse fill='%23000' filter='url(%23384e65d3-3eba-457c-b069-e5afe8f816fe-a)' xlink:href='%23384e65d3-3eba-457c-b069-e5afe8f816fe-b'/%3E    %3Cuse fill='url(%23384e65d3-3eba-457c-b069-e5afe8f816fe-c)' xlink:href='%23384e65d3-3eba-457c-b069-e5afe8f816fe-b'/%3E    %3Cuse fill='%23000' filter='url(%23384e65d3-3eba-457c-b069-e5afe8f816fe-d)' xlink:href='%23384e65d3-3eba-457c-b069-e5afe8f816fe-b'/%3E  %3C/g%3E%3C/svg%3E\") no-repeat 50% 50%;\n  -webkit-mask-size: cover;\n          mask-size: cover;\n  background-color: currentColor;\n}\n.ui-icon-arrow-down-o {\n  display: inline-block;\n  vertical-align: middle;\n  width: 16px;\n  height: 8px;\n  -webkit-mask: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='11' height='7' viewBox='0 0 11 7'%3E  %3Cdefs%3E    %3ClinearGradient id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-c' x1='50%25' x2='50%25' y1='0%25' y2='100%25'%3E      %3Cstop offset='0%25' stop-color='%23FCFCFC'/%3E      %3Cstop offset='100%25' stop-color='%23F1F1F1'/%3E    %3C/linearGradient%3E    %3Cpath id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b' d='M5.058 8.287l-.707.707L.5 5.14a.664.664 0 0 1 0-.942L4.35.347l.707.707L1.442 4.67l3.616 3.617z'/%3E    %3Cfilter id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-a' width='184.1%25' height='146.3%25' x='-42.1%25' y='-11.6%25' filterUnits='objectBoundingBox'%3E      %3CfeOffset dy='1' in='SourceAlpha' result='shadowOffsetOuter1'/%3E      %3CfeGaussianBlur in='shadowOffsetOuter1' result='shadowBlurOuter1' stdDeviation='.5'/%3E      %3CfeColorMatrix in='shadowBlurOuter1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.0612828351 0'/%3E    %3C/filter%3E    %3Cfilter id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-d' width='163.1%25' height='134.7%25' x='-31.5%25' y='-5.8%25' filterUnits='objectBoundingBox'%3E      %3CfeGaussianBlur in='SourceAlpha' result='shadowBlurInner1' stdDeviation='.5'/%3E      %3CfeOffset in='shadowBlurInner1' result='shadowOffsetInner1'/%3E      %3CfeComposite in='shadowOffsetInner1' in2='SourceAlpha' k2='-1' k3='1' operator='arithmetic' result='shadowInnerInner1'/%3E      %3CfeColorMatrix in='shadowInnerInner1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.5 0'/%3E    %3C/filter%3E  %3C/defs%3E  %3Cg fill='none' fill-rule='evenodd' opacity='.5' transform='rotate(-90 3.51 3.184)'%3E    %3Cuse fill='%23000' filter='url(%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-a)' xlink:href='%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b'/%3E    %3Cuse fill='url(%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-c)' xlink:href='%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b'/%3E    %3Cuse fill='%23000' filter='url(%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-d)' xlink:href='%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b'/%3E  %3C/g%3E%3C/svg%3E\") no-repeat 50% 50%;\n          mask: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='11' height='7' viewBox='0 0 11 7'%3E  %3Cdefs%3E    %3ClinearGradient id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-c' x1='50%25' x2='50%25' y1='0%25' y2='100%25'%3E      %3Cstop offset='0%25' stop-color='%23FCFCFC'/%3E      %3Cstop offset='100%25' stop-color='%23F1F1F1'/%3E    %3C/linearGradient%3E    %3Cpath id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b' d='M5.058 8.287l-.707.707L.5 5.14a.664.664 0 0 1 0-.942L4.35.347l.707.707L1.442 4.67l3.616 3.617z'/%3E    %3Cfilter id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-a' width='184.1%25' height='146.3%25' x='-42.1%25' y='-11.6%25' filterUnits='objectBoundingBox'%3E      %3CfeOffset dy='1' in='SourceAlpha' result='shadowOffsetOuter1'/%3E      %3CfeGaussianBlur in='shadowOffsetOuter1' result='shadowBlurOuter1' stdDeviation='.5'/%3E      %3CfeColorMatrix in='shadowBlurOuter1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.0612828351 0'/%3E    %3C/filter%3E    %3Cfilter id='27ae5ee4-2566-47d2-9f7f-6fb2b19d956e-d' width='163.1%25' height='134.7%25' x='-31.5%25' y='-5.8%25' filterUnits='objectBoundingBox'%3E      %3CfeGaussianBlur in='SourceAlpha' result='shadowBlurInner1' stdDeviation='.5'/%3E      %3CfeOffset in='shadowBlurInner1' result='shadowOffsetInner1'/%3E      %3CfeComposite in='shadowOffsetInner1' in2='SourceAlpha' k2='-1' k3='1' operator='arithmetic' result='shadowInnerInner1'/%3E      %3CfeColorMatrix in='shadowInnerInner1' values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.5 0'/%3E    %3C/filter%3E  %3C/defs%3E  %3Cg fill='none' fill-rule='evenodd' opacity='.5' transform='rotate(-90 3.51 3.184)'%3E    %3Cuse fill='%23000' filter='url(%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-a)' xlink:href='%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b'/%3E    %3Cuse fill='url(%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-c)' xlink:href='%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b'/%3E    %3Cuse fill='%23000' filter='url(%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-d)' xlink:href='%2327ae5ee4-2566-47d2-9f7f-6fb2b19d956e-b'/%3E  %3C/g%3E%3C/svg%3E\") no-repeat 50% 50%;\n  -webkit-mask-size: cover;\n          mask-size: cover;\n  background-color: currentColor;\n}\n",""])},function(e,t){e.exports=function(){var e=[];return e.toString=function(){for(var e=[],t=0;t<this.length;t++){var n=this[t];n[2]?e.push("@media "+n[2]+"{"+n[1]+"}"):e.push(n[1])}return e.join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var i={},r=0;r<this.length;r++){var o=this[r][0];"number"==typeof o&&(i[o]=!0)}for(r=0;r<t.length;r++){var a=t[r];"number"==typeof a[0]&&i[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(e,t){var n={},i=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}},r=i(function(){return/msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase())}),o=i(function(){return document.head||document.getElementsByTagName("head")[0]}),a=null,s=0,c=[];function l(e,t){for(var i=0;i<e.length;i++){var r=e[i],o=n[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(m(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(m(r.parts[a],t));n[r.id]={id:r.id,refs:1,parts:s}}}}function u(e){for(var t=[],n={},i=0;i<e.length;i++){var r=e[i],o=r[0],a={css:r[1],media:r[2],sourceMap:r[3]};n[o]?n[o].parts.push(a):t.push(n[o]={id:o,parts:[a]})}return t}function d(e,t){var n=o(),i=c[c.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else{if("bottom"!==e.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(t)}}function f(e){e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function p(e){var t=document.createElement("style");return t.type="text/css",d(e,t),t}function m(e,t){var n,i,r;if(t.singleton){var o=s++;n=a||(a=p(t)),i=g.bind(null,n,o,!1),r=g.bind(null,n,o,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return t.rel="stylesheet",d(e,t),t}(t),i=function(e,t){var n=t.css,i=t.sourceMap;i&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var r=new Blob([n],{type:"text/css"}),o=e.href;e.href=URL.createObjectURL(r),o&&URL.revokeObjectURL(o)}.bind(null,n),r=function(){f(n),n.href&&URL.revokeObjectURL(n.href)}):(n=p(t),i=function(e,t){var n=t.css,i=t.media;i&&e.setAttribute("media",i);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){f(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");void 0===(t=t||{}).singleton&&(t.singleton=r()),void 0===t.insertAt&&(t.insertAt="bottom");var i=u(e);return l(i,t),function(e){for(var r=[],o=0;o<i.length;o++){var a=i[o];(s=n[a.id]).refs--,r.push(s)}e&&l(u(e),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete n[s.id]}}}};var h,v=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function g(e,t,n,i){var r=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=v(t,r);else{var o=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}},function(e,t,n){const i=n(0);let r="",o="";i.on("appservice-onload",function(e){r=e.appId,o=e.libVersion});
/*!
 * @module report
 * @author kael, chriscai
 * @date @DATE
 * Copyright (c) 2014 kael, chriscai
 * Licensed under the MIT license.
 */
var a=function(e){if(e.BJ_REPORT)return e.BJ_REPORT;var t=[],n={},i={id:0,uin:0,url:"",combo:1,ext:null,level:4,ignore:[],random:1,delay:1e3,submit:null,repeat:5,globalError:!0},a=function(e,t){return Object.prototype.toString.call(e)==="[object "+(t||"Object")+"]"},s=function(e){return"object"===typeof e&&!!e},c=function(e){var t=e.stack.replace(/\n/gi,"").split(/\bat\b/).slice(0,9).join("@").replace(/\?[^:]+/gi,""),n=e.toString();return t.indexOf(n)<0&&(t=n+"@"+t),t},l=function(e,t){var n,r=[],o=[],c=[];if(s(e))for(var l in e.level=e.level||i.level,e){var u=e[l];if(null!==(n=u)&&(a(n,"Number")||n)){if(s(u))try{u=JSON.stringify(u)}catch(e){u="[BJ_REPORT detect value stringify error] "+e.toString()}c.push(l+":"+u),r.push(l+"="+encodeURIComponent(u)),o.push(l+"["+t+"]="+encodeURIComponent(u))}}return[o.join("&"),c.join(","),r.join("&")]},u=function(e){var t;i.submit?i.submit(e):("undefined"!=typeof Image?t=new Image:"undefined"!=typeof document&&document.createElement&&(t=document.createElement("img")),t&&(t.src=e))},d=function(e){if(!s(e))return!0;var t=e.msg;return(n[t]=(parseInt(n[t],10)||0)+1)>i.repeat},f=[],p=0,m=function(e){if(i.report){for(;t.length;){var n=!1,r=t.shift();if(!d(r)){var o=l(r,f.length);if(a(i.ignore,"Array"))for(var s=0,c=i.ignore.length;s<c;s++){var m=i.ignore[s];if(a(m,"RegExp")&&m.test(o[1])||a(m,"Function")&&m(r,o[1])){n=!0;break}}n||(i.combo?f.push(o[0]):u(i.report+o[2]+"&_t="+ +new Date),i.onReport&&i.onReport(i.id,r))}}if(f.length){var h=function(){clearTimeout(p),u(i.report+f.join("&")+"&count="+f.length+"&_t="+ +new Date),p=0,f=[]};e?h():p||(p=setTimeout(h,i.delay))}}},h=e.BJ_REPORT={push:function(e){if(Math.random()>=i.random)return h;var n=s(e)?function(e){try{if(e.stack){var t=e.stack.match("https?://[^\n]+"),n=(t=t?t[0]:"").match(":(\\d+):(\\d+)");return n||(n=[0,0,0]),{msg:c(e),rowNum:n[1],colNum:n[2],target:t.replace(n[0],"")}}return e.name&&e.message&&e.description?{msg:JSON.stringify(e)}:e}catch(t){return e}}(e):{msg:e};return i.ext&&!n.ext&&(n.ext=i.ext),n.from=JSON.stringify({version:i.extend&&i.extend.version,appId:"undefined"!=typeof __wxConfig&&__wxConfig.accountInfo&&__wxConfig.accountInfo.appId||r,libVersion:"undefined"!=typeof __appServiceSDK__?__appServiceSDK__.wx&&__appServiceSDK__.wx.version&&__appServiceSDK__.wx.version.version:"undefined"!=typeof wx?wx.version&&wx.version.version:o}),t.push(n),m(),h},report:function(e){return e&&h.push(e),m(!0),h},info:function(e){return e?(s(e)?e.level=2:e={msg:e,level:2},h.push(e),h):h},debug:function(e){return e?(s(e)?e.level=1:e={msg:e,level:1},h.push(e),h):h},init:function(e){if(s(e))for(var n in e)i[n]=e[n];var r,o=parseInt(i.id,10);return o&&(/qq\.com$/gi.test(location.hostname)&&(i.url||(i.url="//badjs2.qq.com/badjs"),i.uin||(i.uin=parseInt((document.cookie.match(/\buin=\D+(\d+)/)||[])[1],10))),i.report=(i.url||"/badjs")+"?id="+o+"&uin="+i.uin+"&"),t.length&&m(),i.globalError&&(r=window.onerror,window.onerror=function(e,t,n,i,o){var s=e;o&&o.stack&&(s=c(o)),a(s,"Event")&&(s+=s.type?"--"+s.type+"--"+(s.target?s.target.tagName+"::"+s.target.src:""):""),h.push({msg:s,target:t,rowNum:n,colNum:i}),m(),r&&r.apply(window,arguments)}),h},__onerror__:e.onerror};return"undefined"!=typeof console&&console.error&&setTimeout(function(){var e=((location.hash||"").match(/([#&])BJ_ERROR=([^&$]+)/)||[])[2];e&&console.error("BJ_ERROR",decodeURIComponent(e).replace(/(:\d+:\d+)\s*/g,"$1\n"))},0),h}(this);e.exports=a,function(e){if(e.BJ_REPORT){var t=function(t){e.BJ_REPORT.push(t)},n={};e.BJ_REPORT.tryJs=function(e){return e&&(t=e),n};var i,r=function(e,t){for(var n in t)e[n]=t[n]},o=function(e){return"function"==typeof e},a=function(n,r){return function(){try{return n.apply(this,r||arguments)}catch(n){if(t(n),n.stack&&console&&console.error&&console.error("[BJ-REPORT]",n.stack),!i){var o=e.onerror;e.onerror=function(){},i=setTimeout(function(){e.onerror=o,i=null},50)}throw n}}},s=function(e){return function(){for(var t,n=[],i=0,r=arguments.length;i<r;i++)t=arguments[i],o(t)&&(t=a(t)),n.push(t);return e.apply(this,n)}},c=function(e){return function(t,n){if("string"==typeof t)try{t=new Function(t)}catch(e){throw e}var i=[].slice.call(arguments,2);return t=a(t,i.length&&i),e(t,n)}},l=function(e,t){return function(){for(var n,i,r=[],s=0,c=arguments.length;s<c;s++)n=arguments[s],o(n)&&(i=a(n))&&(n.tryWrap=i)&&(n=i),r.push(n);return e.apply(t||this,r)}},u=function(e){var t,n;for(t in e)n=e[t],o(n)&&(e[t]=a(n));return e};n.spyJquery=function(){var t,i,r=e.$;if(!r||!r.event)return n;r.zepto?(t=r.fn.on,i=r.fn.off,r.fn.on=l(t),r.fn.off=function(){for(var e,t=[],n=0,r=arguments.length;n<r;n++)e=arguments[n],o(e)&&e.tryWrap&&(e=e.tryWrap),t.push(e);return i.apply(this,t)}):window.jQuery&&(t=r.event.add,i=r.event.remove,r.event.add=l(t),r.event.remove=function(){for(var e,t=[],n=0,r=arguments.length;n<r;n++)e=arguments[n],o(e)&&e.tryWrap&&(e=e.tryWrap),t.push(e);return i.apply(this,t)});var a=r.ajax;return a&&(r.ajax=function(e,t){return t||(t=e,e=void 0),u(t),e?a.call(r,e,t):a.call(r,t)}),n},n.spyModules=function(){var t=e.require,i=e.define;return i&&i.amd&&t&&(e.require=s(t),r(e.require,t),e.define=s(i),r(e.define,i)),e.seajs&&i&&(e.define=function(){for(var e,t=[],n=0,r=arguments.length;n<r;n++)e=arguments[n],o(e)&&((e=a(e)).toString=function(e){return function(){return e.toString()}}(arguments[n])),t.push(e);return i.apply(this,t)},e.seajs.use=s(e.seajs.use),r(e.define,i)),n},n.spySystem=function(){return e.setTimeout=c(e.setTimeout),e.setInterval=c(e.setInterval),n},n.spyCustom=function(e){return o(e)?a(e):u(e)},n.spyAll=function(){return n.spyJquery().spyModules().spySystem(),n}}else console.error("please load bg-report first")}(this)},function(e,t,n){"use strict";var i,r="object"==typeof Reflect?Reflect:null,o=r&&"function"==typeof r.apply?r.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};i=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var c=10;function l(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function u(e,t,n,i){var r,o,a,s;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),a=o[t]),void 0===a)a=o[t]=n,++e._eventsCount;else if("function"==typeof a?a=o[t]=i?[n,a]:[a,n]:i?a.unshift(n):a.push(n),(r=l(e))>0&&a.length>r&&!a.warned){a.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=a.length,s=c,console&&console.warn&&console.warn(s)}return e}function d(e,t,n){var i={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},r=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,o(this.listener,this.target,e))}.bind(i);return r.listener=n,i.wrapFn=r,r}function f(e,t,n){var i=e._events;if(void 0===i)return[];var r=i[t];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(r):m(r,r.length)}function p(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function m(e,t){for(var n=new Array(t),i=0;i<t;++i)n[i]=e[i];return n}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return l(this)},s.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,r=this._events;if(void 0!==r)i=i&&void 0===r.error;else if(!i)return!1;if(i){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var c=r[e];if(void 0===c)return!1;if("function"==typeof c)o(c,this,t);else{var l=c.length,u=m(c,l);for(n=0;n<l;++n)o(u[n],this,t)}return!0},s.prototype.addListener=function(e,t){return u(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return u(this,e,t,!0)},s.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,d(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,d(this,e,t)),this},s.prototype.removeListener=function(e,t){var n,i,r,o,a;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(i=this._events))return this;if(void 0===(n=i[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(r=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){a=n[o].listener,r=o;break}if(r<0)return this;0===r?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,r),1===n.length&&(i[e]=n[0]),void 0!==i.removeListener&&this.emit("removeListener",e,a||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,n,i;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var r,o=Object.keys(n);for(i=0;i<o.length;++i)"removeListener"!==(r=o[i])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(i=t.length-1;i>=0;i--)this.removeListener(e,t[i]);return this},s.prototype.listeners=function(e){return f(this,e,!0)},s.prototype.rawListeners=function(e){return f(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},s.prototype.listenerCount=p,s.prototype.eventNames=function(){return this._eventsCount>0?i(this._events):[]}},function(e,t,n){n(0),n(3);const i={};window.addEventListener("message",e=>{const{command:t,data:n}=e.data;(i[t]||[]).forEach(e=>e({command:t,data:n}))}),e.exports={invoke:(e,t)=>{(t=t||{}).protocol="AUDITS_FRAME",window.parent.postMessage({command:e,data:t})},on:(e,t)=>{i[e]=i[e]||[],i[e].push(t)}}},function(e,t,n){const i=n(3);var r=[],o={};window.addEventListener("wechatideReady",()=>{r.forEach(e=>{window.wechatide.invoke(e.command,e.args,e.callback)}),r=[];for(const e in o)window.wechatide.on(e,o[e])});e.exports={invoke:(e,t,n)=>{window.wechatide?window.wechatide.invoke(e,t,n):r.push({command:e,args:t,callback:n})},on:(e,t)=>{const n=function(...e){try{t.apply(this,e)}catch(e){console.error(e),i.report(e)}};window.wechatide?window.wechatide.on(e,n):o[e]=n}}},function(e,t,n){const i=n(2),r=n(6);e.exports.reportBehavior=function(e){i.log("reportBehavior",e),r.invoke("REPORT",JSON.stringify(e))}},function(e,t,n){n(0);const i=!(navigator.userAgent.match(/port\/(\d*)/)&&window&&/chrome\-extension/.test(location.href)),r=[n(8),n(25),n(26),n(9),n(10),n(27),n(28),n(29),n(30),n(31),n(32),n(33),n(34),n(35),n(11),n(36),n(37),n(38),n(39),n(40),n(41),n(42),n(43),n(44)];i||r.push(n(45),n(46),n(47));const o=[n(8),n(48),n(49),n(9),n(10),n(11),n(50),n(51),n(52),n(53),n(54),n(55),n(56)];e.exports={miniProgram:r,game:o}},function(e,t,n){const i=n(0),r=(n(2),n(1)),o=new r({meta:{id:"image-no-cache",passedTitle:"网络图片资源应开启 HTTP 缓存控制",failedTitle:"存在网络图片资源未开启 HTTP 缓存控制",description:"开启 HTTP 缓存控制后，下一次加载同样的图片，会直接从缓存读取，提升加载速度",document:""},scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,weight:4,headings:[{key:"url",text:"URL"},{key:"page",text:"页面"}]});let a=!0,s={};o.init=function(){i.on("network-event",function(e){const t=e.details;"onResponseStarted"===e.eventName&&setTimeout(function(){!function(e){if("image"!==e.type)return;let t=-1;const n={};if(e.responseHeaders.map(e=>{const i=e.name.toLowerCase();return"content-length"===i&&(t=e.value),n[i]=e.value,i}),!e.fromCache&&(!n["cache-control"]||/no-cache|max-?age=0/.test(n["cache-control"]))&&0!==t){const t=s[e.url];o.addFailedItem({url:e.url,page:t&&t[3]||""})}}(t)},1e3)}),i.on("all-webview-image",function(e){a&&Object.keys(e.imgsInfo).length&&(a=!1),s=e.imgsInfo}),i.on("rebuild",function(){a=!0,s={}}),i.on("stop-audit",function(){a&&(o.scoreDisplayMode=r.SCORING_MODES.NOT_APPLICABLE),o.emitFinished(),s={}})},e.exports=o},function(e,t,n){const i=n(0),r=n(2),o=n(1),a=new o({meta:{id:"large-image",passedTitle:"合理控制图片的大小",failedTitle:"存在图片太大而有效显示区域较小",description:"图片太大会增加下载时间和内存的消耗，应根据显示区域大小合理控制图片大小",document:""},weight:4,scoringCategory:o.SCORING_CATEGORY.PERFORMANCE,headings:[{key:"url",text:"URL",type:"url"},{key:"size",text:"大小"},{key:"rect",text:"实际宽高"},{key:"display",text:"显示宽高"},{key:"page",text:"页面"}]});let s=!0,c={},l={};function u(e,t,n,i,o,s,c){a.addFailedItem({url:e,size:r.formatSize(t),rect:`${n} x ${i}`,display:`${o} x ${s}`,page:c},"url")}function d(){const e=Object.keys(l);e.length&&e.forEach(e=>{const t=l[e],n=t[0].width,i=t[0].height,r=t[1],o=t[2],a=Number(c[e]);if(!a)return;let s,d,f;for(f=10;f<=1e3;f+=10)if(n*i<=f*f){d=900*f;break}s=Math.sqrt(d/f/f),n*i>=1e4&&(s=3),r>n*s&&o>i*s?a>d&&u(e,a,r,o,n,i,t[3]):a>1.5*d&&u(e,a,r,o,n,i,t[3])})}a.init=function(){i.on("network-event",function(e){const t=e.details;if("image"===t.type&&"onHeadersReceived"===e.eventName){const e=t.responseHeaders;for(let n=0;n<e.length;n++){let i=e[n];if("content-length"===i.name.toLowerCase()){c[t.url]=i.value;break}}0,d()}}),i.on("all-webview-image",function(e){s&&Object.keys(e.imgsInfo).length&&(s=!1);for(let t in e.imgsInfo)if(/^http/.test(t))if(l[t]){const n=e.imgsInfo[t][0],i=l[t][0];let r=1.5;i.width*i.height<=2500?r=3:i.width*i.height<=1e4&&(r=2),n.width*n.height>i.width*i.height&&n.width*n.height<=i.width*i.height*r*r&&(l[t]=e.imgsInfo[t],a.removeFailedItem("url",t))}else l[t]=e.imgsInfo[t];d()}),i.on("rebuild",function(){s=!0,c={},l={}}),i.on("stop-audit",function(){s&&(a.scoreDisplayMode=o.SCORING_MODES.NOT_APPLICABLE),a.emitFinished(),c={},l={}})},e.exports=a},function(e,t,n){const i=n(0),r=(n(2),n(1)),o=1e3,a=20;let s=[],c=[],l=0,u={},d=null;const f=new r({meta:{id:"too-much-image-request",passedTitle:"避免短时间内发起太多的图片请求",failedTitle:"存在短时间内发起太多的图片请求",description:"短时间内发起太多图片请求会触发浏览器并行加载的限制，可能导致图片加载慢，用户一直处理等待。应该合理控制数量，可考虑使用雪碧图技术或在屏幕外的图片使用懒加载",document:"https://developers.weixin.qq.com/miniprogram/dev/component/image.html"},weight:5,failedSummaryGen(){return`最高1秒内请求了 ${this.failedItems.reduce((e,t)=>Math.max(e,t.count),0)} 次图片`},scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,headings:[{key:"count",text:"数量（每秒）",style:"min-width: 30px;"},{key:"url",text:"URL"},{key:"page",text:"页面"}]});function p(e,t,n){for(;t<n;t++){let n=e[t];if(u[n]&&u[n][3])return u[n][3]}return""}function m(e,t){f.addFailedItem({count:t-e,url:c.slice(e,t).map(e=>e.slice(0,100)+(e.length>100?"...":"")).join("<br>"),page:p(c,e,t)}),s=[],c=[]}f.init=function(){i.on("network-event",function(e){const t=e.details;"image"===t.type&&"onBeforeRequest"===e.eventName&&setTimeout(function(){const e=l?t.timeStamp-l:0;l=t.timeStamp,e>o?(s=[],c=[]):(s.push(e),c.push(t.url)),s.length>a&&function(){for(let e=0,t=s.length;e<t;e++){let n=0,i=e;for(;n<o&&i<t;)n+=s[i],i++;if(n<o)return void(i-e>=a&&(clearTimeout(d),d=setTimeout(function(){m(e,i)},o-n)));if(i-e>=a){m(e,i);break}}}()},1e3)}),i.on("all-webview-image",function(e){u=e.imgsInfo}),i.on("rebuild",function(){u={}}),i.on("stop-audit",function(){f.emitFinished(),u={}})},e.exports=f},function(e,t,n){const i=n(0),r=n(1),o=(n(2),1e3),a=10;let s=[],c=[],l=0,u={},d=null;const f=new r({meta:{id:"too-much-request",passedTitle:"避免短时间内发起太多的请求",failedTitle:"存在短时间内发起太多的请求",description:"短时间内发起太多请求会触发小程序并行请求数量的限制，同时太多请求也可能导致加载慢等问题，应合理控制请求数量，甚至做请求的合并等",document:""},weight:5,failedSummaryGen(){return`最高1秒内发起了 ${this.failedItems.reduce((e,t)=>Math.max(e,t.count),0)} 次请求`},scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,headings:[{key:"count",text:"数量（每秒）",style:"min-width: 30px;"},{key:"url",text:"URL"},{key:"page",text:"页面"}]});function p(e,t,n){for(;t<n;t++){let n=e[t];if(u[n])return u[n]}return""}function m(e,t){f.addFailedItem({count:t-e,url:c.slice(e,t).map(e=>e.slice(0,100)+(e.length>100?"...":"")).join("<br>"),page:p(c,e,t)}),s=[],c=[]}f.init=function(){i.on("network-event",function(e){const t=e.details;"appservice"!==e.type||"xmlhttprequest"!==t.type&&"xhr"!==t.type||"onBeforeRequest"!==e.eventName||setTimeout(function(){const e=l?t.timeStamp-l:0;l=t.timeStamp,e>o?(s=[],c=[]):(s.push(e),c.push(t.url)),s.length>a&&function(){for(let e=0,t=s.length;e<t;e++){let n=0,i=e;for(;n<o&&i<t;)n+=s[i],i++;if(n<o)return void(i-e>=a&&(clearTimeout(d),d=setTimeout(function(){m(e,i)},o-n)));if(i-e>=a){m(e,i);break}}}()},1e3)}),i.on("wx-request",function(e){u[e.url]=e.page}),i.on("rebuild",function(){u={}}),i.on("stop-audit",function(){f.emitFinished(),u={}})},e.exports=f},function(e,t,n){const i=n(0),r=n(2),o=n(1),a=new o({meta:{id:"set-data-large",passedTitle:"避免 setData 的数据过大",failedTitle:"存在 setData 的数据过大",description:"由于小程序运行逻辑线程与渲染线程之上，setData的调用会把数据从逻辑层传到渲染层，数据太大会增加通信时间",document:"https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips.html"},weight:6,scoringCategory:o.SCORING_CATEGORY.PERFORMANCE,headings:[{key:"size",text:"数据大小",type:"none"},{key:"vars",text:"变量名"},{key:"stack",text:"调用堆栈",type:"stack"},{key:"position",text:"调用组件"},{key:"page",text:"页面"}]});a.init=function(){i.on("set-data-large",function(e){a.addFailedItem({size:r.formatSize(e.size),page:e.page,position:e.position,stack:e.stack,vars:e.vars})}),i.on("stop-audit",function(){a.emitFinished()})},e.exports=a},function(e,t,n){const i=n(0),r=n(1),o=new r({meta:{id:"set-data-freq",passedTitle:"避免 setData 的调用过于频繁",failedTitle:"存在 setData 的调用过于频繁",description:"setData接口的调用涉及逻辑层与渲染层间的线程通过，通信过于频繁可能导致处理队列阻塞，界面渲染不及时而导致卡顿，应避免无用的频繁调用",document:"https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips.html"},status:"passed",failedSummaryGen(){return`1秒内执行了 ${this.failedItems.reduce((e,t)=>Math.max(e,t.times),0)} 次setData`},scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,weight:6,headings:[{key:"times",text:"每秒调用次数",type:"none"},{key:"stack",text:"调用堆栈",type:"stack"},{key:"page",text:"页面"}],details:[]});o.init=function(){i.on("set-data-freq",function(e){o.addFailedItem(e)}),i.on("start-audit",function(){o.clearFailedItems()}),i.on("stop-audit",function(){o.emitFinished()})},e.exports=o},function(e,t,n){const i=n(0),r=n(2),o=n(1),a=new o({meta:{id:"set-data-no-binding",passedTitle:"避免将未绑定在 WXML 的变量传入 setData",failedTitle:"存在将未绑定在 WXML 的变量传入 setData",description:"setData操作会引起框架处理一些渲染界面相关的工作，一个未绑定的变量意味着与界面渲染无关，传入setData会造成不必要的性能消耗",document:"https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips.html"},weight:3,scoringCategory:o.SCORING_CATEGORY.PERFORMANCE,headings:[{key:"name",text:"变量名"},{key:"stack",text:"调用堆栈",type:"stack"},{key:"page",text:"页面"}]});let s=[],c=[];a.init=function(){i.on("set-data-no-binding",function(e,t){"appservice"!==t?s=r.unique(s.concat(e.vars)):c.push(e)}),i.on("rebuild",function(){s=[],c=[]}),i.on("stop-audit",function(){c.forEach(e=>{!function(e){e.vars.forEach(t=>{const n=t.match(/^[a-zA-Z\$_][a-zA-Z\d_]*/);n&&n[0]&&-1===s.indexOf(n[0])&&a.addFailedItem({name:t,position:e.position,page:e.page,stack:e.stack},["name","page","stack"])})}(e)}),a.emitFinished(),s=[],c=[]})},e.exports=a},function(e,t,n){const i=n(0),r=(n(2),n(1)),o=new r({meta:{id:"small-response-area",passedTitle:"合理设置可点击元素的响应区域大小",failedTitle:"存在可点击元素的响应区域过小",description:"我们应该合理地设置好可点击元素的响应区域大小，如果过小会导致用户很难点中，体验很差",document:""},weight:3,scoringCategory:r.SCORING_CATEGORY.ACCESSIBILITY,headings:[{key:"area",text:"响应区域"},{key:"comp",text:"监听的组件"},{key:"page",text:"页面"}]});o.init=function(){i.on("small-response-area",function(e){o.addFailedItem({area:`宽: ${e.rect.width}, 高: ${e.rect.height}`,comp:e.identifier,page:e.page})}),i.on("stop-audit",function(){o.emitFinished()})},e.exports=o},function(e,t,n){const i=n(0),r=(n(2),n(1)),o=new r({meta:{id:"render-long-time",passedTitle:"避免渲染界面的耗时过长的情况",failedTitle:"存在渲染界面的耗时过长的情况",description:"渲染界面的耗时过长会让用户觉得卡顿，体验较差，出现这一情况时，需要校验下是否同时渲染的区域太大",document:""},scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,failedSummaryGen(){this.failedItems;return`最长渲染时间 ${this.failedItems.reduce((e,t)=>Math.max(e,+t.cost.replace(/ms$/,"")),0)} ms`},weight:6,headings:[{key:"cost",text:"耗时"},{key:"type",text:"类型"},{key:"page",text:"页面"}]});o.init=function(){i.on("render-long-time",function(e){o.addFailedItem({cost:e.cost+"ms",type:"firstRenderTime"===e.type?"初始渲染":"setData渲染",page:e.page})}),i.on("stop-audit",function(){o.emitFinished()})},e.exports=o},function(e,t,n){const i=n(0),r=(n(2),n(1)),o=new r({meta:{id:"execute-long-time",passedTitle:"避免执行脚本的耗时过长的情况",failedTitle:"存在执行脚本的耗时过长的情况",description:"执行脚本的耗时过长会让用户觉得卡顿，体验较差，出现这一情况时，需要确认并优化脚本的逻辑",document:""},weight:7,scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,failedSummaryGen(){let e=this.failedItems;return`最长执行时间 ${Math.max(e.map(e=>+e.cost.replace(/ms$/,"")))} ms`},headings:[{key:"method",text:"方法名"},{key:"cost",text:"耗时"},{key:"page",text:"页面"}]});o.init=function(){i.on("execute-long-time",function(e){const t=e.extend.match(/at .+ page (.+) function/);o.addFailedItem({cost:e.cost+"ms",method:t&&t[1]||"",page:e.page})}),i.on("stop-audit",function(){o.emitFinished()})},e.exports=o},function(e,t,n){const i=n(0),r=(n(2),n(1)),o=new r({meta:{id:"timer-no-recycle",passedTitle:"避免定时器未跟随页面回收",failedTitle:"存在定时器未跟随页面回收",description:"定时器是全局的，并不是跟页面绑定的，当小程序从一个页面路由到另一个页面之后，前一个页面定时器应注意手动回收",document:""},weight:0,failedSummaryGen(){return`${this.failedItems.length} 个未跟随页面回收的定时器`},scoreDisplayMode:r.SCORING_MODES.NOT_ACCURATE,scoringCategory:r.SCORING_CATEGORY.BEST_PRACTICE,headings:[{key:"name",text:"定时器"},{key:"stack",text:"调用堆栈",type:"stack"},{key:"page",text:"页面"}]});let a=!0;o.init=function(){i.on("timer-no-recycle",function(e){o.addFailedItem(e)}),i.on("timer-no-recycle-applicable",function(){a=!1}),i.on("rebuild",function(){a=!0}),i.on("stop-audit",function(){a&&(o.scoreDisplayMode=r.SCORING_MODES.NOT_APPLICABLE),o.emitFinished()})},e.exports=o},function(e,t,n){const i=n(0),r=(n(2),n(1)),o=new r({meta:{id:"color-contrast",passedTitle:"文字颜色与背景色搭配较好，适宜的颜色对比度更方便用户阅读",failedTitle:"文字颜色与背景色搭配较差，两者颜色过于接近会让用户无法或难以阅读",description:"文字颜色与背景色需要搭配得当，适宜的颜色对比度可以让用户更好地阅读，提升小程序的用户体验",document:"https://developers.weixin.qq.com/miniprogram/design/index.html"},weight:0,scoreDisplayMode:r.SCORING_MODES.NOT_ACCURATE,scoringCategory:r.SCORING_CATEGORY.ACCESSIBILITY,headings:[{key:"area",text:"显示区域"},{key:"text",text:"文字"},{key:"bgColor",text:"背景颜色"},{key:"page",text:"页面"}]});o.init=function(){let e=[],t=[],n=[];function r(e,t){const n=a(e),i=a(t);return(Math.max(n,i)+.05)/(Math.min(n,i)+.05)}function a(e){let t={};return t._red=e[0]/255,t._green=e[1]/255,t._blue=e[2]/255,.2126*(t._red<=.03928?t._red/12.92:Math.pow((t._red+.055)/1.055,2.4))+.7152*(t._green<=.03928?t._green/12.92:Math.pow((t._green+.055)/1.055,2.4))+.0722*(t._blue<=.03928?t._blue/12.92:Math.pow((t._blue+.055)/1.055,2.4))}i.on("color-contrast",function(i){!function(i){let o=[];for(let a of i.textInfo){let{fontSize:s,fontWeight:c,color:l,backgroundColor:u,parent:d}=a;s=parseFloat(s.substring(0,s.indexOf("px"))),c="bold"===c?700:"normal"===c?400:parseInt(c)||400;const f=r(l,u);if(f<(s>=24||s>=96/72*14&&c>=700?3:4.5)){o.push({contrastRatio:f,info:a});let r=e.indexOf(d);r>-1?-1===n.indexOf(a.node)&&(t[r].push({contrastRatio:f,info:a}),n.push(a.node)):(e.push(d),t.push([{contrastRatio:f,page:i.page,info:a}]),n.push(a.node))}}}(i)}),i.on("rebuild",function(){e=[],t=[],n=[]}),i.on("stop-audit",function(){for(let n=0;n<e.length;n++){let i={area:e[n],text:"",bgColor:`<div style="background-color:${t[n][0].info.backgroundColor}; width:inherit; height:20px; border: 1px solid black; text-align: center;"></div>`,page:t[n][0].page};for(let e=0;e<t[n].length&&e<3;e++)i.text+=`${t[n][e].info.node.slice(0,5)}`,i.text+=t[n][e].info.node.length>5?"...":"",i.text+=0===e&&t[n].length>1||1===e&&t[n].length>2?"、":"";o.addFailedItem(i)}o.emitFinished(),e=[],t=[],n=[]})},e.exports=o},function(e,t,n){const i=n(0),r=(n(2),n(1)),o=n(3),a=new r({meta:{id:"ele-active-state",passedTitle:"避免使用 css ':active' 伪类来实现点击态",failedTitle:"存在使用 css ':active' 伪类来实现点击态",description:"使用 css ':active' 伪类来实现点击态，很容易触发，并且滚动或滑动时点击态不会消失，体验较差。建议使用小程序内置组件的 'hover-*' 属性来实现",document:"https://developers.weixin.qq.com/miniprogram/dev/component/view.html"},weight:8,scoringCategory:r.SCORING_CATEGORY.ACCESSIBILITY,headings:[{key:"selector",text:"选择器"},{key:"file",text:"文件"},{key:"page",text:"页面"}]});let s=!0,c=[],l=[],u=!1,d=null;a.init=function(){function e(){let e=!0;for(let t of c)if(-1===l.indexOf(t)){e=!1;break}e&&(c=[],l=[],u||(s&&(a.scoreDisplayMode=r.SCORING_MODES.NOT_APPLICABLE),a.emitFinished(),u=!0))}i.on("page-info",function(t){c=t.pages,e()}),i.on("used-css",function(t){t.data.forEach(e=>{e.sel.indexOf(":active")>-1&&(a.addFailedItem({selector:e.sel,file:e.file,page:t.page}),s=!1)}),l.push(t.page),c.length&&e()}),i.on("start-audit",function(){u=!1,clearTimeout(d)}),i.on("ele-active-state-applicable",function(){s=!1}),i.on("rebuild",function(){s=!0,c=[],l=[]}),i.on("stop-audit",function(){d=setTimeout(function(){if(!u){s&&(a.scoreDisplayMode=r.SCORING_MODES.NOT_APPLICABLE),a.emitFinished(),u=!0;try{throw new Error("[ele-active-state] unexpected finish audit.")}catch(e){o.report(e)}}},5e3)})},e.exports=a},function(e,t,n){const i=n(0),r=(n(2),n(1)),o=new r({meta:{id:"use-https",passedTitle:"所有资源请求都建议使用 HTTPS",failedTitle:"所有资源请求都建议使用 HTTPS",description:"使用 HTTPS，可以让你的小程序更加安全，而 HTTP 是明文传输的，存在可能被篡改内容的风险",document:""},failedSummaryGen(){return`${this.failedItems.length} 个资源未使用 HTTPS`},scoringCategory:r.SCORING_CATEGORY.BEST_PRACTICE,weight:1,headings:[{key:"url",text:"URL",type:"url"},{key:"page",text:"页面"}]});o.init=function(){i.on("network-event",function(e){"onHeadersReceived"===e.eventName&&0===e.details.url.indexOf("http:")&&o.addFailedItem({url:e.details.url,page:""})}),i.on("stop-audit",function(){o.emitFinished()})},e.exports=o},function(e,t,n){const i=n(0),r=(n(2),n(1)),o=new r({meta:{id:"deprecated-api",passedTitle:"未发现使用废弃接口",failedTitle:"发现正在使用废弃接口",description:"使用即将废弃或已废弃接口，可能导致小程序运行不正常。一般而言，接口不会立即去掉，但保险起见，建议不要使用，避免后续小程序突然运行异常。",document:""},failedSummaryGen(){return`${this.failedItems.length} 个废弃接口调用`},scoringCategory:r.SCORING_CATEGORY.BEST_PRACTICE,weight:2,headings:[{key:"api",text:"组件/API"},{key:"stack",text:"调用栈",type:"stack"},{key:"page",text:"页面"}]});o.init=function(){i.on("deprecated-api",function(e){e.deprecateds.forEach(t=>{o.addFailedItem({api:t.api,page:e.page,stack:t.stack||[]})})}),i.on("start-audit",function(){o.clearFailedItems()}),i.on("stop-audit",function(){o.emitFinished()})},e.exports=o},function(e,t,n){const i=n(0),r=(n(2),n(1)),o=new r({meta:{id:"image-ratio",passedTitle:"应让图片按原图宽高比例显示",failedTitle:"存在图片没有按原图宽高比例显示",description:"图片若没有按原图宽高比例显示，可能导致图片歪曲，不美观，甚至导致用户识别困难。可根据情况设置 image 组件的 mode 属性，以保持原图宽高比。",document:"https://developers.weixin.qq.com/miniprogram/dev/component/image.html"},weight:4,scoringCategory:r.SCORING_CATEGORY.ACCESSIBILITY,headings:[{key:"img",text:"图片地址",type:"url"},{key:"display",text:"显示宽高"},{key:"actual",text:"原图宽高"},{key:"page",text:"页面"}]});let a=!0;o.init=function(){i.on("all-webview-image",function({imgsInfo:e}){const t=Object.keys(e);t.length&&(a&&(a=!1),t.forEach(t=>{const n=e[t],i=n[0].width,r=n[0].height,a=n[1],s=n[2],c=n[3],l=n[4];(!l||"scaleToFill"===l)&&Math.abs(r/i-s/a)>.15&&o.addFailedItem({img:t,display:`${i} x ${r}`,actual:`${a} x ${s}`,page:c})}))}),i.on("rebuild",function(){a=!0}),i.on("stop-audit",function(){a&&(o.scoreDisplayMode=r.SCORING_MODES.NOT_APPLICABLE),o.emitFinished()})},e.exports=o},function(e,t,n){const i=n(0),r=(n(2),n(1)),o=new r({meta:{id:"dom-size",passedTitle:"避免过大的 WXML 节点数目",failedTitle:"使用了过大的 WXML 节点数目",description:"建议一个页面使用少于 1000 个 WXML 节点，节点树深度少于 30 层，子节点数不大于 60 个。一个太大的 WXML 节点树会增加内存的使用，样式重排时间也会更长。",document:""},scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,failedSummaryGen(){let e=[],t=this.failedItems,n=t.reduce((e,t)=>Math.max(e,t.count),0),i=t.reduce((e,t)=>Math.max(e,t.depth),0),r=t.reduce((e,t)=>Math.max(e,t.maxChildren),0);return n>1e3&&e.push("最大节点数超过1000个"),i>30&&e.push("最大深度超过30"),r>60&&e.push("最大子节点数超过60"),e.join("，")},weight:6,headings:[{key:"count",text:"节点总数"},{key:"depth",text:"节点深度"},{key:"maxChildren",text:"最大子节点数"},{key:"page",text:"页面"}]});o.init=function(){i.on("dom-size",function(e){(e.count>1e3||e.depth>30||e.maxChildren>60)&&o.addFailedItem(e,"page")}),i.on("stop-audit",function(){o.emitFinished()})},e.exports=o},function(e,t,n){const i=n(0),r=(n(2),n(7),n(1)),o=n(3),a=new r({meta:{id:"overflow-scroll",passedTitle:"滚动区域可开启惯性滚动以增强体验",failedTitle:"滚动区域没有开启惯性滚动",description:"惯性滚动会使滚动比较顺畅，在安卓下默认有惯性滚动，而在 iOS 下需要额外设置 `-webkit-overflow-scrolling: touch` 的样式",document:""},weight:8,scoringCategory:r.SCORING_CATEGORY.ACCESSIBILITY,headings:[{key:"selector",text:"选择器"},{key:"file",text:"文件"},{key:"page",text:"页面"}]});let s=!0,c=[],l=[],u=[],d=!1,f=null;function p(e,t){let n=!1,i=!1,r=0,o="",a=!1,s=e;for(;s>=0;){let c=t[s],l=t[s-1];if(n)"*"===c&&"/"===l&&(n=!1,s--);else if("/"===c&&"*"===l)n=!0,s--;else if(i){if("}"===c||"\n"===c||"{"===c||0===s){i=!1,o=t.substring(s+1,r).trim();break}}else"{"===c&&(i=!0,r=s,a=/-webkit-overflow-scrolling\s*:\s*touch/.test(t.substring(s,e)));s--}for(n=!1,s=e;!a&&s<t.length;){let i=t[s],r=t[s+1];if(n)"*"===i&&"/"===r&&(n=!1,s++);else if("/"===i&&"*"===i)n=!0,s++;else if("}"===i){a=/-webkit-overflow-scrolling\s*:\s*touch/.test(t.substring(e,s));break}s++}return a?null:o}function m(){let e=!0;for(let t of l)if(-1===u.indexOf(t)){e=!1;break}e&&(l=[],u=[],c=[],d||(s&&(a.scoreDisplayMode=r.SCORING_MODES.NOT_APPLICABLE),a.emitFinished(),d=!0))}a.init=function(){i.on("page-info",function(e){l=e.pages,m()}),i.on("get-webview-styles",e=>{e.data.forEach(e=>{!function(e,t){const n=/overflow[^:]*\:\s*(scroll|auto)/g;let i;for(;i=n.exec(e);){let n=p(i.index,e);n&&c.push({sel:n,path:t}),s&&(s=!1)}}(e.content,e.path)})}),i.on("used-css",function(e){e.data.forEach(t=>{t.file&&c.forEach(n=>{n.sel===t.sel&&n.path===t.file&&a.addFailedItem({selector:t.sel,file:t.file,page:e.page})})}),u.push(e.page),l.length&&m()}),i.on("start-audit",function(){d=!1,clearTimeout(f)}),i.on("rebuild",function(){s=!0,l=[],u=[],c=[]}),i.on("stop-audit",function(){f=setTimeout(function(){if(!d){s&&(a.scoreDisplayMode=r.SCORING_MODES.NOT_APPLICABLE),a.emitFinished(),d=!0;try{throw new Error("[overflow-scroll] unexpected finish audit.")}catch(e){o.report(e)}}},5e3)})},e.exports=a},function(e,t,n){const i=n(0),r=(n(2),n(1)),o=new r({meta:{id:"first-meaningful-time",passedTitle:"避免首屏时间太长的情况",failedTitle:"存在首屏时间太长的情况",description:"首屏时间是指用户开始看到第一屏的内容的时间，首屏时间太长会导致用户长时间看到的都是白屏，会一直等待有意义的内容展示出来。出现这一情况，应仔细检查这个过程都有哪个操作，一般来说，可能是请求数据的时间太长，或者是一次渲染的数据太大导致渲染时间太长。",document:""},scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,failedSummaryGen(){let e=this.failedItems;return`渲染时间高达 ${Math.max(...e.map(e=>e.time))} ms`},weight:6,headings:[{key:"page",text:"页面"},{key:"time",text:"首屏时间"}]});o.init=function(){i.on("first-meaningful-time",function(e){e.time>5e3&&(o.status="failed",e._style="color: red;"),o.addItem(e)}),i.on("rebuild",function(){}),i.on("stop-audit",function(){o.emitFinished()})},e.exports=o},function(e,t,n){const i=n(0),r=(n(2),n(1)),o=new r({meta:{id:"iphonex-compatibility",passedTitle:"固定底部的可点击组件都在iPhone X安全区域内",failedTitle:"发现固定底部的可点击组件可能不在iPhone X安全区域内",description:"底部的可交互组件如果渲染在iPhone X的安全区域外，容易误触Home Indicator",document:""},scoringCategory:r.SCORING_CATEGORY.ACCESSIBILITY,weight:3,headings:[{key:"component",text:"组件"},{key:"id",text:"id"},{key:"className",text:"className"},{key:"page",text:"页面"}]});o.init=function(){i.on("iphonex-compatibility",function(e){o.addFailedItem(e,"componentId")}),i.on("start-audit",function(){o.clearFailedItems()}),i.on("stop-audit",function(){o.emitFinished()})},e.exports=o},function(e,t,n){const i=n(0),r=n(2),o=n(1),a=n(3),s=new o({meta:{id:"unused-css",passedTitle:"避免引入大量未被使用的样式",failedTitle:"wxss 覆盖率较低，存在大量未使用的样式",description:"我们应该按需引入 wxss 资源，如果小程序中存在大量未使用的样式，会增加小程序包体积大小，从而在一定程度上影响加载速度",document:""},weight:0,failedSummaryGen(){let e=Math.round(this.failedItems.map(e=>+e.savings.split(" ")[0]).reduce((e,t)=>e+t,0)),t=0;for(;e>1024;)t++,e=Math.round(e/1024);return`大约可以节省 ${e} ${["KB","MB","GB"][t]}`},scoreDisplayMode:o.SCORING_MODES.NOT_ACCURATE,scoringCategory:o.SCORING_CATEGORY.BEST_PRACTICE,headings:[{key:"file",text:"文件名"},{key:"original",text:"原文件大小"},{key:"savings",text:"可节省"}]});let c=[],l=[],u=[],d=[],f=[],p=null,m=!1;function h(){let e=!0;for(let t of d)if(f.indexOf(t)<0)return void(e=!1);e&&(c=[],l=[],d=[],f=[],u=[],m||(s.emitFinished(),m=!0))}s.init=function(){i.on("page-info",function(e){d=e.pages,h()}),i.on("unused-css",function(e){e&&void 0!==e.page&&(!function(e){const t=s.failedItems;e.cssUsage.forEach(e=>{const n=c.indexOf(e.file),i=(e.savings/1e3).toFixed(1),o=(e.original/1e3).toFixed(1),a=Math.round(100*e.savings/e.original);if(i<2&&u.push(e.file),n>-1){if(i<2)c.splice(n,1),l.splice(n,1),t.splice(n,1);else if(i<l[n]){if(l[n]=i,void 0===t[n])return void r.log(e.file,n,"undefined!!",c,l,s.details);t[n].savings=`${i} KB(${a})%`}}else i>=2&&u.indexOf(e.file)<0&&(c.push(e.file),l.push(i),t.push({file:e.file,original:`${o} KB`,savings:`${i} KB(${a})%`}))}),s.addFailedItems(t)}(e),f.push(e.page),d.length>0&&h())}),i.on("start-audit",function(){m=!1,clearTimeout(p)}),i.on("rebuild",function(){l=[],c=[],f=[],u=[]}),i.on("stop-audit",function(){m?s.emitFinished():p=setTimeout(function(){if(!m){m=!0,s.emitFinished();try{throw new Error("[unused-css] unexpected finish audit.")}catch(e){a.report(e)}}},5e3)})},e.exports=s},function(e,t,n){const i=n(0),r=n(2),o=n(7),a=n(1),s=new a({meta:{id:"unused-page",passedTitle:"避免将不可能被访问到的页面打包在小程序包里",failedTitle:"存在将不可能被访问到的页面打包在小程序包里",description:"小程序的包大小会影响加载时间，应该尽量控制包体积大小，避免将不会被使用的文件打包进去",document:""},weight:0,failedSummaryGen(){return`${this.failedItems.length} 个页面可能不会被访问到`},scoreDisplayMode:a.SCORING_MODES.NOT_ACCURATE,scoringCategory:a.SCORING_CATEGORY.BEST_PRACTICE,headings:[{key:"file",text:"文件"}]});let c=[],l="";function u(e){return e.replace(/(.*\/)?.*\..*$/,"$1")||"/"}function d(e){for(;e.match(/\/[^\/]+\/\.\./);)e=e.replace(/\/[^\/]+\/\.\./,"");for(;e.match(/\.\//);)e=e.replace(/\.\//,"");return e}function f(e,t){const n=e.filter(e=>-1===t.indexOf(e));s.addFailedItems(n.map(e=>({file:e})))}function p(e){if("running"!==r.status)return;if(0===c.length)return void setTimeout(function(){p(e)},1e3);const t=e.filter(e=>/\.wxml$/.test(e)).filter(e=>-1===c.indexOf(e.slice(1,-5)));if(!t.length)return;const n=c.map(e=>"/"+e+".wxml");let i=null,a=null;!function e(t,n){const i=[],r=t.length;let a=0;r===a&&n(i),t.forEach(t=>{o.readFile(t,t=>{const o=u(t.path);(function(e){const t=[];let n=!1,i=!1,r=!1,o=!1,a=!1,s=0,c=0;for(;c<e.length;){let l=e[c];if(n){if("-"===l&&"->"===e.substr(c+1,2)){n=!1,c+=3;continue}}else{if("<"===l&&"!--"===e.substr(c+1,3)){n=!0,c+=4;continue}if(i){if(">"===l)i=!1,r=!1,o=!1,a=!1;else if(a)l===a&&(a=!1,t.push(e.substring(s,c)));else if(o)" "!==l&&"'"!==l&&'"'!==l?o=!1:"'"!==l&&'"'!==l||(o=!1,s=c+1,a=l);else if(r)" "!==l&&"="!==l?r=!1:"="===l&&(o=!0);else if("src"===e.substr(c,3)){r=!0,c+=3;continue}}else{if("<"===l&&"import"===e.substr(c+1,6)){i=!0,c+=7;continue}if("<"===l&&"include"===e.substr(c+1,7)){i=!0,c+=8;continue}}}c++}return t})(t.content).forEach(e=>{"/"!==e[0]&&(e=d(o+e)),-1===i.indexOf(e)&&i.push(e)}),++a===r&&e(i,function(e){n(i.concat(e))})})})}(n,function(e){i=e,a&&f(t,a.concat(i))}),function e(t,n){const i=[],r=t.length;let a=0;r===a&&n(i),t.forEach(t=>{const s=t.replace(/\.wxml$/,".json");o.readFile(s,t=>{let o;try{o=JSON.parse(t.content)}catch(e){}o&&(Object.keys(o.usingComponents||{}).forEach(e=>{const t=o.usingComponents[e];let n=t;"/"!==n[0]&&(n=d(u(s)+t+".wxml")),i.push(n)}),++a===r&&e(i,function(e){n(i.concat(e))}))})})}(n,function(e){a=e,i&&f(t,a.concat(i))})}s.init=function(){i.on("stop-audit",function(){s.emitFinished()}),location.search.indexOf("runtime=1")>-1?s.scoreDisplayMode=a.SCORING_MODES.NOT_APPLICABLE:(i.on("get-files",p),i.on("appservice-onload",function(){o.readFile("/project.config.json",function(e){let t;try{t=JSON.parse(e.content)}catch(e){}t&&(l=t.miniprogramRoot?t.miniprogramRoot.replace(/\/$|$/,"/"):"",o.readFile(`/${l}app.json`,function(e){let t;try{t=JSON.parse(e.content)}catch(e){}t&&(c=t.pages.map(e=>l+e),(t.subPackages||[]).forEach(e=>{const t=e.pages.map(t=>l+e.root+"/"+t);c=c.concat(t)}),i.emit("get-pages",c.slice()))}))})}))},e.exports=s},function(e,t,n){const i=n(0),r=n(2),o=n(1),a=new o({meta:{id:"recomended-version",passedTitle:"未发现正在使用组件/API的最低支持版本高于线上最低基础库版本",failedTitle:"发现正在使用组件/API的最低支持版本高于线上最低基础库版本",description:"使用低版本不支持的组件或API可能导致小程序无法正常运行，推荐使用支持对应组件/API的最低或更高版本",document:"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html#%E8%AE%BE%E7%BD%AE%E6%9C%80%E4%BD%8E%E5%9F%BA%E7%A1%80%E5%BA%93%E7%89%88%E6%9C%AC"},failedSummaryGen(){return`使用了 ${this.failedItems.reduce((e,t)=>r.compareVersion(t.version,e)>0?t.version:e,"1.0.0")} 版本才支持的组件/API`},scoreDisplayMode:o.SCORING_MODES.NOT_APPLICABLE,scoringCategory:o.SCORING_CATEGORY.BEST_PRACTICE,weight:0,headings:[{key:"descriptor",text:"组件/API"},{key:"stack",text:"调用栈",type:"stack"},{key:"page",text:"页面"},{key:"version",text:"最低支持版本"}]});let s="1.0.0",c=[];i.on("min-public-lib-version",({minPublicLibVersion:e})=>{r.log(`min-public-lib-version ${e}`),s=e,a.scoreDisplayMode=o.SCORING_MODES.NOT_ACCURATE}),a.init=function(){i.on("recomended-version",({descriptor:e,version:t,page:n,stack:i})=>{r.log(`recomended-version ${e} ${t} ${n}`),c.push({descriptor:e,stack:i,version:t,page:n})}),i.on("start-audit",()=>{s="1.0.0",a.clearFailedItems(),c=[]}),i.on("stop-audit",()=>{a.addFailedItems(c.filter(e=>r.compareVersion(e.version,s)>=0),"descriptor"),a.emitFinished()})},e.exports=a},function(e,t,n){const i=n(0),r=n(1),o=new r({meta:{id:"download-fail",passedTitle:"所有下载请求应正常返回",failedTitle:"存在下载请求失败",description:"下载请求失败可能使小游戏缺失一些资源，影响游戏体验，应保证所有请求能够正常返回",document:""},weight:2,scoringCategory:r.SCORING_CATEGORY.BEST_PRACTICE,headings:[{key:"url",text:"URL"}]});o.init=function(){i.on("stop-audit",function(){o.emitFinished()}),i.on("wx-downloadfile-fail",function(e){o.addFailedItem({url:e})})},e.exports=o},function(e,t,n){const i=n(0),r=n(1),o=new r({meta:{id:"socket-fail",passedTitle:"所有 WebSocket 连接应保持正常",failedTitle:"存在 WebSocket 连接出现错误",description:"WebSocket 连接出现错误可能导致游戏中断，影响游戏体验，应让 WebSocket 保持连接",document:""},weight:1,scoringCategory:r.SCORING_CATEGORY.BEST_PRACTICE,headings:[{key:"url",text:"URL"}]});o.init=function(){i.on("stop-audit",function(){o.emitFinished()}),i.on("wx-socket-fail",function(e){o.addFailedItem({url:e})}),i.on("socket-state-change",function(e){"error"==e.state&&o.addFailedItem({url:e.url})})},e.exports=o},function(e,t,n){const i=n(0),r=n(1),o=new r({meta:{id:"download-long-time",passedTitle:"所有资源下载的请求耗时不应太长",failedTitle:"存在资源下载耗时过长的请求",description:"一般来说，游戏的界面渲染依赖资源，如果资源下载耗时太长，则会影响游戏的运行，应该避免资源下载的请求耗时太长",document:""},weight:3,scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,headings:[{key:"url",text:"URL"}]}),a=[];function s(e){return a.findIndex(t=>t.url==e)}o.init=function(){i.on("stop-audit",function(){o.emitFinished()}),i.on("wx-downloadfile-start",function(e){const t={url:e.url};a.push(t)}),i.on("network-event",function(e){if("onBeforeRequest"==e.eventName){const t=s(e.details.url);t>-1&&(a[t].startt=e.details.timeStamp)}else if("onCompleted"==e.eventName){const t=s(e.details.url);t>-1&&(a[t].endt=e.details.timeStamp,parseFloat(a[t].endt)-parseFloat(a[t].startt)>10&&o.addFailedItem({url:a[t].url}))}})},e.exports=o},function(e,t,n){const i=n(0),r=n(1),o=new r({meta:{id:"download-too-large",passedTitle:"下载网络资源的流量消耗不应过大",failedTitle:"存在下载网络资源的流量消耗过大的情况",description:"流量消耗太大，一方面在非 Wi-Fi 下对用户有造成损失的风险，另一方面也会引起电量消耗过快等，应采用压缩等手段降低流量消耗",document:""},weight:1,scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,headings:[{key:"url",text:"URL"}]});let a=0,s=0;o.init=function(){i.on("start-audit",function(){s=+new Date}),i.on("stop-audit",function(){o.emitFinished()}),i.on("downloadtask-headers-received",function(e){const t=e.data;if(200==t.statusCode){const e=(+new Date-s)/1e3;(a+=t.headers["Content-Length"]/1024)/e>=2048&&o.addFailedItem({url:t.url})}})},e.exports=o},function(e,t,n){const i=n(0),r=n(1),o=new r({meta:{id:"download-no-encoding",passedTitle:"网络资源下载的请求应开启压缩",failedTitle:"存在未压缩的资源下载请求",description:"网络资源下载的请求开启压缩后，能够减小传输数据的体积，既减少耗时又能节省流量",document:""},weight:1,scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,headings:[{key:"url",text:"URL"}]});o.init=function(){i.on("stop-audit",function(){o.emitFinished()}),i.on("downloadtask-headers-received",function(e){const t=e.data;200!=t.statusCode||t.headers["Content-Encoding"]||o.addFailedItem({url:t.url})})},e.exports=o},function(e,t,n){const i=n(0),r=n(1),o=new r({meta:{id:"request-flow-large",passedTitle:"网络请求的流量消耗不应过大",failedTitle:"存在网络请求的流量消耗过大的情况",description:"流量消耗太大，一方面在非 Wi-Fi 下对用户有造成损失的风险，另一方面也会引起电量消耗过快等，应采用压缩等手段降低流量消耗",document:""},weight:3,scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,headings:[{key:"url",text:"URL"}]});let a=0,s=0;o.init=function(){i.on("start-audit",function(){s=+new Date}),i.on("network-event",function(e){const t=e.details;if("onHeadersReceived"===e.eventName&&200==t.statusCode){const e=(+new Date-s)/1e3,n=t.responseHeaders.find(e=>"Content-Length"===e.name);n&&(a+=n.value/1024)/e>=2048&&o.addFailedItem({url:t.url})}}),i.on("stop-audit",function(){o.emitFinished()})},e.exports=o},function(e,t,n){const i=n(0),r=n(1),o=100,a=new r({meta:{id:"drawcall-too-much",passedTitle:"应尽量避免 draw call 过于频繁",failedTitle:"存在过于频繁的 draw call",description:"在游戏界面渲染中，draw call 的操作相对来说是比较耗时的，应采用合并等手段尽量减少 draw call",document:""},weight:5,scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,headings:[]});let s=[],c=null;a.init=function(){function e(){let e=+new Date;(s=s.filter(t=>t>e-1e3)).length>o&&a.addFailedItem({})}i.on("start-audit",function(){c=setInterval(()=>{e()},1e3)}),i.on("stop-audit",function(){clearInterval(c),a.emitFinished()}),i.on("canvas-drawcall",function(){s.push(+new Date),e()})},e.exports=a},function(e,t,n){const i=n(0),r=n(1),o=100,a=new r({meta:{id:"triangles-faces",passedTitle:"小游戏内不存在过多的trianglesFaces",failedTitle:"存在过多的trianglesFaces",description:"小游戏内trianglesFaces应该尽可能少",document:""},weight:1,scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,headings:[]});let s=[],c=null;function l(){let e=+new Date;(s=s.filter(t=>t>e-1e3)).length>o&&a.addFailedItem({})}a.init=function(){i.on("start-audit",function(){c=setInterval(()=>{l()},1e3)}),i.on("stop-audit",function(){clearInterval(c),a.emitFinished()}),i.on("canvas-trianglesFaces",function(e){let t=e/3;for(let e=0;e<t;e++)s.push(+new Date);l()})},e.exports=a},function(e,t,n){const i=n(0),r=n(1),o=20,a=5;let s=99999,c=0,l=0,u=0;const d=new r({meta:{id:"fps",passedTitle:"应尽量让画面渲染的 FPS 保持较高的数值",failedTitle:"发现画面渲染的 FPS 较低",description:"当画面渲染的 FPS 保持跟屏幕刷新率（一般是 60 帧每秒）基本一致时，画面看起来会显示很流畅，若 FPS 较低，则会出现卡顿等现象，影响游戏体验",document:""},weight:5,scoringCategory:r.SCORING_CATEGORY.PERFORMANCE,headings:[{key:"minFps",text:"最低FPS值"},{key:"maxFps",text:"最高FPS值"},{key:"avgFps",text:"平均FPS值"}]});let f=[],p=null,m=0;d.init=function(){i.on("start-audit",function(){p=setInterval(()=>{!function(){let e=+new Date;0!=(f=f.filter(t=>t>e-1e3)).length&&f.length<o?m++:m=0;m>=a&&d.addFailedItem({});0!=f.length&&f.length<s&&(s=f.length);f.length>c&&(c=f.length);l+=f.length,u++,d.addDescItem({minFps:s,maxFps:c,avgFps:parseInt(l/u)})}()},1e3)}),i.on("stop-audit",function(){clearInterval(p),d.emitFinished()}),i.on("canvas-requestanimationframe",function(){f.push(+new Date)})},e.exports=d},function(e){e.exports=JSON.parse('{"version":"0.0.48","manifest_version":"0.0.1","name":"Audits","main":"./index.html","devtools":true,"devtools_type":["miniprogram","game"]}')},function(e,t,n){e.exports=function(){return new Worker(n.p+"948b076ddd3afd4d2cf0.worker.js")}},function(e,t,n){"use strict";n.r(t);var i=n(4),r=i.a.component("report-viewer",{template:'<div>\n  <div class="audit-result-hd">\n    <div class="audit-result-summary">\n      <div class="audit-result-summary–primary">\n        <h3 class="audit-title">体验评分</h3>\n        <p class="audit-result-desc">\n          <span>设备类型：{{envInfo.deviceName}}</span>\n          <span>网络类型：{{envInfo.networkType}}</span>\n          <span>基础库版本：{{envInfo.libVersion}}</span>\n        </p>\n      </div>\n      <div class="audit-result-summary-extra">\n        <p><a @click="reset">清空体验评分</a></p>\n        <div>\n          <span class="audit-icon-color-remark">\n            <i class="audit-icon-dot-red"></i>\n            <span>0 - 59</span>\n          </span>\n          <span class="audit-icon-color-remark">\n            <i class="audit-icon-dot-yellow"></i>\n            <span>60 - 89</span>\n          </span>\n          <span class="audit-icon-color-remark">\n            <i class="audit-icon-dot-green"></i>\n            <span>90 - 100</span>\n          </span>\n        </div>\n      </div>\n    </div>\n    <div class="audit-result-score">\n      <div class="audit-score-item">\n        <div :class="[\'audit-score-item-icon\', \'audit-score-item-icon-\' + getScoreColor(auditsReport.result.score)]">\n          <svg xmlns="http://www.w3.org/2000/svg" width="64px" height="64px" viewBox="0 0 14 14">\n            <circle class="audit-score-item-icon-circle-bg"></circle>\n            <circle class="audit-score-item-icon-circle" cx="7" cy="7" r="6" fill="none" stroke-width="1"\n              :style="getStrokeStyle(auditsReport.result.score || 0, 37.7)" transform="rotate(-90 7 7)"></circle>\n          </svg>\n          <span class="audit-score-value">{{auditsReport.result.score}}</span>\n        </div>\n        <div class="audit-score-item-desc">总分</div>\n      </div>\n      <div v-for="category in auditsReport.result.categories" :key="category.type" class="audit-score-item">\n        <div :class="[\'audit-score-item-icon\', \'audit-score-item-icon-\' + getScoreColor(category.score.num)]">\n          <svg xmlns="http://www.w3.org/2000/svg" width="64px" height="64px" viewBox="0 0 14 14">\n            <circle class="audit-score-item-icon-circle-bg"></circle>\n            <circle class="audit-score-item-icon-circle" cx="7" cy="7" r="6" fill="none" stroke-width="1" stroke="#11E299"\n              :style="getStrokeStyle(category.score.num || 0, 37.7)" transform="rotate(-90 7 7)"></circle>\n          </svg>\n          <span class="audit-score-value">{{category.score.num}}</span>\n        </div>\n        <div class="audit-score-item-desc">{{category.text}}</div>\n      </div>\n    </div>\n  </div>\n  <div class="audit-result-bd">\n    <div v-for="category in auditsReport.result.categories" :key="category.type" class="audit-result-group">\n      <div class="audit-result-group-hd">\n        <h3 :class="[\'audit-result-group-title\', \'audit-result-group-title-\' + getScoreColor(category.score.num)]">{{category.text}} <span\n            class="audit-result-group-score">{{category.score.num}}</span></h3>\n        <p class="audit-result-group-desc">{{category.description}}</p>\n      </div>\n      <div class="audit-result-group-bd">\n        <details v-if="getCategoryTasks(category.type, \'failed\').length" class="audit-result-items" open>\n          <summary class="audit-result-item-summary">\n            <p class="audit-result-item-summary-content">没通过</p>\n            <span>{{getCategoryTasks(category.type, \'failed\').length}} 项&nbsp;</span>\n            <i class="ui-icon-arrow-down-o"></i>\n          </summary>\n          <div>\n            <details open v-for="(item,index) in getCategoryTasks(category.type, \'failed\')" v-if="ignoreTasks.indexOf(item.meta.id) == -1" :key="item.meta.id">\n              <summary class="audit-result-item">\n                <p class="audit-result-item-content">{{index + 1}} {{item.meta.failedTitle}} <a v-if="item.showIgnore" href="javascript:;" @click.prevent="ignoreTask(item.meta.id)">忽略</a></p>\n                <p class="audit-result-item-ext"><span v-if="item.failedSummary">{{item.failedSummary}}</span><i\n                    class="ui-icon-arrow-down-o"></i></p>\n              </summary>\n              <details class="audit-result-item-detail">\n                <summary>{{item.meta.description}}&nbsp;<a v-if="item.meta.document" href="javascript:;"\n                    @click="open(item.meta.document)">了解更多</a><i\n                    class="ui-icon-arrow-down-o"></i></summary>\n                <div>\n                  <table class="audit-result-table">\n                    <thead>\n                      <th v-for="head in item.headings" :key="head.key">{{head.text}}</th>\n                    </thead>\n                    <tbody>\n                      <tr v-for="detail in item.details">\n                        <td v-for="head in item.headings" :key="head.key">\n                          <p v-if="head.type == \'url\'"><a href="javascript:;" :title="detail[head.key]">{{detail[head.key]}}</a></p>\n                          <p v-else-if="head.type == \'stack\'" v-for="stack in detail[head.key]">at {{stack.func}} (<a href="javascript:;"\n                              :title="[stack.file, stack.line, stack.column].join(\':\')"\n                              @click="openEditor(stack.file, stack.line, stack.column)">{{[stack.file, stack.line, stack.column].join(\':\')}}</a>)</p>\n                          <p :title="detail[head.key]" v-else>{{detail[head.key]}}</p>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </details>\n            </details>\n          </div>\n        </details>\n        <details v-if="getCategoryTasks(category.type, \'passed\') && getCategoryTasks(category.type, \'passed\').length" class="audit-result-items">\n          <summary class="audit-result-item-summary">\n            <p class="audit-result-item-summary-content">已通过</p>\n            <span>{{getCategoryTasks(category.type, \'passed\').length}} 项&nbsp;</span>\n            <i class="ui-icon-arrow-down-o"></i>\n          </summary>\n          <div>\n            <details v-for="(item, idx) in getCategoryTasks(category.type, \'passed\')">\n              <summary class="audit-result-item">\n                <p class="audit-result-item-content">{{idx + 1}} {{item.meta.passedTitle}}</p>\n                <p class="audit-result-item-ext"> <i class="ui-icon-arrow-down-o"></i>\n                </p>\n              </summary>\n              <div class="audit-result-item-detail">\n                <p>{{item.meta.description}}&nbsp;<a v-if="item.meta.document" href="javascript:;" @click="open(item.meta.document)">了解更多</a></p>\n              </div>\n            </details>\n          </div>\n        </details>\n      </div>\n    </div>\n    <div v-if="auditsReport.result.notApplicable && auditsReport.result.notApplicable.length">\n      <details class="audit-result-items">\n        <summary class="audit-result-item-summary">\n          <p class="audit-result-item-summary-content">不适用当前小程序</p>\n          <span>{{auditsReport.result.notApplicable.length}} 项&nbsp;</span>\n          <i class="ui-icon-arrow-down-o"></i>\n        </summary>\n        <div>\n          <details v-for="(item, idx) in auditsReport.result.notApplicable">\n            <summary class="audit-result-item">\n              <p class="audit-result-item-content">{{idx + 1}} {{item.meta.passedTitle}}</p>\n              <p class="audit-result-item-ext"> <i class="ui-icon-arrow-down-o"></i>\n              </p>\n            </summary>\n            <div class="audit-result-item-detail">\n              <p>{{item.meta.description}}&nbsp;<a v-if="item.meta.document" href="javascript:;" @click="open(item.meta.document)">了解更多</a></p>\n            </div>\n          </details>\n        </div>\n      </details>\n    </div>\n    <div v-if="ignoreTasksList && ignoreTasksList.length">\n        <details class="audit-result-items">\n          <summary class="audit-result-item-summary">\n            <p class="audit-result-item-summary-content">已忽略的规则</p>\n            <span>{{ignoreTasksList.length}} 项&nbsp;</span>\n            <i class="ui-icon-arrow-down-o"></i>\n          </summary>\n          <div>\n            <details v-for="(item, idx) in ignoreTasksList" :key="item.meta.id">\n              <summary class="audit-result-item">\n                <p class="audit-result-item-content">{{idx + 1}} {{item.meta.passedTitle}} <a href="javascript:;" @click.prevent="resetIgnoreTask(item.meta.id)">重置</a></p>\n                <p class="audit-result-item-ext"> <i class="ui-icon-arrow-down-o"></i>\n                </p>\n              </summary>\n              <div class="audit-result-item-detail">\n                <p>{{item.meta.description}}&nbsp;<a v-if="item.meta.document" href="javascript:;" @click="open(item.meta.document)">了解更多</a></p>\n              </div>\n            </details>\n          </div>\n        </details>\n      </div>\n  </div>\n</div>',props:["envInfo","auditsReport"],data:()=>({ignoreTasks:[]}),mounted(){try{const e=localStorage.getItem("ignore_tasks");this.ignoreTasks=e?JSON.parse(e):[]}catch(e){this.ignoreTasks=[]}},computed:{ignoreTasksList(){return this.auditsReport.result.tasks.filter(e=>-1!=this.ignoreTasks.indexOf(e.meta.id))}},methods:{getCategoryTasks(e,t){return this.auditsReport.result.tasks.filter(n=>"not-applicable"!=n.scoreDisplayMode&&(e==n.scoringCategory&&(!(this.ignoreTasks.indexOf(n.meta.id)>-1)&&("failed"==t?0==n.score:100==n.score))))},getStrokeStyle(e,t){const n=t*e/100;return{strokeDasharray:n+","+(t-n)}},openEditor(e,t,n){window.openEditor&&window.openEditor(e,t,n)},getStackText(e){let t=60-e.func.length,n=new RegExp("^(.{"+(e.file.length-t)+"})");return`${e.file.replace(n,"...")}:${e.line}:${e.column}`},getScoreColor:e=>e>=90?"green":e>=60?"yellow":"red",ignoreTask(e){-1==this.ignoreTasks.indexOf(e)&&(this.ignoreTasks.push(e),localStorage.setItem("ignore_tasks",JSON.stringify(this.ignoreTasks)))},resetIgnoreTask(e){this.ignoreTasks.indexOf(e)>-1&&(this.ignoreTasks.splice(this.ignoreTasks.indexOf(e),1),localStorage.setItem("ignore_tasks",JSON.stringify(this.ignoreTasks)))},open(e,t){window.open(e,"_blank")},reset(){this.$emit("reset")}}}),o=(n(2),i.a.extend({template:document.getElementById("main_template"),props:["envInfo","runInfo","resultInfo"],components:{"report-viewer":r},data:()=>({status:"pending"}),methods:{startAudit(){this.status="running",start(!1)},stopAudit(){this.status="finishing",onStopClicked()},reset(){this.status="ready"},openUrl(e){window.open(e,"_blank")}}}));n(15),window.isAuditsTabEnv=!0;const a=n(3),s=n(6),c=n(0),l=n(2),u=n(7),d=n(23),f=n(24),p=n(1),m=n(57),{$:h,$$:v,sprintf:g,log:y}=l,b={},w=!(navigator.userAgent.match(/port\/(\d*)/)&&window&&/chrome\-extension/.test(window.location.href));let x;s.on("ON_REQUEST_EVENT",e=>{!function(e){const t=e.details;if(!t)return;const n=t.url;"devtools"!==e.type&&"editor"!==e.type&&(l.isRequestNotForAudit(n)||(b[e.eventName]||(b[e.eventName]=[]),b[e.eventName].indexOf(t.requestId)>-1||(b[e.eventName].push(t.requestId),c.emit("network-event",e))))}(e.data)}),s.on("TRANSFER",e=>{let{eventName:t,data:n,from:i}=e.data;c.emit(t,n,i)}),s.on("START_AUDITS",e=>{R||(window.start(!0),N=!1,$=!0)}),s.on("PROJECT_SETTING",e=>{U=e.setting}),s.on("STOP_AUDITS",e=>{window.onStopClicked(),N=!0}),s.on("RESP_FS_GET_FILES",e=>{const t=e.data.res;t.files.forEach(e=>{/\.js$/.test(e)&&u.readFile(e,e=>{P.jsFilesContentLen[e.path.slice(1,-3)]=e.content.length})}),c.emit("get-files",t.files,t.info)}),s.on("ON_DOWNLOADTASK_HEADERS_RECEIVED",e=>{l.log("ON_DOWNLOADTASK_HEADERS_RECEIVED",e),c.emit("downloadtask-headers-received",e)}),s.on("ON_SOCKET_STATE_CHANGE",e=>{l.log("ON_SOCKET_STATE_CHANGE",e),c.emit("socket-state-change",e)}),s.on("CHANGE_DEBUGGEE",e=>{R&&!x&&e.stack&&e.stack[0].debuggee&&(x=e.stack[0].debuggee,R&&te(x))}),s.on("ON_DEBUGGEE_EVENT",e=>{l.log("ON_DEBUGGEE_EVENT",e)}),s.on("GET_MIN_PUBLIC_LIB_VERSION",function({data:e}){l.log(`GET_MIN_PUBLIC_LIB_VERSION ${e.minPublicLibVersion}`),B=e.minPublicLibVersion});const _={deviceName:"Loading...",networkType:"Loading...",libVersion:"Loading..."},C={currentPage:"",coverPage:0,totalPage:0},k={isGameApp:!1,result:{score:0,level:"A",tasks:[],passed:[],failed:[],ignored:[],notApplicable:[],categories:[{type:p.SCORING_CATEGORY.PERFORMANCE,text:"性能",description:"从页面渲染、网络、JS脚本等方面评估小程序的性能",score:{num:0,level:"A"},failedItems:[]},{type:p.SCORING_CATEGORY.ACCESSIBILITY,text:"体验",description:"从视觉、交互等方面评估小程序的体验是否足够好",score:{num:0,level:"A"},failedItems:[]},{type:p.SCORING_CATEGORY.BEST_PRACTICE,text:"最佳实践",description:"",score:{num:0,level:"A"},failedItems:[]}]}},E=new Set,O=new o({propsData:{envInfo:_,runInfo:C,resultInfo:k,theme:"white"}});O.$mount("#main"),window.onShown=function(){},window.onHidden=function(){};let T=JSON.parse(localStorage.getItem("ignore_tasks")||"[]"),S=[],A=0,I=0,R=!1,$=!1,N=!1,F="",L=!1,M=60,P={jsFilesContentLen:{},eachPageDeps:{},allDefinedPages:null,allDefinedModules:null,haveBeenLoadedPages:["app"]},D=!1,j=f.miniProgram,G=j.length,B="",U={};function q(e,t){const n=(e=e.filter(e=>e.weight>0)).reduce((e,n)=>{if(t&&n.scoringCategory!=t)return e;{const t=n.score,i=n.weight;return{weight:e.weight+i,sum:e.sum+t*i}}},{weight:0,sum:0});return Math.round(n.sum/n.weight||0)}function H(e,t){const n=q(e,t);let i="D";return n>=90?i="A":n>=70?i="B":n>=50&&(i="C"),{num:n,level:i}}const z={};async function Y(e){return Promise.all(e.map(e=>(function(e){let t=function(e){for(let t=0,n=e.length;t<n;++t)if("stack"==e[t].type)return e[t].key;return!1}(e.headings),n=[];return t?(e.details.forEach(e=>{e[t]&&e[t].length&&(n=n.concat(e[t]))}),new Promise((i,r)=>{z[e.meta.id]=function(n){delete z[e.meta.id],e.details.forEach(e=>{e[t]&&e[t].length&&e[t].forEach(e=>{let t=n[e.file][`${e.line},${e.column}`];t&&(e.line=t.line,e.column=t.column)})}),i()},setTimeout(i,3e3),s.invoke("GET_FILE_ORIGINAL_POSITION",{key:e.meta.id,files:n})})):Promise.resolve()})(e)))}async function J(e){++I===G&&(S=j.map(e=>e.generateAuditResult()),await async function(e){const t=[],n=[],i=[],r=[];T=JSON.parse(localStorage.getItem("ignore_tasks")||"[]"),e.forEach(e=>{if(D)for(let t=0,n=e.headings.length;t<n;++t)if("page"==e.headings[t].key){e.headings.splice(t,1);break}T.indexOf(e.meta.id)>-1?(i.push(e),e.weight=0,e.score=100):e.scoreDisplayMode===p.SCORING_MODES.NOT_APPLICABLE?(r.push(e),e.weight=0,e.score=100):"passed"===e.status?(t.push(e),e.score=100):(e.scoreDisplayMode===p.SCORING_MODES.NOT_ACCURATE&&(e.showIgnore=!0),n.push(e),e.score=0)});const o=H(e);U.es6&&await Y(n);const a=k.result;a.score=o.num,a.level=o.level,D?(a.categories[0].score=H(e,p.SCORING_CATEGORY.PERFORMANCE),a.categories[1].score=H(e,p.SCORING_CATEGORY.BEST_PRACTICE)):(a.categories[0].score=H(e,p.SCORING_CATEGORY.PERFORMANCE),a.categories[1].score=H(e,p.SCORING_CATEGORY.ACCESSIBILITY),a.categories[2].score=H(e,p.SCORING_CATEGORY.BEST_PRACTICE)),a.categories.forEach(e=>{e.failedItems=n.filter(t=>t.scoringCategory==e.type),e.passedItems=t.filter(t=>t.scoringCategory==e.type)}),a.failed=n,a.notApplicable=r,a.tasks=e,O.$set(O.resultInfo,"result",a),O.$set(O,"status","finished")}(S),V(),j.forEach(e=>{e.clearFailedItems()}),I=0,c.removeAllListeners("audit-finished",J),N&&(N=!1,$=!1))}function V(e="stop",t){let n={},i={num:0,level:""},r="",o="";"stop"===e?(i=H(S),r=k.result.failed.map(e=>[e.meta.id,e.details.length].join(":")).join(";"),o=k.result.tasks.filter(e=>T.indexOf(e.meta.id)>-1).map(e=>[e.meta.id,e.details.length].join(":")).join(";")):"notification"===e&&(i.num=t),n.score_num=i.num,n.extra1=e,n.confidence=M,n.version=m.version,L||w?n.results=S.map(e=>({id:e.meta.id,headings:e.headings.filter(e=>"stack"!=e.key),details:e.details.map(e=>({row:Object.keys(e).filter(e=>"stack"!=e).map(t=>({key:t,text:e[t]}))})),score:e.score,scoreDisplayMode:e.scoreDisplayMode,weight:e.weight})):(n.score_level=i.level,n.failed_detail=r,n.ignored_detail=o,n.use_time="stop"===e?Date.now()-A:0,n.extra2=D?$?"3":"2":$?"1":"0",n.extra3=F),d.reportBehavior(n)}s.on("GET_FILE_ORIGINAL_POSITION_CALLBACK",e=>{let{files:t}=e,n={};t.forEach(e=>{n[e.file]=n[e.file]||{},n[e.file][`${e.originalLine},${e.originalColumn}`]={line:e.line,column:e.column}}),z[e.key]&&"function"==typeof z[e.key]&&z[e.key](n)}),window.stopAudit=function(){x&&(s.invoke("DEBUGGER_SEND_COMMAND",{debuggee:x,method:"Tracing.end",requiredMethods:["Tracing.bufferUsage","Tracing.dataCollected","Tracing.tracingComplete"]}),x=null),s.invoke("STOP_EXPERIENCE_ANALYSIS"),s.invoke("TRANSFER",{eventName:"stop-audit",data:{}}),c.emit("stop-audit"),R=!1,clearTimeout(W),K=1,X=!1};let W=null,K=1,X=!1;function Z(){if(!$||!R)return X=!1,void(K=1);T=JSON.parse(localStorage.getItem("ignore_tasks")||"[]");const e=q(j.map(e=>{const t=e.generateAuditResult(),n={weight:t.weight,score:100};return T.indexOf(t.meta.id)>-1?n.weight=0:"passed"===t.status?n.score=100:n.score=0,n}));e<70&&(K++,s.invoke("TRANSFER",{eventName:"console",data:{msg:"发现当前小程序体验较差，请移至 Audits 面板查看详情，或点击链接：devtools://audits"}}),X||(V("notification",e),X=!0)),W=setTimeout(Z,10*K*1e3)}function Q(){let e="",t=P;if(t.allDefinedModules&&t.allDefinedPages){t.eachPageDeps={};for(let n=0;n<t.allDefinedModules.length;n++){const i=t.allDefinedModules[n].slice(0,-3);t.allDefinedPages.indexOf(i)>-1?(t.eachPageDeps[i]=[i],e=i):e?t.eachPageDeps[e].push(i):a.reportCustomError(`lastMod is empty. mod: ${i}, allDefinedPages: ${t.allDefinedPages}`)}0}}let ee={};function te(e){s.invoke("DEBUGGER_SEND_COMMAND",{debuggee:e,method:"Tracing.start",commandParams:{bufferUsageReportingInterval:1e3,traceConfig:{includedCategories:["blink.console","blink.user_timing","loading","devtools.timeline","__metadata"]}},requiredMethods:["Tracing.bufferUsage","Tracing.dataCollected","Tracing.tracingComplete"]},e=>{0})}c.on("not-supported-wxalib",function(){O.$set(O,"status","notSupport"),h("#stop").innerText="Close"}),c.on("get-pages",function(e){e.unshift("app"),P.allDefinedPages=e,Q()}),c.on("appservice-onload",function(e){ee=e.wxConfig,E.clear(),C.totalPage=ee.pages.length,C.coverPage=0,s.invoke("APPSERVICE_REBUILD"),R&&Date.now()-A>5e3&&(c.emit("rebuild"),M=60,P.haveBeenLoadedPages=["app"],P.allDefinedPages=null,P.allDefinedModules=null,s.invoke("FS_GET_FILES"),j.forEach(e=>{e.clearFailedItems()})),F=e.appId,L=e.isCrawler,P.allDefinedModules=e.allModules,Q()}),c.on("add-js-module",function(e){P.allDefinedModules&&(P.allDefinedModules.push(e.mod),Q())}),c.on("app-route",function(e){const t=P;if(E.has(e.path)||(E.add(e.path),C.currentPage=e.path,C.coverPage=E.size),t.haveBeenLoadedPages.indexOf(e.path)>-1||/^(__plugin__|__wx__)/.test(e.path))return;t.haveBeenLoadedPages.push(e.path);const n=l.unique(Object.values(t.eachPageDeps).reduce((e,t)=>e.concat(t),[])).reduce((e,n)=>e+Math.min(t.jsFilesContentLen[n],3e4),0),i=l.unique(t.haveBeenLoadedPages.reduce((e,n)=>e.concat(t.eachPageDeps[n]?t.eachPageDeps[n]:[n]),[])).reduce((e,n)=>e+Math.min(t.jsFilesContentLen[n],3e4),0);M=Math.floor(i/n*100),M=isNaN(M)||!isFinite(M)?60:M}),c.on("after-webview-task-init",function(e){""!==B&&(c.emit("min-public-lib-version",{minPublicLibVersion:B}),s.invoke("TRANSFER",{eventName:"min-public-lib-version",data:{minPublicLibVersion:B}}))}),window.start=function(e){clearTimeout(W),K=1,X=!1,R||(O.$set(O,"status","running"),R=!0,E.clear(),e?W=setTimeout(Z,1e4):s.invoke("START_EXPERIENCE_ANALYSIS"),x&&te(x),s.invoke("FS_GET_FILES"),S=[],M=50,P={jsFilesContentLen:{},eachPageDeps:{},allDefinedPages:null,allDefinedModules:null,haveBeenLoadedPages:["app"]},A=Date.now(),c.emit("start-audit"),V("start"))},window.onStopClicked=function(){c.on("audit-finished",J),window.stopAudit()},window.openEditor=function(e,t,n){l.log("OPEN_FILE",e,t,n),s.invoke("OPEN_FILE",{file:e,line:t,column:n})},s.on("PANEL_READY_CALLBACK",e=>{D=e.data.isGameApp;const{deviceName:t,networkType:n,libVersion:i}=e.data;V("shown"),D&&(j=f.game,G=j.length,k.isGameApp=D,k.result.categories.splice(1,1)),_.deviceName=t,_.networkType=n,_.libVersion=i,j.forEach(e=>e.init()),R?O.$set(O,"status","running"):O.$set(O,"status","ready")}),s.on("EMULATOR_ENV_CHANGE",e=>{_.deviceName=e.data.deviceName||_.deviceName,_.networkType=e.data.networkType||_.networkType,_.libVersion=e.data.libVersion||_.libVersion}),s.invoke("PANEL_READY",{},e=>{l.log(e)});let ne=new(n(58));ne.onmessage=function(e){let{eventName:t,key:n,selectorList:i}=e.data;"finished-wxss-cal"==t&&s.invoke("TRANSFER",{eventName:"finished-wxss-cal",data:{key:n,selectorList:i}})},c.on("cal-iphonex-compatibility-wxss",function(e){e.eventName="cal-iphonex-compatibility-wxss",ne.postMessage(e)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,